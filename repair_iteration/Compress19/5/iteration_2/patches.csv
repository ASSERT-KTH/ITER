bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
2	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
3	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  3;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  3;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
4	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  3;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  3;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  3;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
5	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
6	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
7	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
8	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
9	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  1;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  1;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
10	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  1;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  1;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  1;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
11	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  1;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
12	[BUG]  [BUGGY]  offset  +=  1;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  1;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
13	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  [CE]  illegal  start  of  expression  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
14	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	225	1	replace
15	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	225	1	replace
16	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  WORD;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	225	1	replace
17	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	225	1	replace
18	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  WORD;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	225	1	replace
19	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	225	1	replace
20	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  WORD;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	225	1	replace
21	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	225	1	replace
22	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  incompatible  types	225	None	replace
23	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	162	1	replace
24	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	162	1	replace
25	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  WORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	162	1	replace
26	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	162	1	replace
27	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
28	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  inconvertible  types  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	non-compiled	[CE]  inconvertible  types	162	None	replace
29	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
30	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	126	1	replace
31	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	126	1	replace
32	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	126	1	replace
33	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	126	1	replace
34	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	126	1	replace
35	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	126	1	replace
36	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  DWORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	126	1	replace
37	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	126	1	replace
38	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  WORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	126	1	replace
39	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	126	1	replace
40	[BUG]  [BUGGY]  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
41	[BUG]  [BUGGY]  offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
42	[BUG]  [BUGGY]  offset  +=  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
43	[BUG]  [BUGGY]  offset  +=  2;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
44	[BUG]  [BUGGY]  offset  +=  2;  }  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  }  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  }  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
45	[BUG]  [BUGGY]  offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  3;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  3;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  3;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
46	[BUG]  [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG.toLowerCase();  [CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG.toLowerCase();  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_BOTH_SIZES_MSG.toLowerCase();	  offset    +=    LFH_MUST_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG	205	None	replace
47	[BUG]  [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG.trim();  [CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG.trim();  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_BOTH_SIZES_MSG.trim();	  offset    +=    LFH_MUST_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG	205	None	replace
48	[BUG]  [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG.remaining;  [CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG.remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_BOTH_SIZES_MSG.remaining;	  offset    +=    LFH_MUST_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG	205	None	replace
49	[BUG]  [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG.charAt(remaining);  [CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG.charAt(remaining);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_BOTH_SIZES_MSG.charAt(remaining);	  offset    +=    LFH_MUST_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG	205	None	replace
50	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
51	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
52	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
53	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	compilable	  [FE]  ZipException  	115	1	replace
54	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	compilable	  [FE]  ZipException  	115	1	replace
55	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  length;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  offset  +=  length;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	compilable	  [FE]  ZipException  	115	1	replace
56	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  length;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  length;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  length;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	compilable	  [FE]  ZipException  	115	1	replace
57	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  incompatible  types	228	None	replace
58	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	228	None	replace
59	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  incompatible  types	228	None	replace
60	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	compilable	  [FE]  ZipException  	228	1	replace
61	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	compilable	  [FE]  ZipException  	228	1	replace
62	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  incompatible  types	228	None	replace
63	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	255	1	replace
64	[BUG]  [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	255	1	replace
65	[BUG]  [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	255	None	replace
66	[BUG]  [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  2;  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  2;	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	255	None	replace
67	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  2;  }	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	255	1	replace
68	[BUG]  [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  2;  }  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  2;  }	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	255	1	replace
69	[BUG]  [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  NORD;  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  NORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  NORD;	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	255	None	replace
70	[BUG]  [BUGGY]  buffer.append(diskStart).append('/');  offset  +=  length;  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart).append('/');  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart).append('/');  offset  +=  length;	  offset    +=    length;    buffer.append(diskStart).append('/');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	249	None	replace
71	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('/');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	249	None	replace
72	[BUG]  [BUGGY]  if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('/');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	249	None	replace
73	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('/');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	249	None	replace
74	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('/');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	249	None	replace
75	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('/');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	249	None	replace
76	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    DWORD;    offset  -=  DWORD;	  	compilable	  [FE]  ZipException  	55	1	add
77	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    offset  -=  DWORD;	  	compilable	  [FE]  ZipException  	55	1	add
78	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    offset  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;	  	non-compiled	[CE]  incompatible  types	55	None	add
79	[BUG]  [BUGGY]  offset  -=  DWORD;  buffer.append(diskStart).append(length  -  DWORD);  offset  -=  DWORD;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  buffer.append(diskStart).append(length  -  DWORD);  offset  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    buffer.append(diskStart).append(length  -  DWORD);  offset  -=  DWORD;	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
80	[BUG]  [BUGGY]  offset  -=  DWORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  DWORD;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    buffer.append(diskStart).append(length  -  1);  offset  -=  DWORD;	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
81	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    DWORD;    offset  -=  DWORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	55	1	add
82	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  remaining  -=  WORD;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	55	1	add
83	[BUG]  [BUGGY]  offset  -=  DWORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  DWORD;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    buffer.append(diskStart).append(length  -  2);  offset  -=  DWORD;	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
84	[BUG]  [BUGGY]  offset  -=  DWORD;  buffer.append(diskStart).append('/');  offset  -=  DWORD;  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  buffer.append(diskStart).append('/');  offset  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    buffer.append(diskStart).append('/');  offset  -=  DWORD;	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
85	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  =  new  ZipLong(buffer,  offset);  offset  -=  DWORD;  [CE]  incompatible  types  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  =  new  ZipLong(buffer,  offset);  offset  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    offset  =  new  ZipLong(buffer,  offset);  offset  -=  DWORD;	  	non-compiled	[CE]  incompatible  types	55	None	add
86	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    continue    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
87	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    continue    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
88	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    continue    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
89	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    continue    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
90	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    continue    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
91	[BUG]  [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  incompatible  types	93	None	replace
92	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  incompatible  types	93	None	replace
93	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  diskSize  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	93	None	replace
94	[BUG]  [BUGGY]  if(remaining  ==  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  diskSize  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	93	None	replace
95	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  'else'  without  'if'  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  'else'  without  'if'	93	None	replace
96	[BUG]  [BUGGY]  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  diskSize  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	93	None	replace
97	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]                              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  ')'  expected	93	None	replace
98	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;	  	compilable	  [FE]  ZipException  	160	1	add
99	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;	  	compilable	  [FE]  ZipException  	160	1	add
100	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	160	1	add
101	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	160	1	add
102	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	160	1	add
103	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	160	1	add
104	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	160	1	add
105	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	160	1	add
106	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	160	1	add
107	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	160	1	add
108	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	160	None	add
109	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  [CE]  illegal  start  of  expression  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	160	None	add
110	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  [CE]  illegal  start  of  expression  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	160	None	add
111	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	212	1	add
112	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	212	1	add
113	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	212	1	add
114	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	212	1	add
115	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  discStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	212	None	add
116	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	212	None	add
117	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  ';'  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  ';'  expected	212	None	add
118	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  3;	  offset    +=    2;    offset    +=    2;    	compilable	  [FE]  ZipException  	29	1	replace
119	[BUG]  [BUGGY]  offset  +=  3;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  3;	  offset    +=    2;    offset    +=    2;    	compilable	  [FE]  ZipException  	29	1	replace
120	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    	compilable	  [FE]  ZipException  	241	1	replace
121	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    	compilable	  [FE]  ZipException  	241	1	replace
122	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  <  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    	compilable	  [FE]  ZipException  	241	1	replace
123	[BUG]  [BUGGY]  if(remaining  <  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    	compilable	  [FE]  ZipException  	241	1	replace
124	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    	compilable	  [FE]  ZipException  	241	1	replace
125	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    	compilable	  [FE]  ZipException  	241	1	replace
126	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  ==  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    	compilable	  [FE]  ZipException  	241	1	replace
127	[BUG]  [BUGGY]  if(remaining  ==  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    	compilable	  [FE]  ZipException  	241	1	replace
128	[BUG]  [BUGGY]  while(remaining  >  diskStart)  {  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  diskStart)  {  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  diskStart)  {  remaining  -=  WORD;	  remaining    -=    WORD;    while(remaining    >    WORD)    {    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
129	[BUG]  [BUGGY]  while(remaining  <  WORD)  {  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  <  WORD)  {  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  <  WORD)  {  remaining  -=  WORD;	  remaining    -=    WORD;    while(remaining    >    WORD)    {    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
130	[BUG]  [BUGGY]  while(remaining  >  diskStart)  {  remaining  -=  WORD;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  diskStart)  {  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  diskStart)  {  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    remaining    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	80	None	replace
131	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ZipException  	187	1	add
132	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ZipException  	187	1	add
133	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	187	1	add
134	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	187	1	add
135	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	187	1	add
136	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	187	1	add
137	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  resetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  resetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  resetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol	187	None	add
138	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  isRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  isRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  isRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol	187	None	add
139	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));	  	compilable	  [FE]  ZipException  	187	1	add
140	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));	  	compilable	  [FE]  ZipException  	187	1	add
141	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remainder  -=  WORD;  [CE]  cannot  find  symbol  remainder  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remainder  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remainder  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  remainder	187	None	add
142	[BUG]  [BUGGY]  offset  +=  2  *  discStart;  [CE]  cannot  find  symbol  discStart  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  discStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2  *  discStart;	  offset    +=    2    *    DWORD;    	non-compiled	[CE]  cannot  find  symbol  discStart	3	None	replace
143	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  2  *  DWORD;	  offset    +=    2    *    DWORD;    	compilable	  [FE]  ZipException  	3	1	replace
144	[BUG]  [BUGGY]  offset  -=  2  *  DWORD;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  2  *  DWORD;	  offset    +=    2    *    DWORD;    	compilable	  [FE]  ZipException  	3	1	replace
145	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2  *  DWORD  +  1;	  offset    +=    2    *    DWORD;    	compilable	  [FE]  ZipException  	3	1	replace
146	[BUG]  [BUGGY]  offset  +=  2  *  DWORD  +  1;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2  *  DWORD  +  1;	  offset    +=    2    *    DWORD;    	compilable	  [FE]  ZipException  	3	1	replace
147	[BUG]  [BUGGY]  offset  +=  2  *  DWORD  +  diskStart;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD  +  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2  *  DWORD  +  diskStart;	  offset    +=    2    *    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
148	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.remaining;  [CE]  cannot  find  symbol  remaining  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.remaining;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSGS;    	non-compiled	[CE]  cannot  find  symbol  remaining	123	None	replace
149	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.trim();  [CE]  inconvertible  types  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.trim();  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.trim();	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSGS;    	non-compiled	[CE]  inconvertible  types	123	None	replace
150	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  WORD;  [CE]  inconvertible  types  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  WORD;	  offset    +=    length;    offset    +=    length;    	non-compiled	[CE]  inconvertible  types	61	None	replace
151	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  length;  offset  +=  length;	  offset    +=    length;    offset    +=    length;    	compilable	  [FE]  ZipException  	61	1	replace
152	[BUG]  [BUGGY]  offset  -=  length;  offset  +=  length;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  length;  offset  +=  length;	  offset    +=    length;    offset    +=    length;    	compilable	  [FE]  ZipException  	61	1	replace
153	[BUG]  [BUGGY]  timeout  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	timeout	79	1	replace
154	[BUG]  [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  }  timeout  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	timeout	79	1	replace
155	[BUG]  [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
156	[BUG]  [BUGGY]  while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
157	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	79	1	replace
158	[BUG]  [BUGGY]  while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [FE]  ZipException  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	79	1	replace
159	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  1;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  1;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	79	1	replace
160	[BUG]  [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  1;  }  [FE]  ZipException  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  1;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  1;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	79	1	replace
161	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	while(remaining  >  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	79	1	replace
162	[BUG]  [BUGGY]  while(remaining  >  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [FE]  ZipException  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	79	1	replace
163	[BUG]  [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);	  remaining    -=    WORD;    while(remaining    >    0)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
164	[BUG]  [BUGGY]  remaining  -=  length;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  length;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    0)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  discStart	257	None	replace
165	[BUG]  [BUGGY]  remaining  -=  2;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  2;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    0)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  discStart	257	None	replace
166	[BUG]  [BUGGY]  remaining  -=  length;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  length;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);	  remaining    -=    WORD;    while(remaining    >    0)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
167	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DWORD;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    0)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  discStart	257	None	replace
168	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
169	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
170	[BUG]  [BUGGY]  offset  +=  1;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  1;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	178	None	replace
171	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append(remaining    -    WORD);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
172	[BUG]  [BUGGY]  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(remaining    -    WORD);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
173	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append(diskStart  -  WORD);  offset  -=  WORD;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append(diskStart  -  WORD);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  buffer.append(remaining).append(diskStart  -  WORD);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(remaining    -    WORD);    offset    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	22	None	replace
174	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  2);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  2);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  2);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(remaining    -    WORD);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
175	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  1);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  1);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  1);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(remaining    -    WORD);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
176	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	89	1	replace
177	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	89	1	replace
178	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	89	None	replace
179	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	89	1	replace
180	[BUG]  [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	89	1	replace
181	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	89	1	replace
182	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	89	1	replace
183	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	89	None	replace
184	[BUG]  [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
185	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
186	[BUG]  [BUGGY]  offset  +=  DECIMAL_DECIMAL_SIZES_MSG;  [CE]  cannot  find  symbol  DECIMAL_DECIMAL_SIZES_MSG  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DECIMAL_DECIMAL_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_DECIMAL_SIZES_MSG;	  offset    +=    DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_DECIMAL_SIZES_MSG	71	None	replace
187	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    offset  +=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	120	1	add
188	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    offset  +=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	120	1	add
189	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	120	1	add
190	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	120	1	add
191	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
192	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)	  	compilable	  [FE]  ZipException  	120	1	add
193	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)	  	compilable	  [FE]  ZipException  	120	1	add
194	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD  [CE]  ')'  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD	  	non-compiled	[CE]  ')'  expected	120	None	add
195	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length;  }  [CE]  incompatible  types  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  incompatible  types	120	None	add
196	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	120	1	add
197	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	120	1	add
198	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  [CE]  ')'  expected  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >	  	non-compiled	[CE]  ')'  expected	120	None	add
199	[BUG]  [BUGGY]  offset  +=  diskStart  -  WORD;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  WORD;	  offset    +=    diskStart    -    remaining;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	133	None	replace
200	[BUG]  [BUGGY]  offset  +=  diskStart  -  remaining.length;  [CE]  int  cannot  be  dereferenced  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  remaining.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  remaining.length;	  offset    +=    diskStart    -    remaining;    	non-compiled	[CE]  int  cannot  be  dereferenced	133	None	replace
201	[BUG]  [BUGGY]  offset  +=  diskStart  -  remaining  *  WORD;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  remaining  *  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  remaining  *  WORD;	  offset    +=    diskStart    -    remaining;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	133	None	replace
202	[BUG]  [BUGGY]  offset  +=  diskStart  -  remaining,  length;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  remaining,  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  remaining,  length;	  offset    +=    diskStart    -    remaining;    	non-compiled	[CE]  ';'  expected	133	None	replace
203	[BUG]  [BUGGY]  offset  +=  remaining  -  diskStart;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining  -  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining  -  diskStart;	  offset    +=    diskStart    -    remaining;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	133	None	replace
204	[BUG]  [BUGGY]  offset  +=  diskStart  /  remaining;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  /  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  /  remaining;	  offset    +=    diskStart    -    remaining;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	133	None	replace
205	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
206	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [CE]  ';'  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	146	None	replace
207	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	146	1	replace
208	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	146	1	replace
209	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	146	None	replace
210	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	146	1	replace
211	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	146	1	replace
212	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  [CE]  ';'  expected  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	146	None	replace
213	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	146	None	replace
214	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	91	1	replace
215	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	91	1	replace
216	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD	  if(diskStart    ==    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	91	None	replace
217	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  2;	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	168	1	replace
218	[BUG]  [BUGGY]  remaining  -=  2;  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  2;	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	168	1	replace
219	[BUG]  [BUGGY]  remaining  -=  DEFAULT_SIZE;  [CE]  cannot  find  symbol  DEFAULT_SIZE  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_SIZE;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_SIZE;	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SIZE	168	None	replace
220	[BUG]  [BUGGY]  remaining  -=  LIVE_SIZES_MSG;  [CE]  cannot  find  symbol  LIVE_SIZES_MSG  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  LIVE_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  LIVE_SIZES_MSG;	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  LIVE_SIZES_MSG	168	None	replace
221	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	108	None	replace
222	[BUG]  [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong  [CE]  '('  or  '['  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	108	None	replace
223	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	108	None	replace
224	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  ')'  expected	108	None	replace
225	[BUG]  [BUGGY]  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong  [CE]  '('  or  '['  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	108	None	replace
226	[BUG]  [BUGGY]  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong  [CE]  '('  or  '['  expected  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  '('  or  '['  expected	108	None	replace
227	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append('    ');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
228	[BUG]  [BUGGY]  buffer.append(diskStart).append('  ');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart).append('  ');  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart).append('  ');  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append('    ');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
229	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append('  ');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append('  ');  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  buffer.append(remaining).append('  ');  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append('    ');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
230	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append('    ');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
231	[BUG]  [BUGGY]  if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append('    ');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
232	[BUG]  [BUGGY]  offset  -=  length;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  length;  buffer.append(diskStart).append('  ');  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append('    ');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	235	None	replace
233	[BUG]  [BUGGY]  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	180	None	replace
234	[BUG]  [BUGGY]  offset  +=  1;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  1;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	180	None	replace
235	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	180	1	replace
236	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	180	1	replace
237	[BUG]  [BUGGY]  offset  +=  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  3;  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  3;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  3;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	180	None	replace
238	[BUG]  [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  }  [CE]  cannot  find  symbol  discStart  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  discStart	82	None	replace
239	[BUG]  [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [CE]  illegal  start  of  expression  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;	  remaining    -=    WORD;    while(remaining    >    WORD)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
240	[BUG]  [BUGGY]  while(remaining  >  3)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  discStart  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  3)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  3)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  discStart	82	None	replace
241	[BUG]  [BUGGY]  while(remaining  >  3)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  3)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  3)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  remaining    -=    WORD;    while(remaining    >    WORD)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
242	[BUG]  [BUGGY]  while(remaining  >  length)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  discStart  [FE]                              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  length)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  length)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  discStart	82	None	replace
243	[BUG]  [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  1;  }  [CE]  cannot  find  symbol  discStart  [FE]                                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  1;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  1;  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  discStart	82	None	replace
244	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	60	1	add
245	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	60	1	add
246	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
247	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
248	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
249	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
250	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
251	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	1	add
252	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	1	add
253	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
254	[BUG]  [BUGGY]  remaining  -=  READER_ID;  [CE]  cannot  find  symbol  READER_ID  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  READER_ID;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  READER_ID;	  remaining    -=    discStart;    	non-compiled	[CE]  cannot  find  symbol  READER_ID	48	None	replace
255	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE;	  remaining    -=    discStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	48	None	replace
256	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
257	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	144	1	replace
258	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	144	1	replace
259	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
260	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  ';'  expected	144	None	replace
261	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  ';'  expected	144	None	replace
262	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	144	None	replace
263	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  [CE]  ';'  expected  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  ';'  expected	144	None	replace
264	[BUG]  [BUGGY]  offset  +=  diskStart  -  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	198	None	replace
265	[BUG]  [BUGGY]  offset  +=  length  -  diskStart;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  -  diskStart;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	198	None	replace
266	[BUG]  [BUGGY]  offset  +=  discStart  -  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  discStart  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  discStart  -  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  discStart  -  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  discStart	198	None	replace
267	[BUG]  [BUGGY]  offset  +=  diskStart  -  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG	198	None	replace
268	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  -  diskStart;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  -  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  -  diskStart;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	198	None	replace
269	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  -  diskStart;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  -  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  -  diskStart;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG	198	None	replace
270	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(discStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	150	1	replace
271	[BUG]  [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(discStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	150	1	replace
272	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  length;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	76	1	replace
273	[BUG]  [BUGGY]  remaining  -=  length;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  length;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	76	1	replace
274	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  2;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	76	1	replace
275	[BUG]  [BUGGY]  remaining  -=  2;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  2;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	76	1	replace
276	[BUG]  [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
277	[BUG]  [BUGGY]  remaining  -=  length;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  length;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
278	[BUG]  [BUGGY]  remaining  -=  2;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  2;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
279	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  1;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  1;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	76	1	replace
280	[BUG]  [BUGGY]  remaining  -=  1;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  1;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  1;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	76	1	replace
281	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_SIZES_MSG;  [CE]  cannot  find  symbol  LFH_MUST_HAVE_SIZES_MSG  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_SIZES_MSG;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_HAVE_SIZES_MSG	122	None	replace
282	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES.length;  [CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES.length;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES	122	None	replace
283	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZE;  [CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZE  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZE;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZE;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZE	122	None	replace
284	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	233	2	add
285	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	233	2	add
286	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	233	2	add
287	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	233	2	add
288	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  'else'  without  'if'  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  'else'  without  'if'	233	None	add
289	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	233	2	add
290	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  remaining  -=  WORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	233	2	add
291	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  'else'  without  'if'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  'else'  without  'if'	233	None	add
292	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  illegal  start  of  expression	233	None	add
293	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	233	None	add
294	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	233	2	add
295	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	233	2	add
296	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	230	1	replace
297	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	230	1	replace
298	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	230	1	replace
299	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	230	1	replace
300	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	230	1	replace
301	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	230	1	replace
302	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	230	1	replace
303	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	230	1	replace
304	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	230	1	replace
305	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	230	1	replace
306	[BUG]  [BUGGY]  offset  +=  diskStart  +  length;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  +  length;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    +    length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	86	None	replace
307	[BUG]  [BUGGY]  offset  +=  length  +  DEFAULT_DECIMAL_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  +  DEFAULT_DECIMAL_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  +  DEFAULT_DECIMAL_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	86	None	replace
308	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	86	None	replace
309	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  LFH_MUST_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  LFH_MUST_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  LFH_MUST_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	86	None	replace
310	[BUG]  [BUGGY]  offset  +=  DECIMAL_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DECIMAL_HAVE_BOTH_SIZES_MSG  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DECIMAL_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_HAVE_BOTH_SIZES_MSG;	  offset    +=    DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_HAVE_BOTH_SIZES_MSG	72	None	replace
311	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	117	1	replace
312	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	117	1	replace
313	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	117	1	replace
314	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	117	1	replace
315	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	117	1	replace
316	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	117	1	replace
317	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	117	1	replace
318	[BUG]  [BUGGY]  offset  +=  length;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	117	1	replace
319	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	117	1	replace
320	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	117	1	replace
321	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset  +=  DWORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
322	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  DWORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset  +=  DWORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
323	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset  +=  DWORD;  remaining  -=  DWORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
324	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset  +=  DWORD;  remaining  -=  DWORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
325	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
326	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
327	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
328	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
329	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
330	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
331	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
332	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
333	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
334	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
335	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
336	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
337	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	153	1	add
338	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	153	1	add
339	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	153	1	add
340	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	153	1	add
341	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	153	1	add
342	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	153	1	add
343	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	153	1	add
344	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	153	1	add
345	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  =  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  =  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	153	1	add
346	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  =  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  =  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  =  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	153	1	add
347	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [CE]  incompatible  types  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;	  	non-compiled	[CE]  incompatible  types	153	None	add
348	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	153	1	add
349	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	153	1	add
350	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  if(this.relativeHeaderOffset!=  null)  {  this.relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [CE]  incompatible  types  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  if(this.relativeHeaderOffset!=  null)  {  this.relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    if(this.relativeHeaderOffset!=  null)  {  this.relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	non-compiled	[CE]  incompatible  types	153	None	add
351	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    2;    offset  -=  2;	  	compilable	  [FE]  ZipException  	42	1	add
352	[BUG]  [BUGGY]  offset  -=  2;  offset  -=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    offset  -=  2;	  	compilable	  [FE]  ZipException  	42	1	add
353	[BUG]  [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(remaining);  offset  -=  2;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(remaining);  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    buffer.append(diskStart).append(remaining);  offset  -=  2;	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
354	[BUG]  [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(length  -  2);  offset  -=  2;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(length  -  2);  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    buffer.append(diskStart).append(length  -  2);  offset  -=  2;	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
355	[BUG]  [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(length  -  1);  offset  -=  2;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(length  -  1);  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    buffer.append(diskStart).append(length  -  1);  offset  -=  2;	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
356	[BUG]  [BUGGY]  offset  -=  2;  buffer.append(diskStart).append('n');  offset  -=  2;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  buffer.append(diskStart).append('n');  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    buffer.append(diskStart).append('n');  offset  -=  2;	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
357	[BUG]  [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(remaining  -  1);  offset  -=  2;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(remaining  -  1);  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    buffer.append(diskStart).append(remaining  -  1);  offset  -=  2;	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
358	[BUG]  [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(remaining  -  2);  offset  -=  2;  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(remaining  -  2);  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    buffer.append(diskStart).append(remaining  -  2);  offset  -=  2;	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
359	[BUG]  [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(remaining  -=  2);  offset  -=  2;  [CE]  cannot  find  symbol  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  buffer.append(diskStart).append(remaining  -=  2);  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    buffer.append(diskStart).append(remaining  -=  2);  offset  -=  2;	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
360	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  1;  offset  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    1;    offset  -=  1;	  	compilable	  [FE]  ZipException  	45	1	add
361	[BUG]  [BUGGY]  offset  -=  1;  offset  -=  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  1;  offset  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    1;    offset  -=  1;	  	compilable	  [FE]  ZipException  	45	1	add
362	[BUG]  [BUGGY]  offset  -=  1;  buffer.append(diskStart).append(length  -  1);  offset  -=  1;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  1;  buffer.append(diskStart).append(length  -  1);  offset  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    1;    buffer.append(diskStart).append(length  -  1);  offset  -=  1;	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
363	[BUG]  [BUGGY]  offset  -=  1;  buffer.append(diskStart).append(remaining  -  1);  offset  -=  1;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  1;  buffer.append(diskStart).append(remaining  -  1);  offset  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    1;    buffer.append(diskStart).append(remaining  -  1);  offset  -=  1;	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
364	[BUG]  [BUGGY]  offset  -=  1;  buffer.append(diskStart).append(remaining);  offset  -=  1;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  1;  buffer.append(diskStart).append(remaining);  offset  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    1;    buffer.append(diskStart).append(remaining);  offset  -=  1;	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
365	[BUG]  [BUGGY]  offset  -=  1;  buffer.append(diskStart).append(length  +  1);  offset  -=  1;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  1;  buffer.append(diskStart).append(length  +  1);  offset  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    1;    buffer.append(diskStart).append(length  +  1);  offset  -=  1;	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
366	[BUG]  [BUGGY]  offset  -=  1;  buffer.append(diskStart);  offset  -=  1;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  1;  buffer.append(diskStart);  offset  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    1;    buffer.append(diskStart);  offset  -=  1;	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
367	[BUG]  [BUGGY]  offset  -=  1;  buffer.append(diskStart).append('  ');  offset  -=  1;  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  1;  buffer.append(diskStart).append('  ');  offset  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    1;    buffer.append(diskStart).append('  ');  offset  -=  1;	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
368	[BUG]  [BUGGY]  offset  -=  1;  buffer.append(diskStart).append(remaining  +  1);  offset  -=  1;  [CE]  cannot  find  symbol  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  1;  buffer.append(diskStart).append(remaining  +  1);  offset  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    1;    buffer.append(diskStart).append(remaining  +  1);  offset  -=  1;	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
369	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
370	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
371	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
372	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
373	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
374	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
375	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
376	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
377	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
378	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
379	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  <  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
380	[BUG]  [BUGGY]  if(remaining  <  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
381	[BUG]  [BUGGY]  offset  +=  discStart  -  1;  [CE]  cannot  find  symbol  discStart  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  discStart  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  discStart  -  1;	  offset    +=    length    -    1;    	non-compiled	[CE]  cannot  find  symbol  discStart	100	None	replace
382	[BUG]  [BUGGY]  offset  +=  length  -  1  *  diskStart;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1  *  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  -  1  *  diskStart;	  offset    +=    length    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	100	None	replace
383	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining  -  1;	  offset    +=    length    -    1;    	compilable	  [FE]  ZipException  	100	1	replace
384	[BUG]  [BUGGY]  offset  +=  remaining  -  1;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining  -  1;	  offset    +=    length    -    1;    	compilable	  [FE]  ZipException  	100	1	replace
385	[BUG]  [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	77	None	replace
386	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  length;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	77	1	replace
387	[BUG]  [BUGGY]  remaining  -=  length;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  length;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	77	1	replace
388	[BUG]  [BUGGY]  timeout  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  0;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  0;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	timeout	77	1	replace
389	[BUG]  [BUGGY]  remaining  -=  0;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  timeout  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  0;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  0;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	timeout	77	1	replace
390	[BUG]  [BUGGY]  remaining  -=  length;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  length;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
391	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  2;  while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	77	1	replace
392	[BUG]  [BUGGY]  remaining  -=  2;  while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  2;  while(remaining  >  3)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	77	1	replace
393	[BUG]  [BUGGY]  timeout  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  1;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  1;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	timeout	77	1	replace
394	[BUG]  [BUGGY]  remaining  -=  1;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  timeout  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  1;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  1;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	timeout	77	1	replace
395	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append(diskStart);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append(diskStart);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  buffer.append(remaining).append(diskStart);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(remaining);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
396	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append(remaining);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
397	[BUG]  [BUGGY]  buffer.append(diskStart).append(remaining);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart).append(remaining);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart).append(remaining);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(remaining);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
398	[BUG]  [BUGGY]  buffer.append(remaining).append(diskStart);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(remaining).append(diskStart);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(remaining).append(diskStart);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(remaining);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
399	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(remaining  +  1);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(remaining  +  1);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  buffer.append(diskStart).append(remaining  +  1);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(remaining);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
400	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  offset  +=  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	129	1	add
401	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  offset  +=  DWORD;  offset  +=  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  offset  +=  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	129	1	add
402	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	129	1	add
403	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	129	1	add
404	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	129	1	add
405	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	129	1	add
406	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	129	1	add
407	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	129	1	add
408	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  [CE]  illegal  start  of  expression  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	129	None	add
409	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	129	1	add
410	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	129	1	add
411	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong  [CE]  '('  or  '['  expected  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong	  	non-compiled	[CE]  '('  or  '['  expected	129	None	add
412	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  [CE]  ')'  expected  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  	  	non-compiled	[CE]  ')'  expected	129	None	add
413	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;	  offset    +=    2;    offset    +=    2;RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	174	None	replace
414	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;	  offset    +=    2;    offset    +=    2;RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	174	None	replace
415	[BUG]  [BUGGY]  ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [CE]  cannot  find  symbol  ReclativeHeaderOffset  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	ReclativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;	  offset    +=    2;    offset    +=    2;RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  cannot  find  symbol  ReclativeHeaderOffset	174	None	replace
416	[BUG]  [BUGGY]  ComparableHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [CE]  cannot  find  symbol  ComparableHeaderOffset  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ComparableHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	ComparableHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;	  offset    +=    2;    offset    +=    2;RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  cannot  find  symbol  ComparableHeaderOffset	174	None	replace
417	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;	  offset    +=    2;    offset    +=    2;RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	174	1	replace
418	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;	  offset    +=    2;    offset    +=    2;RelativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	174	1	replace
419	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	184	None	replace
420	[BUG]  [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	184	None	replace
421	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	184	None	replace
422	[BUG]  [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	184	None	replace
423	[BUG]  [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	184	None	replace
424	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	184	None	replace
425	[BUG]  [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	184	None	replace
426	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining    -=    DWORD;    remaining  -=  DWORD;	  	compilable	  [FE]  ZipException  	206	1	add
427	[BUG]  [BUGGY]  remaining  -=  DWORD;  remaining  -=  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    DWORD;    remaining  -=  DWORD;	  	compilable	  [FE]  ZipException  	206	1	add
428	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    DWORD;    while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
429	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    DWORD;    while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
430	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    DWORD;    while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
431	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    DWORD;    while(remaining  >  DWORD)  {  remaining  -=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
432	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    DWORD;    while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
433	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    DWORD;    while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
434	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    DWORD;    while(remaining  >  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
435	[BUG]  [BUGGY]  offset  +=  diskStart  -  DEFAULT_DECIMAL_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  DEFAULT_DECIMAL_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  DEFAULT_DECIMAL_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	140	None	replace
436	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  -  diskStart.length;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  -  diskStart.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZES_MSG  -  diskStart.length;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	140	None	replace
437	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  -  remaining;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  -  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZES_MSG  -  remaining;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	140	None	replace
438	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;	  offset    +=    LAST_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG	231	None	replace
439	[BUG]  [BUGGY]  offset  +=  DECIMAL_DECIMAL_MUST_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DECIMAL_DECIMAL_MUST_BOTH_SIZES_MSG  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DECIMAL_DECIMAL_MUST_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_DECIMAL_MUST_BOTH_SIZES_MSG;	  offset    +=    LAST_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_DECIMAL_MUST_BOTH_SIZES_MSG	231	None	replace
440	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	159	1	replace
441	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	159	1	replace
442	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	159	1	replace
443	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	159	1	replace
444	[BUG]  [BUGGY]  offset  -=  discStart.length;  [CE]  cannot  find  symbol  discStart  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  discStart.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  discStart.length;	  offset    -=    diskStart.length;    	non-compiled	[CE]  cannot  find  symbol  discStart	173	None	replace
445	[BUG]  [BUGGY]  offset  -=  diskStart.length  +  1;  [CE]  cannot  find  symbol  length  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  diskStart.length  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  diskStart.length  +  1;	  offset    -=    diskStart.length;    	non-compiled	[CE]  cannot  find  symbol  length	173	None	replace
446	[BUG]  [BUGGY]  offset  -=  diskStart.length  +  2;  [CE]  cannot  find  symbol  length  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  diskStart.length  +  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  diskStart.length  +  2;	  offset    -=    diskStart.length;    	non-compiled	[CE]  cannot  find  symbol  length	173	None	replace
447	[BUG]  [BUGGY]  offset  -=  remaining.length;  [CE]  int  cannot  be  dereferenced  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  remaining.length;	  offset    -=    diskStart.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	173	None	replace
448	[BUG]  [BUGGY]  offset  -=  diskStart,  remaining.length;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  diskStart,  remaining.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  diskStart,  remaining.length;	  offset    -=    diskStart.length;    	non-compiled	[CE]  ';'  expected	173	None	replace
449	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append('/');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
450	[BUG]  [BUGGY]  buffer.append(diskStart).append('/');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart).append('/');  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart).append('/');  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append('/');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
451	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append('/');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append('/');  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  buffer.append(remaining).append('/');  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append('/');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
452	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append('/');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
453	[BUG]  [BUGGY]  offset  -=  length;  buffer.append(diskStart).append('/');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  buffer.append(diskStart).append('/');  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  length;  buffer.append(diskStart).append('/');  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append('/');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
454	[BUG]  [BUGGY]  if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append('/');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
455	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    length    -    3;    offset  +=  length  -  3;	  	compilable	  [FE]  ZipException  	103	1	add
456	[BUG]  [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    3;    offset  +=  length  -  3;	  	compilable	  [FE]  ZipException  	103	1	add
457	[BUG]  [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  3;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    3;    offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  3;	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	103	None	add
458	[BUG]  [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  3;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  3;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    3;    offset  +=  length  -  3;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  3;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	add
459	[BUG]  [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    3;    offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	103	None	add
460	[BUG]  [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  4;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  4;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    3;    offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  4;	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	103	None	add
461	[BUG]  [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  3;  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  3;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    3;    offset  +=  length  -  3;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  3;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	add
462	[BUG]  [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  2;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  3;  offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    3;    offset  +=  length  -  3;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  2;	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	103	None	add
463	[BUG]  [BUGGY]  offset  -=  2  *  diskStart;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2  *  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  2  *  diskStart;	  offset    -=    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	43	None	replace
464	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  3;	  offset    -=    2;    	compilable	  [FE]  ZipException  	43	1	replace
465	[BUG]  [BUGGY]  offset  -=  3;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  3;	  offset    -=    2;    	compilable	  [FE]  ZipException  	43	1	replace
466	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskSize    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	203	1	replace
467	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskSize    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	203	1	replace
468	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  diskSize  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskSize    =    new    ZipEightByteInteger(    buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  diskSize	203	None	replace
469	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  diskSize  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskSize    =    new    ZipEightByteInteger(    buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  diskSize	203	None	replace
470	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  DWORD;  offset  +=  DWORD;	  offset    +=    DWORD;    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	106	1	replace
471	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  +=  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  DWORD;  offset  +=  DWORD;	  offset    +=    DWORD;    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	106	1	replace
472	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECEMBER;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECEMBER;	  offset    +=    DWORD;    offset    +=    DWORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	106	None	replace
473	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	131	None	replace
474	[BUG]  [BUGGY]  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	131	None	replace
475	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	131	1	replace
476	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	131	1	replace
477	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	131	1	replace
478	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	131	1	replace
479	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	131	1	replace
480	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	131	1	replace
481	[BUG]  [BUGGY]  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	131	None	replace
482	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskEnd    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	112	None	replace
483	[BUG]  [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskEnd    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	112	None	replace
484	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskEnd    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	112	None	replace
485	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskEnd    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	112	None	replace
486	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskEnd    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	112	None	replace
487	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset  [CE]  ';'  expected  [FE]                              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskEnd    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	112	None	replace
488	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append(length    -    2);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
489	[BUG]  [BUGGY]  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(length    -    2);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
490	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append(length    -    2);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
491	[BUG]  [BUGGY]  if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append(length    -    2);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
492	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append(length    -    2);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
493	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
494	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
495	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
496	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
497	[BUG]  [BUGGY]  offset  +=  WORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
498	[BUG]  [BUGGY]  offset  +=  length  -  2  *  diskStart;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2  *  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  -  2  *  diskStart;	  offset    +=    length    -    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	102	None	replace
499	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  /  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length  /  2;	  offset    +=    length    -    2;    	compilable	  [FE]  ZipException  	102	1	replace
500	[BUG]  [BUGGY]  offset  +=  length  /  2;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  /  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  /  2;	  offset    +=    length    -    2;    	compilable	  [FE]  ZipException  	102	1	replace
501	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length  -  2  *  DWORD;	  offset    +=    length    -    2;    	compilable	  [FE]  ZipException  	102	1	replace
502	[BUG]  [BUGGY]  offset  +=  length  -  2  *  DWORD;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  -  2  *  DWORD;	  offset    +=    length    -    2;    	compilable	  [FE]  ZipException  	102	1	replace
503	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  *  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length  *  2;	  offset    +=    length    -    2;    	compilable	  [FE]  ZipException  	102	1	replace
504	[BUG]  [BUGGY]  offset  +=  length  *  2;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  *  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  *  2;	  offset    +=    length    -    2;    	compilable	  [FE]  ZipException  	102	1	replace
505	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length  *  DWORD;	  offset    +=    length    -    2;    	compilable	  [FE]  ZipException  	102	1	replace
506	[BUG]  [BUGGY]  offset  +=  length  *  DWORD;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  *  DWORD;	  offset    +=    length    -    2;    	compilable	  [FE]  ZipException  	102	1	replace
507	[BUG]  [BUGGY]  remaining  -=  DECIMAL_SIZES;  [CE]  cannot  find  symbol  DECIMAL_SIZES  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DECIMAL_SIZES;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DECIMAL_SIZES;	  remaining    -=    DEFAULT_DECIMAL_SIZES;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_SIZES	224	None	replace
508	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
509	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	152	1	replace
510	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	152	1	replace
511	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
512	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	152	None	replace
513	[BUG]  [BUGGY]  offset  -=  READER_ID;  [CE]  cannot  find  symbol  READER_ID  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  READER_ID;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  READER_ID;	  offset    -=    discStart;    	non-compiled	[CE]  cannot  find  symbol  READER_ID	44	None	replace
514	[BUG]  [BUGGY]  offset  -=  width;  [CE]  cannot  find  symbol  width  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  width;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  width;	  offset    -=    discStart;    	non-compiled	[CE]  cannot  find  symbol  width	44	None	replace
515	[BUG]  [BUGGY]  if(remaining  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	92	None	replace
516	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	92	None	replace
517	[BUG]  [BUGGY]  if(remaining  ==  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	92	None	replace
518	[BUG]  [BUGGY]  if(remaining  ==  null)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  null)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  null)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	92	None	replace
519	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	92	None	replace
520	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	92	None	replace
521	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  illegal  start  of  expression  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
522	[BUG]  [BUGGY]  remaining  -=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	222	None	replace
523	[BUG]  [BUGGY]  remaining  -=  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	222	None	replace
524	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  1;	  remaining    -=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	222	None	replace
525	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  length;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  length;	  remaining    -=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	222	None	replace
526	[BUG]  [BUGGY]  diskSize  =  new  ZipLong(buffer,  offset);  [CE]  cannot  find  symbol  diskSize  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  diskSize  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	diskSize  =  new  ZipLong(buffer,  offset);	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	220	None	replace
527	[BUG]  [BUGGY]  if(remaining!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	220	None	replace
528	[BUG]  [BUGGY]  if(remaining!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	220	None	replace
529	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	diskStart  =  new  ZipLong(buffer,  offset);	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	220	1	replace
530	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	diskStart  =  new  ZipLong(buffer,  offset);	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	220	1	replace
531	[BUG]  [BUGGY]  while(remaining!=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining!=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining!=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  illegal  start  of  expression	220	None	replace
532	[BUG]  [BUGGY]  while(remaining!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  illegal  start  of  expression	220	None	replace
533	[BUG]  [BUGGY]  nisipSize  =  new  ZipLong(buffer,  offset);  [CE]  cannot  find  symbol  nisipSize  [FE]                                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  nisipSize  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	nisipSize  =  new  ZipLong(buffer,  offset);	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol  nisipSize	220	None	replace
534	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	141	1	add
535	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	141	1	add
536	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	141	1	add
537	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	141	1	add
538	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [CE]  ';'  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD	  	non-compiled	[CE]  ';'  expected	141	None	add
539	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  WORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	141	None	add
540	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  WORD;  }  [CE]  cannot  find  symbol  remainder  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  WORD;  }	  	non-compiled	[CE]  cannot  find  symbol  remainder	141	None	add
541	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  discStart  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	141	None	add
542	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  10;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  10;	  offset    -=    1;    	compilable	  [FE]  ZipException  	46	1	replace
543	[BUG]  [BUGGY]  offset  -=  10;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  10;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  10;	  offset    -=    1;    	compilable	  [FE]  ZipException  	46	1	replace
544	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  offset  +=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    length    -    1;    offset  +=  length  -  1;	  	compilable	  [FE]  ZipException  	99	1	add
545	[BUG]  [BUGGY]  offset  +=  length  -  1;  offset  +=  length  -  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  offset  +=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    offset  +=  length  -  1;	  	compilable	  [FE]  ZipException  	99	1	add
546	[BUG]  [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart).append(length  -  1);  offset  +=  length  -  1;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart).append(length  -  1);  offset  +=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    buffer.append(diskStart).append(length  -  1);  offset  +=  length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
547	[BUG]  [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart);  offset  +=  length  -  1;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart);  offset  +=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    buffer.append(diskStart);  offset  +=  length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
548	[BUG]  [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart,  length  -  1);  offset  +=  length  -  1;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart,  length  -  1);  offset  +=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    buffer.append(diskStart,  length  -  1);  offset  +=  length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
549	[BUG]  [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart).append('  ');  offset  +=  length  -  1;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart).append('  ');  offset  +=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    buffer.append(diskStart).append('  ');  offset  +=  length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
550	[BUG]  [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart).append(length  -  1);  remaining  -=  length  -  1;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart).append(length  -  1);  remaining  -=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    buffer.append(diskStart).append(length  -  1);  remaining  -=  length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
551	[BUG]  [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart).append(length  -  1);  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart).append(length  -  1);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    buffer.append(diskStart).append(length  -  1);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
552	[BUG]  [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart,  remaining);  offset  +=  length  -  1;  [CE]  cannot  find  symbol  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  buffer.append(diskStart,  remaining);  offset  +=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    buffer.append(diskStart,  remaining);  offset  +=  length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
553	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  incompatible  types	94	None	replace
554	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	94	None	replace
555	[BUG]  [BUGGY]  while(remaining  ==  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  ==  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  ==  0)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  incompatible  types	94	None	replace
556	[BUG]  [BUGGY]  while(remaining  ==  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  ==  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  ==  0)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	94	None	replace
557	[BUG]  [BUGGY]  if(remaining  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	94	None	replace
558	[BUG]  [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  incompatible  types  [FE]                              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  incompatible  types	94	None	replace
559	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    length    -    2;    offset  +=  length  -  2;	  	compilable	  [FE]  ZipException  	101	1	add
560	[BUG]  [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    2;    offset  +=  length  -  2;	  	compilable	  [FE]  ZipException  	101	1	add
561	[BUG]  [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    2;    offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  2;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	add
562	[BUG]  [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    2;    offset  +=  length  -  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  -  2;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	add
563	[BUG]  [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  this.diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  2;  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  this.diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    2;    offset  +=  length  -  2;  this.diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  length  -  2;	  	non-compiled	[CE]  incompatible  types	101	None	add
564	[BUG]  [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    2;    offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	add
565	[BUG]  [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    2;    offset  +=  length  -  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	add
566	[BUG]  [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    2;    offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  	non-compiled	[CE]  ';'  expected	101	None	add
567	[BUG]  [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  2;  offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    2;    offset  +=  length  -  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	add
568	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(discStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	149	1	replace
569	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(discStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	149	1	replace
570	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(discStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	149	1	replace
571	[BUG]  [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(discStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	compilable	  [FE]  ZipException  	149	1	replace
572	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD	  if(discStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  ';'  expected	149	None	replace
573	[BUG]  [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  'else'  without  'if'  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  if(discStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
574	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.length;  [CE]  cannot  find  symbol  length  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.length;	  offset    +=    DEFAULT_SIZE;    	non-compiled	[CE]  cannot  find  symbol  length	98	None	replace
575	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
576	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
577	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
578	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
579	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
580	[BUG]  [BUGGY]  if(remaining  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
581	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  <  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
582	[BUG]  [BUGGY]  if(remaining  <  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
583	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0.0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
584	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
585	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  =  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  =  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	234	None	replace
586	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
587	[BUG]  [BUGGY]  if(remaining!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	234	1	replace
588	[BUG]  [BUGGY]  offset  +=  DECIMAL_DECIMAL_FILE_SIZE;  [CE]  cannot  find  symbol  DECIMAL_DECIMAL_FILE_SIZE  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DECIMAL_DECIMAL_FILE_SIZE;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_DECIMAL_FILE_SIZE;	  offset    +=    DEFAULT_DECIMAL_FILE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_DECIMAL_FILE_SIZE	208	None	replace
589	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_FILE_SIZE  -  1;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_FILE_SIZE  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_FILE_SIZE  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_FILE_SIZE  -  1;	  offset    +=    DEFAULT_DECIMAL_FILE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_FILE_SIZE	208	None	replace
590	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    offset    -=    WORD;    	non-compiled	[CE]  ')'  expected	192	None	replace
591	[BUG]  [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [CE]  ')'  expected  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    offset    -=    WORD;    	non-compiled	[CE]  ')'  expected	192	None	replace
592	[BUG]  [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [CE]  ')'  expected  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    offset    -=    WORD;    	non-compiled	[CE]  ')'  expected	192	None	replace
593	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [CE]  ')'  expected  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    offset    -=    WORD;    	non-compiled	[CE]  ')'  expected	192	None	replace
594	[BUG]  [BUGGY]  if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [CE]  ')'  expected  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    offset    -=    WORD;    	non-compiled	[CE]  ')'  expected	192	None	replace
595	[BUG]  [BUGGY]  if(diskStart!=  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [CE]  ')'  expected  [FE]                              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    offset    -=    WORD;    	non-compiled	[CE]  ')'  expected	192	None	replace
596	[BUG]  [BUGGY]  if(discStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [CE]  ')'  expected  [FE]                                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(discStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(discStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    offset    -=    WORD;    	non-compiled	[CE]  ')'  expected	192	None	replace
597	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
598	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [CE]  ';'  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	142	None	replace
599	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	142	None	replace
600	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	142	1	replace
601	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	142	1	replace
602	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  [CE]  ';'  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	142	None	replace
603	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;	  	compilable	  [FE]  ZipException  	2	1	add
604	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;	  	compilable	  [FE]  ZipException  	2	1	add
605	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
606	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
607	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
608	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	2	add
609	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	2	add
610	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	2	1	add
611	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	2	1	add
612	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	2	1	add
613	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	2	1	add
614	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	2	1	add
615	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	2	1	add
616	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	35	None	replace
617	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  WORD;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	35	1	replace
618	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	35	1	replace
619	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	35	None	replace
620	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	35	None	replace
621	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	compilable	  [FE]  ZipException  	32	1	replace
622	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	compilable	  [FE]  ZipException  	32	1	replace
623	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
624	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  [CE]  ')'  expected  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	32	None	replace
625	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	229	1	add
626	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	229	1	add
627	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	229	1	add
628	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	229	1	add
629	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	229	1	add
630	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	229	1	add
631	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	229	1	add
632	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	229	1	add
633	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  incompatible  types	229	None	add
634	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	229	1	add
635	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	229	1	add
636	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  [CE]  illegal  start  of  expression  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {	  	non-compiled	[CE]  illegal  start  of  expression	229	None	add
637	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	229	1	add
638	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	229	1	add
639	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
640	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
641	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
642	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
643	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	158	None	add
644	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
645	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
646	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
647	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
648	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
649	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
650	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
651	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	158	1	add
652	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    remaining    -=    WORD;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
653	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    remaining    -=    WORD;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
654	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    remaining    -=    WORD;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
655	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	95	None	replace
656	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	95	None	replace
657	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	95	None	replace
658	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  remaining  -=  WORD  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  remaining  -=  WORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  remaining  -=  WORD	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	95	None	replace
659	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  offset  +=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    1;    offset  +=  1;	  	compilable	  [FE]  ZipException  	4	1	add
660	[BUG]  [BUGGY]  offset  +=  1;  offset  +=  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  offset  +=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    1;    offset  +=  1;	  	compilable	  [FE]  ZipException  	4	1	add
661	[BUG]  [BUGGY]  offset  +=  1;  buffer.append(diskStart).append(length  -  1);  offset  +=  1;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  buffer.append(diskStart).append(length  -  1);  offset  +=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    1;    buffer.append(diskStart).append(length  -  1);  offset  +=  1;	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
662	[BUG]  [BUGGY]  offset  +=  1;  buffer.append(diskStart);  offset  +=  1;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  buffer.append(diskStart);  offset  +=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    1;    buffer.append(diskStart);  offset  +=  1;	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
663	[BUG]  [BUGGY]  offset  +=  1;  buffer.append(diskStart).append('  ');  offset  +=  1;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  buffer.append(diskStart).append('  ');  offset  +=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    1;    buffer.append(diskStart).append('  ');  offset  +=  1;	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
664	[BUG]  [BUGGY]  offset  +=  1;  buffer.append(diskStart).append(length  +  1);  offset  +=  1;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  buffer.append(diskStart).append(length  +  1);  offset  +=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    1;    buffer.append(diskStart).append(length  +  1);  offset  +=  1;	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
665	[BUG]  [BUGGY]  offset  +=  1;  buffer.append(diskStart).append(length  -  2);  offset  +=  1;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  buffer.append(diskStart).append(length  -  2);  offset  +=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    1;    buffer.append(diskStart).append(length  -  2);  offset  +=  1;	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
666	[BUG]  [BUGGY]  offset  +=  1;  buffer  =  new  ZipLong(remaining,  offset);  offset  +=  1;  [CE]  no  suitable  constructor  found  for  ZipLong(int,int)  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  buffer  =  new  ZipLong(remaining,  offset);  offset  +=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    1;    buffer  =  new  ZipLong(remaining,  offset);  offset  +=  1;	  	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(int,int)	4	None	add
667	[BUG]  [BUGGY]  offset  +=  1;  buffer  =  new  ZipLong(buffer,  offset);  offset  +=  1;  [CE]  incompatible  types  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  buffer  =  new  ZipLong(buffer,  offset);  offset  +=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    1;    buffer  =  new  ZipLong(buffer,  offset);  offset  +=  1;	  	non-compiled	[CE]  incompatible  types	4	None	add
668	[BUG]  [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  discStart  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    0)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  discStart	256	None	replace
669	[BUG]  [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  remaining    -=    WORD;    while(remaining    >    0)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
670	[BUG]  [BUGGY]  while(remaining  >  1)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  1)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  1)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  remaining    -=    WORD;    while(remaining    >    0)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
671	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  diskStart;  [CE]  inconvertible  types  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  diskStart;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    +    diskStart;    	non-compiled	[CE]  inconvertible  types	139	None	replace
672	[BUG]  [BUGGY]  offset  +=  DECIMAL_SIZES_MSG  +  diskStart;  [CE]  cannot  find  symbol  DECIMAL_SIZES_MSG  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DECIMAL_SIZES_MSG  +  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_SIZES_MSG  +  diskStart;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    +    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_SIZES_MSG	139	None	replace
673	[BUG]  [BUGGY]  offset  +=  length  +  diskStart;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  +  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  +  diskStart;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    +    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	139	None	replace
674	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	182	1	replace
675	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	182	1	replace
676	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  1;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	182	1	replace
677	[BUG]  [BUGGY]  offset  +=  1;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  1;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	182	1	replace
678	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	182	1	replace
679	[BUG]  [BUGGY]  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	182	1	replace
680	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
681	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
682	[BUG]  [BUGGY]  offset  +=  WORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
683	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    offset  +=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	28	1	add
684	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  2;  offset  +=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    offset  +=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	28	1	add
685	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  offset  -=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    offset  -=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	28	1	add
686	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  offset  -=  2;  offset  +=  2;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  offset  -=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    offset  -=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	28	1	add
687	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  2;  offset  +=  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    offset  +=  2;  offset  +=  3;	  	compilable	  [FE]  ZipException  	28	1	add
688	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  2;  offset  +=  3;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  2;  offset  +=  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    offset  +=  2;  offset  +=  3;	  	compilable	  [FE]  ZipException  	28	1	add
689	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  2;  offset  +=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    offset  +=  2;  offset  +=  1;	  	compilable	  [FE]  ZipException  	28	1	add
690	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  2;  offset  +=  1;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  2;  offset  +=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    offset  +=  2;  offset  +=  1;	  	compilable	  [FE]  ZipException  	28	1	add
691	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  3;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    offset  +=  3;  offset  +=  2;	  	compilable	  [FE]  ZipException  	28	1	add
692	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  3;  offset  +=  2;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  3;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    offset  +=  3;  offset  +=  2;	  	compilable	  [FE]  ZipException  	28	1	add
693	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  2;  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  offset  +=  2;  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    offset  +=  2;  offset  +=  2;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	add
694	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  remaining  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  remaining  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	164	1	replace
695	[BUG]  [BUGGY]  offset  +=  length;  remaining  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  remaining  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  remaining  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	164	1	replace
696	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  [CE]  ';'  expected  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
697	[BUG]  [BUGGY]  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	107	None	replace
698	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  offset  +=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    offset  +=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	177	1	add
699	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  offset  +=  2;  offset  +=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  offset  +=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    offset  +=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	177	1	add
700	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	177	1	add
701	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	177	1	add
702	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
703	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	177	1	add
704	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	177	1	add
705	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)	  	compilable	  [FE]  ZipException  	177	1	add
706	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)	  	compilable	  [FE]  ZipException  	177	1	add
707	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	177	1	add
708	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	177	1	add
709	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	177	1	add
710	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	177	1	add
711	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  [CE]  illegal  start  of  expression  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  DWORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
712	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	193	1	add
713	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	193	1	add
714	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	193	1	add
715	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	193	1	add
716	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	193	None	add
717	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	193	None	add
718	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  ';'  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  ';'  expected	193	None	add
719	[BUG]  [BUGGY]  offset  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  offset    -=    WORD;    offset    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  incompatible  types	25	None	replace
720	[BUG]  [BUGGY]  offset  =  new  ZipLong(buffer,  offset  +  remaining);  remaining  -=  WORD;  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  =  new  ZipLong(buffer,  offset  +  remaining);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  =  new  ZipLong(buffer,  offset  +  remaining);  remaining  -=  WORD;	  offset    -=    WORD;    offset    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  incompatible  types	25	None	replace
721	[BUG]  [BUGGY]  offset  =  new  ZipLong(buffer,  offset  +  1);  remaining  -=  WORD;  [CE]  incompatible  types  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  =  new  ZipLong(buffer,  offset  +  1);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  =  new  ZipLong(buffer,  offset  +  1);  remaining  -=  WORD;	  offset    -=    WORD;    offset    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  incompatible  types	25	None	replace
722	[BUG]  [BUGGY]  offset  =  new  ZipLong(buffer,  offset  +  2);  remaining  -=  WORD;  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  =  new  ZipLong(buffer,  offset  +  2);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  =  new  ZipLong(buffer,  offset  +  2);  remaining  -=  WORD;	  offset    -=    WORD;    offset    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  incompatible  types	25	None	replace
723	[BUG]  [BUGGY]  offset  =  new  ZipLong(buffer,  offset  +  diskStart);  remaining  -=  WORD;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  =  new  ZipLong(buffer,  offset  +  diskStart);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  =  new  ZipLong(buffer,  offset  +  diskStart);  remaining  -=  WORD;	  offset    -=    WORD;    offset    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	25	None	replace
724	[BUG]  [BUGGY]  offset  =  new  ZipLong(buffer,  offset  +  length);  remaining  -=  WORD;  [CE]  incompatible  types  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  =  new  ZipLong(buffer,  offset  +  length);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  =  new  ZipLong(buffer,  offset  +  length);  remaining  -=  WORD;	  offset    -=    WORD;    offset    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  incompatible  types	25	None	replace
725	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  1;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
726	[BUG]  [BUGGY]  offset  +=  1;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  1;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  1;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
727	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
728	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
729	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  3;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  3;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
730	[BUG]  [BUGGY]  offset  +=  3;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  3;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  3;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
731	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
732	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
733	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	105	1	add
734	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  offset  +=  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	105	1	add
735	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  offset  +=  DWORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	105	1	add
736	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  offset  +=  DWORD;  remaining  -=  WORD;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  offset  +=  DWORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	105	1	add
737	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  -=  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    offset  -=  DWORD;  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	105	1	add
738	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  -=  DWORD;  offset  +=  DWORD;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  -=  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    offset  -=  DWORD;  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	105	1	add
739	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  =  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    offset  =  DWORD;  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	105	1	add
740	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  =  DWORD;  offset  +=  DWORD;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  =  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    offset  =  DWORD;  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	105	1	add
741	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  offset  =  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    offset  +=  DWORD;  offset  =  DWORD;	  	compilable	  [FE]  ZipException  	105	1	add
742	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  offset  =  DWORD;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  offset  +=  DWORD;  offset  =  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    offset  +=  DWORD;  offset  =  DWORD;	  	compilable	  [FE]  ZipException  	105	1	add
743	[BUG]  [BUGGY]  offset  +=  length  +  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  +  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  +  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	73	None	replace
744	[BUG]  [BUGGY]  offset  +=  length  +  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  +  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  +  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG	73	None	replace
745	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  length;  [CE]  inconvertible  types  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  length;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    +    length;    	non-compiled	[CE]  inconvertible  types	73	None	replace
746	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	13	1	replace
747	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	13	1	replace
748	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	13	1	replace
749	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	13	1	replace
750	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	13	1	replace
751	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	13	1	replace
752	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	13	1	replace
753	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	13	1	replace
754	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  length  +  1;	  offset    -=    length;    	compilable	  [FE]  ZipException  	41	1	replace
755	[BUG]  [BUGGY]  offset  -=  length  +  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  length  +  1;	  offset    -=    length;    	compilable	  [FE]  ZipException  	41	1	replace
756	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  length  -  1;	  offset    -=    length;    	compilable	  [FE]  ZipException  	41	1	replace
757	[BUG]  [BUGGY]  offset  -=  length  -  1;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  length  -  1;	  offset    -=    length;    	compilable	  [FE]  ZipException  	41	1	replace
758	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
759	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
760	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
761	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
762	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  =  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  =  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
763	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
764	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
765	[BUG]  [BUGGY]  DiskStart  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  DiskStart  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	DiskStart  diskStart  =  new  ZipLong(buffer,  offset);	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol	215	None	replace
766	[BUG]  [BUGGY]  discardStart  =  new  ZipLong(buffer,  offset);  [CE]  cannot  find  symbol  discardStart  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  discardStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	discardStart  =  new  ZipLong(buffer,  offset);	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol  discardStart	215	None	replace
767	[BUG]  [BUGGY]  DiscardLong  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  DiscardLong  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	DiscardLong  diskStart  =  new  ZipLong(buffer,  offset);	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol	215	None	replace
768	[BUG]  [BUGGY]  iskStart  =  new  ZipLong(buffer,  offset);  [CE]  cannot  find  symbol  iskStart  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  iskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	iskStart  =  new  ZipLong(buffer,  offset);	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol  iskStart	215	None	replace
769	[BUG]  [BUGGY]  DispatcherDiskStart  =  new  ZipLong(buffer,  offset);  [CE]  cannot  find  symbol  DispatcherDiskStart  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  DispatcherDiskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	DispatcherDiskStart  =  new  ZipLong(buffer,  offset);	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol  DispatcherDiskStart	215	None	replace
770	[BUG]  [BUGGY]  DiscardSize  =  new  ZipLong(buffer,  offset);  [CE]  cannot  find  symbol  DiscardSize  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  DiscardSize  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	DiscardSize  =  new  ZipLong(buffer,  offset);	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol  DiscardSize	215	None	replace
771	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  offset  +=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    offset  +=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	179	1	add
772	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  offset  +=  2;  offset  +=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  offset  +=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    offset  +=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	179	1	add
773	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
774	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
775	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
776	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
777	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
778	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
779	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
780	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
781	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	179	None	add
782	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
783	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
784	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
785	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
786	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  +  length;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZE  +  length;	  offset    +=    DEFAULT_DECIMAL_SIZE    +    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	138	None	replace
787	[BUG]  [BUGGY]  offset  +=  diskStart  +  DEFAULT_DECIMAL_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  +  DEFAULT_DECIMAL_SIZE;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  +  DEFAULT_DECIMAL_SIZE;	  offset    +=    DEFAULT_DECIMAL_SIZE    +    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	138	None	replace
788	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  +  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  +  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZE  +  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_SIZE    +    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	138	None	replace
789	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  +  remaining;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  +  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZE  +  remaining;	  offset    +=    DEFAULT_DECIMAL_SIZE    +    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	138	None	replace
790	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	15	1	replace
791	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	15	1	replace
792	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
793	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  remaining  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining    -=    length;    remaining  -=  length;	  	compilable	  [FE]  ZipException  	51	1	add
794	[BUG]  [BUGGY]  remaining  -=  length;  remaining  -=  length;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  remaining  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    length;    remaining  -=  length;	  	compilable	  [FE]  ZipException  	51	1	add
795	[BUG]  [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithLocalFileData(buffer,  offset);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithLocalFileData(buffer,  offset);  remaining  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    length;    int  length  =  fileEndsWithLocalFileData(buffer,  offset);  remaining  -=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	51	None	add
796	[BUG]  [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithFieldSize(buffer,  offset);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithFieldSize(buffer,  offset);  remaining  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    length;    int  length  =  fileEndsWithFieldSize(buffer,  offset);  remaining  -=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	51	None	add
797	[BUG]  [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithFieldSize(remaining,  buffer,  offset);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithFieldSize(remaining,  buffer,  offset);  remaining  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    length;    int  length  =  fileEndsWithFieldSize(remaining,  buffer,  offset);  remaining  -=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	51	None	add
798	[BUG]  [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithFiles(remaining,  buffer,  offset);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithFiles(remaining,  buffer,  offset);  remaining  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    length;    int  length  =  fileEndsWithFiles(remaining,  buffer,  offset);  remaining  -=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	51	None	add
799	[BUG]  [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithLocalFileData.length;  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithLocalFileData.length;  remaining  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    length;    int  length  =  fileEndsWithLocalFileData.length;  remaining  -=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	51	None	add
800	[BUG]  [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithFieldSize(remaining);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithFieldSize(remaining);  remaining  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    length;    int  length  =  fileEndsWithFieldSize(remaining);  remaining  -=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	51	None	add
801	[BUG]  [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithLocalFileData(buffer,  offset);  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  length;  int  length  =  fileEndsWithLocalFileData(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    length;    int  length  =  fileEndsWithLocalFileData(buffer,  offset);	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	51	None	add
802	[BUG]  [BUGGY]  DiscardStart  =  new  ZipLong(buffer,  offset);  [CE]  cannot  find  symbol  DiscardStart  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  DiscardStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	DiscardStart  =  new  ZipLong(buffer,  offset);	          if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  cannot  find  symbol  DiscardStart	218	None	replace
803	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	155	1	replace
804	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	155	1	replace
805	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	155	1	replace
806	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	compilable	  [FE]  ZipException  	155	1	replace
807	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	replace
808	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  remaining;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    }    	non-compiled	[CE]  incompatible  types	155	None	replace
809	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;	  	compilable	  [FE]  ZipException  	156	1	add
810	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;	  	compilable	  [FE]  ZipException  	156	1	add
811	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	156	1	add
812	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	156	1	add
813	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
814	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)	  	compilable	  [FE]  ZipException  	156	1	add
815	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)	  	compilable	  [FE]  ZipException  	156	1	add
816	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	156	1	add
817	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	156	1	add
818	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }  [CE]  incompatible  types  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }	  	non-compiled	[CE]  incompatible  types	156	None	add
819	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD  [CE]  ')'  expected  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD	  	non-compiled	[CE]  ')'  expected	156	None	add
820	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
821	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
822	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  ')'  expected	36	None	replace
823	[BUG]  [BUGGY]  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [CE]  class,  interface,  or  enum  expected  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
824	[BUG]  [BUGGY]  offset  +=  WORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
825	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
826	[BUG]  [BUGGY]  offset  +=  WORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
827	[BUG]  [BUGGY]  offset  +=  discStart  -  remaining;  [CE]  cannot  find  symbol  discStart  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  discStart  -  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  discStart  -  remaining;	  offset    +=    diskStart    -    length;    	non-compiled	[CE]  cannot  find  symbol  discStart	135	None	replace
828	[BUG]  [BUGGY]  offset  +=  diskStart.length  -  length;  [CE]  cannot  find  symbol  length  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart.length  -  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart.length  -  length;	  offset    +=    diskStart    -    length;    	non-compiled	[CE]  cannot  find  symbol  length	135	None	replace
829	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  buffer.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length  -  buffer.length;	  offset    +=    diskStart    -    length;    	compilable	  [FE]  ZipException  	135	1	replace
830	[BUG]  [BUGGY]  offset  +=  length  -  buffer.length;  [FE]  ZipException  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  buffer.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  -  buffer.length;	  offset    +=    diskStart    -    length;    	compilable	  [FE]  ZipException  	135	1	replace
831	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
832	[BUG]  [BUGGY]  if(remaining  ==  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
833	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
834	[BUG]  [BUGGY]  if(remaining  ==  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
835	[BUG]  [BUGGY]  while(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
836	[BUG]  [BUGGY]  if(remaining  >=  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
837	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	213	1	replace
838	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	213	1	replace
839	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  1);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	211	1	replace
840	[BUG]  [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  1);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	211	1	replace
841	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  length);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	211	1	replace
842	[BUG]  [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  length);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	211	1	replace
843	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  2);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	211	1	replace
844	[BUG]  [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  2);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	211	1	replace
845	[BUG]  [BUGGY]  ZipLong  diskStart  =  new  ZipLong(remaining,  buffer,  offset);  [CE]  no  suitable  constructor  found  for  ZipLong(int,byte[],int)  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(remaining,  buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	ZipLong  diskStart  =  new  ZipLong(remaining,  buffer,  offset);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(int,byte[],int)	211	None	replace
846	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	211	1	replace
847	[BUG]  [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	211	1	replace
848	[BUG]  [BUGGY]  ZipLong  diskStart  =  new  ZipLong(remaining,  offset);  [CE]  no  suitable  constructor  found  for  ZipLong(int,int)  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(remaining,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	ZipLong  diskStart  =  new  ZipLong(remaining,  offset);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(int,int)	211	None	replace
849	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  4;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length  -  4;	  offset    +=    length    -    3;    	compilable	  [FE]  ZipException  	104	1	replace
850	[BUG]  [BUGGY]  offset  +=  length  -  4;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  4;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  -  4;	  offset    +=    length    -    3;    	compilable	  [FE]  ZipException  	104	1	replace
851	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  /  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length  /  3;	  offset    +=    length    -    3;    	compilable	  [FE]  ZipException  	104	1	replace
852	[BUG]  [BUGGY]  offset  +=  length  /  3;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  /  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  /  3;	  offset    +=    length    -    3;    	compilable	  [FE]  ZipException  	104	1	replace
853	[BUG]  [BUGGY]  offset  +=  length  -  3  *  diskStart;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  3  *  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  -  3  *  diskStart;	  offset    +=    length    -    3;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	104	None	replace
854	[BUG]  [BUGGY]  offset  +=  WORD,  remaining;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD,  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD,  remaining;	  offset    +=    diskStart,    remaining;    	non-compiled	[CE]  ';'  expected	136	None	replace
855	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining;	  offset    +=    diskStart,    remaining;    	non-compiled	[CE]  ';'  expected	136	None	replace
856	[BUG]  [BUGGY]  offset  +=  diskStart,  remaining  -  1;  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart,  remaining  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart,  remaining  -  1;	  offset    +=    diskStart,    remaining;    	non-compiled	[CE]  ';'  expected	136	None	replace
857	[BUG]  [BUGGY]  offset  +=  discStart,  remaining  -  1;  [CE]  ';'  expected  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  discStart,  remaining  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  discStart,  remaining  -  1;	  offset    +=    diskStart,    remaining;    	non-compiled	[CE]  ';'  expected	136	None	replace
858	[BUG]  [BUGGY]  offset  +=  diskStart,  remaining  -  2;  [CE]  ';'  expected  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart,  remaining  -  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart,  remaining  -  2;	  offset    +=    diskStart,    remaining;    	non-compiled	[CE]  ';'  expected	136	None	replace
859	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    offset  +=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	118	1	add
860	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    offset  +=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	118	1	add
861	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
862	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	118	1	add
863	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	118	1	add
864	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
865	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  [CE]  illegal  start  of  expression  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
866	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
867	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	118	1	add
868	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	118	1	add
869	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)	  	compilable	  [FE]  ZipException  	118	1	add
870	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)	  	compilable	  [FE]  ZipException  	118	1	add
871	[BUG]  [BUGGY]  buffer.append(diskStart);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
872	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
873	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(remaining);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  buffer.append(remaining);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  buffer.append(remaining);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
874	[BUG]  [BUGGY]  offset  -=  length;  buffer.append(diskStart);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  buffer.append(diskStart);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  length;  buffer.append(diskStart);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
875	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart,  remaining);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  buffer.append(diskStart,  remaining);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  buffer.append(diskStart,  remaining);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
876	[BUG]  [BUGGY]  offset  -=  2;  buffer.append(diskStart);  offset  -=  2;  [CE]  cannot  find  symbol  [FE]                                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  buffer.append(diskStart);  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  2;  buffer.append(diskStart);  offset  -=  2;	  offset    -=    WORD;    buffer.append(diskStart);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
877	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	151	1	add
878	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	151	1	add
879	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	151	1	add
880	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	151	1	add
881	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	151	None	add
882	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	151	None	add
883	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	151	None	add
884	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	10	1	add
885	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	10	1	add
886	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  -=  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    offset  -=  remaining;  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	10	1	add
887	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  -=  remaining;  offset  +=  remaining;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  -=  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    offset  -=  remaining;  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	10	1	add
888	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  offset  +=  rest;  [CE]  cannot  find  symbol  rest  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  offset  +=  rest;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    offset  +=  remaining;  offset  +=  rest;	  	non-compiled	[CE]  cannot  find  symbol  rest	10	None	add
889	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  =  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    offset  =  remaining;  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	10	1	add
890	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  =  remaining;  offset  +=  remaining;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  =  remaining;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    offset  =  remaining;  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	10	1	add
891	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining.length;  [CE]  int  cannot  be  dereferenced  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining;  offset  +=  remaining.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    offset  +=  remaining;  offset  +=  remaining.length;	  	non-compiled	[CE]  int  cannot  be  dereferenced	10	None	add
892	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	237	1	add
893	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	237	1	add
894	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    remaining    -=    WORD;    offset  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  incompatible  types	237	None	add
895	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  remainder  -=  WORD;  [CE]  cannot  find  symbol  remainder  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  remainder  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  remainder  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  remainder	237	None	add
896	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  +=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    remaining    -=    WORD;    offset  +=  WORD;  offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	237	1	add
897	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  +=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  +=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    remaining    -=    WORD;    offset  +=  WORD;  offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	237	1	add
898	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  rest  -=  WORD;  [CE]  cannot  find  symbol  rest  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  rest  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  rest  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  rest	237	None	add
899	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  remaining  -=  WORD;  [CE]  incompatible  types  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    remaining    -=    WORD;    offset  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  incompatible  types	237	None	add
900	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  BORD;  remaining  -=  WORD;  [CE]  cannot  find  symbol  BORD  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  BORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  BORD;  remaining  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  BORD	237	None	add
901	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  GORD;  remaining  -=  WORD;  [CE]  cannot  find  symbol  GORD  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;  offset  -=  WORD;  offset  -=  GORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    remaining    -=    WORD;    offset  -=  WORD;  offset  -=  GORD;  remaining  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  GORD	237	None	add
902	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	161	1	replace
903	[BUG]  [BUGGY]  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	161	1	replace
904	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	161	1	replace
905	[BUG]  [BUGGY]  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	161	1	replace
906	[BUG]  [BUGGY]  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    	non-compiled	[CE]  ')'  expected	161	None	replace
907	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	161	1	replace
908	[BUG]  [BUGGY]  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=	  offset    +=    remaining;    offset    +=    remaining;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	161	1	replace
909	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECEMBER_SIZE  -  1;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECEMBER_SIZE  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECEMBER_SIZE  -  1;	  offset    +=    DEFAULT_DECEMBER_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	97	None	replace
910	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECEMBER_SIZE  +  length;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECEMBER_SIZE  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECEMBER_SIZE  +  length;	  offset    +=    DEFAULT_DECEMBER_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	97	None	replace
911	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    remaining    -=    WORD;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
912	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [CE]  class,  interface,  or  enum  expected  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    remaining    -=    WORD;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
913	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [CE]  class,  interface,  or  enum  expected  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    remaining    -=    WORD;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
914	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [CE]  class,  interface,  or  enum  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    remaining    -=    WORD;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
915	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [CE]  class,  interface,  or  enum  expected  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    remaining    -=    WORD;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
916	[BUG]  [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
917	[BUG]  [BUGGY]  while(remaining  <  =  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  <  =  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  <  =  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
918	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	78	1	replace
919	[BUG]  [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	78	1	replace
920	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	78	1	replace
921	[BUG]  [BUGGY]  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	78	1	replace
922	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  0;	  remaining    -=    WORD;    while(remaining    >    0.0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	258	1	replace
923	[BUG]  [BUGGY]  remaining  -=  0;  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  0;	  remaining    -=    WORD;    while(remaining    >    0.0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	258	1	replace
924	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  0.0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  0.0;	  remaining    -=    WORD;    while(remaining    >    0.0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	258	1	replace
925	[BUG]  [BUGGY]  remaining  -=  0.0;  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  0.0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  0.0;	  remaining    -=    WORD;    while(remaining    >    0.0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	258	1	replace
926	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  1;	  remaining    -=    WORD;    while(remaining    >    0.0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	258	1	replace
927	[BUG]  [BUGGY]  remaining  -=  1;  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  1;	  remaining    -=    WORD;    while(remaining    >    0.0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	258	1	replace
928	[BUG]  [BUGGY]  while(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
929	[BUG]  [BUGGY]  while(relativeHeaderOffset!=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(relativeHeaderOffset!=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(relativeHeaderOffset!=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
930	[BUG]  [BUGGY]  while(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
931	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    	non-compiled	[CE]  incompatible  types	148	None	replace
932	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	16	1	add
933	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	16	1	add
934	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	16	1	add
935	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	16	1	add
936	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	16	1	add
937	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	16	1	add
938	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >>  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >>  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >>  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  incompatible  types	16	None	add
939	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	16	1	add
940	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	16	1	add
941	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	16	None	add
942	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	16	1	add
943	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	16	1	add
944	[BUG]  [BUGGY]  remaining  -=  DECIMAL_FIRST;  [CE]  cannot  find  symbol  DECIMAL_FIRST  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DECIMAL_FIRST;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DECIMAL_FIRST;	  remaining    -=    DEFAULT_DECIMAL_FIRST;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_FIRST	195	None	replace
945	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_WORD  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_WORD;	  remaining    -=    DEFAULT_DECIMAL_FIRST;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_WORD	195	None	replace
946	[BUG]  [BUGGY]  buffer.append('n');  offset  +=  length;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append('n');  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append('n');  offset  +=  length;	  offset    +=    length;    buffer.append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
947	[BUG]  [BUGGY]  if(diskStart!=  null)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }	  offset    +=    length;    buffer.append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
948	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }	  offset    +=    length;    buffer.append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
949	[BUG]  [BUGGY]  if(diskStart!=  diskStart)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  diskStart)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  diskStart)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }	  offset    +=    length;    buffer.append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
950	[BUG]  [BUGGY]  if(diskStart  ==  diskStart)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  diskStart)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  diskStart)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }	  offset    +=    length;    buffer.append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
951	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  +=  length;  buffer.append('n');  offset  +=  length;  }	  offset    +=    length;    buffer.append('n');    offset    +=    length;    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	251	None	replace
952	[BUG]  [BUGGY]  if(remaining!=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining!=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }	          if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  cannot  find  symbol	219	None	replace
953	[BUG]  [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }	          if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  cannot  find  symbol	219	None	replace
954	[BUG]  [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }	          if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  cannot  find  symbol	219	None	replace
955	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [CE]  'else'  without  'if'  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }	          if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  'else'  without  'if'	219	None	replace
956	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
957	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [FE]  ZipException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
958	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
959	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [FE]  ZipException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
960	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
961	[BUG]  [BUGGY]  if(remaining  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [FE]  ZipException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
962	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  <  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
963	[BUG]  [BUGGY]  if(remaining  <  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [FE]  ZipException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
964	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0.0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
965	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [FE]  ZipException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
966	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  =  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  =  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  expression	240	None	replace
967	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
968	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [FE]  ZipException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	240	1	replace
969	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  0;	  offset    +=    0;    	compilable	  [FE]  ZipException  	7	1	replace
970	[BUG]  [BUGGY]  offset  -=  0;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  0;	  offset    +=    0;    	compilable	  [FE]  ZipException  	7	1	replace
971	[BUG]  [BUGGY]  while(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [CE]  'else'  without  'if'  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  'else'  without  'if'	216	None	replace
972	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining;  offset  -=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    remaining;    offset  -=  remaining;	  	compilable	  [FE]  ZipException  	38	1	add
973	[BUG]  [BUGGY]  offset  -=  remaining;  offset  -=  remaining;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining;  offset  -=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    remaining;    offset  -=  remaining;	  	compilable	  [FE]  ZipException  	38	1	add
974	[BUG]  [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(remaining);  offset  -=  remaining;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(remaining);  offset  -=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    remaining;    buffer.append(diskStart).append(remaining);  offset  -=  remaining;	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
975	[BUG]  [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(length  -  1);  offset  -=  remaining;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(length  -  1);  offset  -=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    remaining;    buffer.append(diskStart).append(length  -  1);  offset  -=  remaining;	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
976	[BUG]  [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(length  -  2);  offset  -=  remaining;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(length  -  2);  offset  -=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    remaining;    buffer.append(diskStart).append(length  -  2);  offset  -=  remaining;	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
977	[BUG]  [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(remaining  -  1);  offset  -=  remaining;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(remaining  -  1);  offset  -=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    remaining;    buffer.append(diskStart).append(remaining  -  1);  offset  -=  remaining;	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
978	[BUG]  [BUGGY]  offset  -=  remaining;  buffer.append(diskStart);  offset  -=  remaining;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining;  buffer.append(diskStart);  offset  -=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    remaining;    buffer.append(diskStart);  offset  -=  remaining;	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
979	[BUG]  [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(remaining);  remaining  -=  remaining;  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(remaining);  remaining  -=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    remaining;    buffer.append(diskStart).append(remaining);  remaining  -=  remaining;	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
980	[BUG]  [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(long);  offset  -=  remaining;  [CE]  '.class'  expected  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining;  buffer.append(diskStart).append(long);  offset  -=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    remaining;    buffer.append(diskStart).append(long);  offset  -=  remaining;	  	non-compiled	[CE]  '.class'  expected	38	None	add
981	[BUG]  [BUGGY]  offset  +=  diskStart  +  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  +  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  +  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    +    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	197	None	replace
982	[BUG]  [BUGGY]  offset  +=  diskStart  +  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  +  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  +  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    +    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG	197	None	replace
983	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  +  length;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  +  length;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    +    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG	197	None	replace
984	[BUG]  [BUGGY]  offset  -=  diskStart  +  length;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  diskStart  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  diskStart  +  length;	  offset    -=    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	37	None	replace
985	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	14	1	replace
986	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	14	1	replace
987	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  [CE]  ')'  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	non-compiled	[CE]  ')'  expected	14	None	replace
988	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	14	1	replace
989	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	14	1	replace
990	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
991	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
992	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [CE]  ')'  expected  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	186	None	replace
993	[BUG]  [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [CE]  ')'  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	186	None	replace
994	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [CE]  ')'  expected  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	186	None	replace
995	[BUG]  [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	186	None	replace
996	[BUG]  [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	186	None	replace
997	[BUG]  [BUGGY]  if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [CE]  ')'  expected  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	186	None	replace
998	[BUG]  [BUGGY]  if(discStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [CE]  ')'  expected  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(discStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(discStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	186	None	replace
999	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('W');  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('W');  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('W');  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append('W');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1000	[BUG]  [BUGGY]  buffer.append(diskStart).append('W');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart).append('W');  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart).append('W');  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append('W');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1001	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append('W');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append('W');  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  buffer.append(remaining).append('W');  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append('W');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1002	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append('W');  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append('W');  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append('W');  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append('W');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1003	[BUG]  [BUGGY]  if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append('W');  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append('W');  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append('W');  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append('W');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1004	[BUG]  [BUGGY]  offset  -=  length;  buffer.append(diskStart).append('W');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  buffer.append(diskStart).append('W');  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  length;  buffer.append(diskStart).append('W');  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append('W');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1005	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  'else'  without  'if'  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    System.arraycopy(diskStart,    0,    buffer,    offset    +    remaining,    length);    }    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
1006	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  System.  [CE]  'else'  without  'if'  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  System.  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  System.	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    System.arraycopy(diskStart,    0,    buffer,    offset    +    remaining,    length);    }    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
1007	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  'else'  without  'if'  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    System.arraycopy(diskStart,    0,    buffer,    offset    +    remaining,    length);    }    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
1008	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  'else'  without  'if'  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    System.arraycopy(diskStart,    0,    buffer,    offset    +    remaining,    length);    }    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
1009	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  System.  [CE]  'else'  without  'if'  [FE]                              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  System.  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  else  if(remaining  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  System.	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    System.arraycopy(diskStart,    0,    buffer,    offset    +    remaining,    length);    }    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
1010	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	116	1	add
1011	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	116	1	add
1012	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  length;  offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	116	1	add
1013	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  length;  offset  +=  length;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	116	1	add
1014	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  length;  offset  +=  length;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	116	1	add
1015	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  length;  offset  +=  length;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	116	1	add
1016	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  length;  offset  +=  length;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  incompatible  types	116	None	add
1017	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	116	None	add
1018	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	116	1	add
1019	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	116	1	add
1020	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  length;  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	116	1	add
1021	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  length;  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  length;  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	116	1	add
1022	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
1023	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	121	1	replace
1024	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	121	1	replace
1025	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
1026	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	121	1	replace
1027	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  offset    +=    length;    offset    +=    length;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	121	1	replace
1028	[BUG]  [BUGGY]  buffer.append(diskStart).append('n');  offset  +=  length;  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart).append('n');  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart).append('n');  offset  +=  length;	  offset    +=    length;    buffer.append(diskStart).append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1029	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1030	[BUG]  [BUGGY]  if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1031	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1032	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1033	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  else  {  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  else  {  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  else  {  remaining  -=  WORD;  }	  offset    +=    length;    buffer.append(diskStart).append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1034	[BUG]  [BUGGY]  offset  +=  2  *  diskStart.length;  [CE]  cannot  find  symbol  length  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  diskStart.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2  *  diskStart.length;	  offset    +=    2    *    diskStart;    	non-compiled	[CE]  cannot  find  symbol  length	1	None	replace
1035	[BUG]  [BUGGY]  offset  +=  2  *  diskStart,  remaining;  [CE]  ';'  expected  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  diskStart,  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2  *  diskStart,  remaining;	  offset    +=    2    *    diskStart;    	non-compiled	[CE]  ';'  expected	1	None	replace
1036	[BUG]  [BUGGY]  offset  +=  2  *  diskStart,  remaining);  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  diskStart,  remaining);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2  *  diskStart,  remaining);	  offset    +=    2    *    diskStart;    	non-compiled	[CE]  ';'  expected	1	None	replace
1037	[BUG]  [BUGGY]  offset  +=  2  *  diskStart  +  length;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  diskStart  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2  *  diskStart  +  length;	  offset    +=    2    *    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
1038	[BUG]  [BUGGY]  offset  +=  2  *  diskStart  -  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  diskStart  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2  *  diskStart  -  1;	  offset    +=    2    *    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
1039	[BUG]  [BUGGY]  offset  +=  2  *  diskStart  -  remaining;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  diskStart  -  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2  *  diskStart  -  remaining;	  offset    +=    2    *    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
1040	[BUG]  [BUGGY]  remaining  -=  DECLARATION;  [CE]  cannot  find  symbol  DECLARATION  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DECLARATION;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DECLARATION;	  remaining    -=    DEFAULT_DECLARATION;    	non-compiled	[CE]  cannot  find  symbol  DECLARATION	53	None	replace
1041	[BUG]  [BUGGY]  remaining  -=  DEFAULT_WORD;  [CE]  cannot  find  symbol  DEFAULT_WORD  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_WORD;	  remaining    -=    DEFAULT_DECLARATION;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_WORD	53	None	replace
1042	[BUG]  [BUGGY]          ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  variable  diskStart  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  variable  diskStart  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	210	None	add
1043	[BUG]  [BUGGY]          ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  ZZLong  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  ZZLong  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    ZZLong  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  cannot  find  symbol	210	None	add
1044	[BUG]  [BUGGY]          ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  variable  diskStart  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  	non-compiled	[CE]  variable  diskStart  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	210	None	add
1045	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  ZipLong  discStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	                ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    ZipLong  discStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	210	1	add
1046	[BUG]  [BUGGY]          ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  ZipLong  discStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  ZipLong  discStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    ZipLong  discStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	210	1	add
1047	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart),  remaining);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart),  remaining);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart),  remaining);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    diskStart);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	185	None	replace
1048	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset,  diskStart);  [CE]  ')'  expected  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset,  diskStart);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset,  diskStart);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    diskStart);    	non-compiled	[CE]  ')'  expected	185	None	replace
1049	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart,  remaining);  [CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart,  remaining);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart,  remaining);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    diskStart);    	non-compiled	[CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;	185	None	replace
1050	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart,  length);  [CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart,  length);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart,  length);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    diskStart);    	non-compiled	[CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;	185	None	replace
1051	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart),  length);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart),  length);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart),  length);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    diskStart);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	185	None	replace
1052	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart));  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart));	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    diskStart);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	185	None	replace
1053	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart);  [CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    diskStart);    	non-compiled	[CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;	185	None	replace
1054	[BUG]  [BUGGY]  offset  +=  DEFAULT_LAST_DECIMAL_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_LAST_DECIMAL_SIZES_MSG  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_LAST_DECIMAL_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_LAST_DECIMAL_SIZES_MSG;	  offset    +=    LAST_DECIMAL_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_LAST_DECIMAL_SIZES_MSG	232	None	replace
1055	[BUG]  [BUGGY]  offset  +=  DECIMAL_SIZES;  [CE]  cannot  find  symbol  DECIMAL_SIZES  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DECIMAL_SIZES;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_SIZES;	  offset    +=    DEFAULT_DECIMAL_SIZES;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_SIZES	9	None	replace
1056	[BUG]  [BUGGY]  offset  +=  diskStart.length  -  2;  [CE]  cannot  find  symbol  length  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart.length  -  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart.length  -  2;	  offset    +=    diskStart    -    2;    	non-compiled	[CE]  cannot  find  symbol  length	134	None	replace
1057	[BUG]  [BUGGY]  offset  +=  diskStart  -  2  *  remaining;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  2  *  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  2  *  remaining;	  offset    +=    diskStart    -    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	134	None	replace
1058	[BUG]  [BUGGY]  offset  +=  diskStart  /  2;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  /  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  /  2;	  offset    +=    diskStart    -    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	134	None	replace
1059	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  incompatible  types	227	None	replace
1060	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	227	None	replace
1061	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	227	None	replace
1062	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	214	1	add
1063	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	214	1	add
1064	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	214	1	add
1065	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	214	1	add
1066	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	214	None	add
1067	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	214	None	add
1068	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  ';'  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    If(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  ';'  expected	214	None	add
1069	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  off);  }  [CE]  cannot  find  symbol  off  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  off);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  off);  }	  	non-compiled	[CE]  cannot  find  symbol  off	214	None	add
1070	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	33	1	add
1071	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	33	1	add
1072	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	33	1	add
1073	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	33	1	add
1074	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	33	1	add
1075	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	33	1	add
1076	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >>  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >>  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >>  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  incompatible  types	33	None	add
1077	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	33	None	add
1078	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  3;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  3;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	33	1	add
1079	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  3;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  3;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  3;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	33	1	add
1080	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	33	1	add
1081	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	33	1	add
1082	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  <  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  WORD;  while(remaining  <  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;  while(remaining  <  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	169	None	replace
1083	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  <  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  WORD;  while(remaining  <  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;  while(remaining  <  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1084	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >=  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  WORD;  while(remaining  >=  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;  while(remaining  >=  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	169	None	replace
1085	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >=  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  WORD;  while(remaining  >=  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;  while(remaining  >=  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1086	[BUG]  [BUGGY]  remaining  -=  2;  while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  2;  while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	169	None	replace
1087	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;  while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	169	None	replace
1088	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  -  1;	  offset    +=    DEFAULT_DECIMAL_SIZE    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	84	None	replace
1089	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  /  1;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  /  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZE  /  1;	  offset    +=    DEFAULT_DECIMAL_SIZE    -    1;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	84	None	replace
1090	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  -  2;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  -  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZE  -  2;	  offset    +=    DEFAULT_DECIMAL_SIZE    -    1;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	84	None	replace
1091	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	239	2	add
1092	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	239	2	add
1093	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  'else'  without  'if'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  'else'  without  'if'	239	None	add
1094	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	239	2	add
1095	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	239	2	add
1096	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  	non-compiled	[CE]  illegal  start  of  expression	239	None	add
1097	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	239	2	add
1098	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  remaining  -=  WORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	239	2	add
1099	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [CE]  'else'  without  'if'  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  	non-compiled	[CE]  'else'  without  'if'	239	None	add
1100	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;  offset  -=  WORD;  return  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  illegal  start  of  expression	239	None	add
1101	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	239	2	add
1102	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset    +    length);    offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	239	2	add
1103	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	163	1	add
1104	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	163	1	add
1105	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	163	1	add
1106	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	163	1	add
1107	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	163	1	add
1108	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	163	1	add
1109	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  incompatible  types	163	None	add
1110	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	163	1	add
1111	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	163	1	add
1112	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	163	None	add
1113	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	163	1	add
1114	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	163	1	add
1115	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	111	None	replace
1116	[BUG]  [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	111	None	replace
1117	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
1118	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  [CE]  illegal  start  of  expression  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
1119	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD  [CE]  ';'  expected  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    DWORD;    }    	non-compiled	[CE]  ';'  expected	111	None	replace
1120	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	143	1	add
1121	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	143	1	add
1122	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	143	1	add
1123	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	143	1	add
1124	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD  [CE]  ';'  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD	  	non-compiled	[CE]  ';'  expected	143	None	add
1125	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	143	1	add
1126	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	143	1	add
1127	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	143	None	add
1128	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  DWORD;  }  [CE]  cannot  find  symbol  remainder  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  remainder	143	None	add
1129	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  offset  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    length;    offset  -=  length;	  	compilable	  [FE]  ZipException  	40	1	add
1130	[BUG]  [BUGGY]  offset  -=  length;  offset  -=  length;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  offset  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    length;    offset  -=  length;	  	compilable	  [FE]  ZipException  	40	1	add
1131	[BUG]  [BUGGY]  offset  -=  length;  buffer.append(diskStart).append(length  -  1);  offset  -=  length;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  buffer.append(diskStart).append(length  -  1);  offset  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    length;    buffer.append(diskStart).append(length  -  1);  offset  -=  length;	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
1132	[BUG]  [BUGGY]  offset  -=  length;  buffer.append(diskStart).append(length);  offset  -=  length;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  buffer.append(diskStart).append(length);  offset  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    length;    buffer.append(diskStart).append(length);  offset  -=  length;	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
1133	[BUG]  [BUGGY]  offset  -=  length;  buffer.append(diskStart);  offset  -=  length;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  buffer.append(diskStart);  offset  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    length;    buffer.append(diskStart);  offset  -=  length;	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
1134	[BUG]  [BUGGY]  offset  -=  length;  buffer.append(diskStart).append(length  +  1);  offset  -=  length;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  buffer.append(diskStart).append(length  +  1);  offset  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    length;    buffer.append(diskStart).append(length  +  1);  offset  -=  length;	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
1135	[BUG]  [BUGGY]  offset  -=  length;  buffer.append(diskStart).append(length  -  2);  offset  -=  length;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  buffer.append(diskStart).append(length  -  2);  offset  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    length;    buffer.append(diskStart).append(length  -  2);  offset  -=  length;	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
1136	[BUG]  [BUGGY]  offset  -=  length;  offset  =  new  ZipLong(buffer,  offset);  offset  -=  length;  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  offset  =  new  ZipLong(buffer,  offset);  offset  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    length;    offset  =  new  ZipLong(buffer,  offset);  offset  -=  length;	  	non-compiled	[CE]  incompatible  types	40	None	add
1137	[BUG]  [BUGGY]  offset  -=  length;  offset  =  new  ZipLong(buffer,  offset);  remaining  -=  length;  [CE]  incompatible  types  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  offset  =  new  ZipLong(buffer,  offset);  remaining  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    length;    offset  =  new  ZipLong(buffer,  offset);  remaining  -=  length;	  	non-compiled	[CE]  incompatible  types	40	None	add
1138	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  0;  offset  +=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    0;    offset  +=  0;	  	compilable	  [FE]  ZipException  	6	1	add
1139	[BUG]  [BUGGY]  offset  +=  0;  offset  +=  0;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  0;  offset  +=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    0;    offset  +=  0;	  	compilable	  [FE]  ZipException  	6	1	add
1140	[BUG]  [BUGGY]  offset  +=  0;  buffer.append(diskStart).append(remaining  +  0);  offset  +=  0;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  0;  buffer.append(diskStart).append(remaining  +  0);  offset  +=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    0;    buffer.append(diskStart).append(remaining  +  0);  offset  +=  0;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
1141	[BUG]  [BUGGY]  offset  +=  0;  buffer.append(diskStart).append(remaining);  offset  +=  0;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  0;  buffer.append(diskStart).append(remaining);  offset  +=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    0;    buffer.append(diskStart).append(remaining);  offset  +=  0;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
1142	[BUG]  [BUGGY]  offset  +=  0;  buffer.append(diskStart).append('  ');  offset  +=  0;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  0;  buffer.append(diskStart).append('  ');  offset  +=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    0;    buffer.append(diskStart).append('  ');  offset  +=  0;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
1143	[BUG]  [BUGGY]  offset  +=  0;  buffer.append(diskStart);  offset  +=  0;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  0;  buffer.append(diskStart);  offset  +=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    0;    buffer.append(diskStart);  offset  +=  0;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
1144	[BUG]  [BUGGY]  offset  +=  0;  buffer.append(diskStart).append(length  -  0);  offset  +=  0;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  0;  buffer.append(diskStart).append(length  -  0);  offset  +=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    0;    buffer.append(diskStart).append(length  -  0);  offset  +=  0;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
1145	[BUG]  [BUGGY]  offset  +=  0;  buffer.append(remaining  -  diskStart);  offset  +=  0;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  0;  buffer.append(remaining  -  diskStart);  offset  +=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    0;    buffer.append(remaining  -  diskStart);  offset  +=  0;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	6	None	add
1146	[BUG]  [BUGGY]  offset  +=  0;  buffer.append(diskStart).append(remaining  -  0);  offset  +=  0;  [CE]  cannot  find  symbol  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  0;  buffer.append(diskStart).append(remaining  -  0);  offset  +=  0;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    0;    buffer.append(diskStart).append(remaining  -  0);  offset  +=  0;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
1147	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	74	1	add
1148	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remaining  -=  WORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	74	1	add
1149	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  while(remaining  >  WORD)  {  remaining  -=  WORD;  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  while(remaining  >  WORD)  {  remaining  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    while(remaining  >  WORD)  {  remaining  -=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
1150	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remainder  -=  WORD;  remaining  -=  WORD;  [CE]  cannot  find  symbol  remainder  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remainder  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remainder  -=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  remainder	74	None	add
1151	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  rest  -=  WORD;  remaining  -=  WORD;  [CE]  cannot  find  symbol  rest  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  rest  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    rest  -=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  rest	74	None	add
1152	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  	non-compiled	[CE]  incompatible  types	74	None	add
1153	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  while(remaining  >  WORD)  {  remaining  -=  WORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining        -=        WORD;        remaining    -=    WORD;    while(remaining  >  WORD)  {  remaining  -=  WORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	74	1	add
1154	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  while(remaining  >  WORD)  {  remaining  -=  WORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  while(remaining  >  WORD)  {  remaining  -=  WORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    while(remaining  >  WORD)  {  remaining  -=  WORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	74	1	add
1155	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  long  remaining  -=  WORD;  remaining  -=  WORD;  [CE]  ';'  expected  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  long  remaining  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    long  remaining  -=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  ';'  expected	74	None	add
1156	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  Rest  -=  WORD;  remaining  -=  WORD;  [CE]  cannot  find  symbol  Rest  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  Rest  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    Rest  -=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  Rest	74	None	add
1157	[BUG]  [BUGGY]  offset  +=  discStart.length;  [CE]  cannot  find  symbol  discStart  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  discStart.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  discStart.length;	  offset    +=    diskStart.length;    	non-compiled	[CE]  cannot  find  symbol  discStart	96	None	replace
1158	[BUG]  [BUGGY]  offset  +=  diskStart.length  -  1;  [CE]  cannot  find  symbol  length  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart.length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart.length  -  1;	  offset    +=    diskStart.length;    	non-compiled	[CE]  cannot  find  symbol  length	96	None	replace
1159	[BUG]  [BUGGY]  offset  +=  diskStart.length  -  remaining;  [CE]  cannot  find  symbol  length  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart.length  -  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart.length  -  remaining;	  offset    +=    diskStart.length;    	non-compiled	[CE]  cannot  find  symbol  length	96	None	replace
1160	[BUG]  [BUGGY]  offset  +=  diskEnd.length;  [CE]  cannot  find  symbol  diskEnd  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskEnd.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskEnd.length;	  offset    +=    diskStart.length;    	non-compiled	[CE]  cannot  find  symbol  diskEnd	96	None	replace
1161	[BUG]  [BUGGY]  offset  +=  diskStart,  remaining.length;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart,  remaining.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart,  remaining.length;	  offset    +=    diskStart.length;    	non-compiled	[CE]  ';'  expected	96	None	replace
1162	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));	  	compilable	  [FE]  ZipException  	189	1	add
1163	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));	  	compilable	  [FE]  ZipException  	189	1	add
1164	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ZipException  	189	1	add
1165	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ZipException  	189	1	add
1166	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  BORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [CE]  cannot  find  symbol  BORD  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  BORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    offset  -=  WORD;  offset  -=  BORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));	  	non-compiled	[CE]  cannot  find  symbol  BORD	189	None	add
1167	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  resetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  resetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    offset  -=  WORD;  offset  -=  WORD;  resetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));	  	non-compiled	[CE]  cannot  find  symbol	189	None	add
1168	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  SetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  SetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    offset  -=  WORD;  offset  -=  WORD;  SetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));	  	non-compiled	[CE]  cannot  find  symbol	189	None	add
1169	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZIPEightByteInteger(buffer,  offset  +  length));  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZIPEightByteInteger(buffer,  offset  +  length));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZIPEightByteInteger(buffer,  offset  +  length));	  	non-compiled	[CE]  cannot  find  symbol	189	None	add
1170	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ZipException  	19	1	add
1171	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ZipException  	19	1	add
1172	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  WORD;	  	non-compiled	[CE]  incompatible  types	19	None	add
1173	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  =  Math.max(remaining,  diskStart);  offset  -=  WORD;  [CE]  no  suitable  method  found  for  max(int,ZipLong)  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  =  Math.max(remaining,  diskStart);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  =  Math.max(remaining,  diskStart);  offset  -=  WORD;	  	non-compiled	[CE]  no  suitable  method  found  for  max(int,ZipLong)	19	None	add
1174	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  =  Math.max(remaining,  diskStart)-  DWORD;  offset  -=  WORD;  [CE]  no  suitable  method  found  for  max(int,ZipLong)  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  =  Math.max(remaining,  diskStart)-  DWORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  =  Math.max(remaining,  diskStart)-  DWORD;  offset  -=  WORD;	  	non-compiled	[CE]  no  suitable  method  found  for  max(int,ZipLong)	19	None	add
1175	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  =  Math.max(remaining,  diskStart)-  1;  offset  -=  WORD;  [CE]  no  suitable  method  found  for  max(int,ZipLong)  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  =  Math.max(remaining,  diskStart)-  1;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  =  Math.max(remaining,  diskStart)-  1;  offset  -=  WORD;	  	non-compiled	[CE]  no  suitable  method  found  for  max(int,ZipLong)	19	None	add
1176	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  +=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    offset  +=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ZipException  	19	1	add
1177	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  +=  WORD;  offset  -=  WORD;  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  +=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  +=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ZipException  	19	1	add
1178	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  =  Math.max(remaining,  diskStart)/  2;  offset  -=  WORD;  [CE]  no  suitable  method  found  for  max(int,ZipLong)  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  =  Math.max(remaining,  diskStart)/  2;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  =  Math.max(remaining,  diskStart)/  2;  offset  -=  WORD;	  	non-compiled	[CE]  no  suitable  method  found  for  max(int,ZipLong)	19	None	add
1179	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	19	1	add
1180	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	19	1	add
1181	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  cannot  find  symbol  diskSize  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  cannot  find  symbol  diskSize	202	None	replace
1182	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	202	None	replace
1183	[BUG]  [BUGGY]  remaining  -=  1;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  1;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  1;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  discStart	81	None	replace
1184	[BUG]  [BUGGY]  remaining  -=  2;  while(remaining  >  3)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  while(remaining  >  3)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  2;  while(remaining  >  3)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    WORD)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  discStart	81	None	replace
1185	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  =  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  =  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
1186	[BUG]  [BUGGY]  if(remaining  >  diskStart)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  diskStart)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  diskStart)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	127	None	replace
1187	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	127	None	replace
1188	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1189	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1190	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1191	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1192	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1193	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1194	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1195	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1196	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1197	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1198	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1199	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	238	1	replace
1200	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	188	None	replace
1201	[BUG]  [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	188	None	replace
1202	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	188	None	replace
1203	[BUG]  [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	188	None	replace
1204	[BUG]  [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	188	None	replace
1205	[BUG]  [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	188	None	replace
1206	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	188	1	replace
1207	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	188	1	replace
1208	[BUG]  [BUGGY]  timeout  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  2;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	timeout	254	1	replace
1209	[BUG]  [BUGGY]  remaining  -=  2;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  timeout  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  2;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	timeout	254	1	replace
1210	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  DWORD;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	254	1	replace
1211	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DWORD;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	254	1	replace
1212	[BUG]  [BUGGY]  offset  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	8	None	replace
1213	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  diskStart;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  diskStart;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  ';'  expected	8	None	replace
1214	[BUG]  [BUGGY]  offset  +=  2;  }  else  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  }  else  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  }  else  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
1215	[BUG]  [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  else  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
1216	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	190	None	replace
1217	[BUG]  [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	190	None	replace
1218	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  length;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    	compilable	  [FE]  ZipException  	190	1	replace
1219	[BUG]  [BUGGY]  offset  -=  length;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  length;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    	compilable	  [FE]  ZipException  	190	1	replace
1220	[BUG]  [BUGGY]  if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    	non-compiled	[CE]  cannot  find  symbol  discStart	190	None	replace
1221	[BUG]  [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  >=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	190	None	replace
1222	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    	compilable	  [FE]  ZipException  	190	1	replace
1223	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    	compilable	  [FE]  ZipException  	190	1	replace
1224	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  }  else  {  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset    +    length));    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	190	None	replace
1225	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	90	1	replace
1226	[BUG]  [BUGGY]  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	90	1	replace
1227	[BUG]  [BUGGY]  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	90	None	replace
1228	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  WORD  -  1;	  offset    +=    diskStart    -    1;    	compilable	  [FE]  ZipException  	132	1	replace
1229	[BUG]  [BUGGY]  offset  +=  WORD  -  1;  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD  -  1;	  offset    +=    diskStart    -    1;    	compilable	  [FE]  ZipException  	132	1	replace
1230	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart),  relativeHeaderOffset);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart),  relativeHeaderOffset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  diskStart),  relativeHeaderOffset);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    relativeHeaderOffset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	191	None	replace
1231	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset);  [CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    relativeHeaderOffset);    	non-compiled	[CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;	191	None	replace
1232	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length),  relativeHeaderOffset);  [CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length),  relativeHeaderOffset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length),  relativeHeaderOffset);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    relativeHeaderOffset);    	non-compiled	[CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;	191	None	replace
1233	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset,  diskStart);  [CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset,  diskStart);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset,  diskStart);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    relativeHeaderOffset);    	non-compiled	[CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;	191	None	replace
1234	[BUG]  [BUGGY]  offset  -=  2;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset);  [CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  2;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    relativeHeaderOffset);    	non-compiled	[CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;	191	None	replace
1235	[BUG]  [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  2),  relativeHeaderOffset);  [CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  2),  relativeHeaderOffset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  2),  relativeHeaderOffset);	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset),    relativeHeaderOffset);    	non-compiled	[CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;	191	None	replace
1236	[BUG]  [BUGGY]  offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  length;  [CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  length;	  offset    +=    DEFAULT_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG	137	None	replace
1237	[BUG]  [BUGGY]  buffer.append(diskStart);  offset  +=  length;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart);  offset  +=  length;	  offset    +=    length;    buffer.append(diskStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1238	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1239	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1240	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  else  {  buffer.append('n');  }	  offset    +=    length;    buffer.append(diskStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1241	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  else  {  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  else  {  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  else  {  remaining  -=  WORD;  }	  offset    +=    length;    buffer.append(diskStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1242	[BUG]  [BUGGY]  if(remaining  <  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1243	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	147	1	add
1244	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	147	1	add
1245	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD  [CE]  ';'  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD	  	non-compiled	[CE]  ';'  expected	147	None	add
1246	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	147	1	add
1247	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	147	1	add
1248	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	147	None	add
1249	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	147	1	add
1250	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	147	1	add
1251	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  DWORD;  }  [CE]  cannot  find  symbol  remainder  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  remainder	147	None	add
1252	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    offset  +=  remaining;	  	compilable	  [FE]  ZipException  	12	1	add
1253	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    offset  +=  remaining;	  	compilable	  [FE]  ZipException  	12	1	add
1254	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	12	1	add
1255	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	12	1	add
1256	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	12	1	add
1257	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	12	1	add
1258	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	12	1	add
1259	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	12	1	add
1260	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  [CE]  illegal  start  of  expression  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
1261	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	12	1	add
1262	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    if(remaining  <  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	12	1	add
1263	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	12	1	add
1264	[BUG]  [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        remaining;        offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    remaining;    }    offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	12	1	add
1265	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG  +  length;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG  +  length;	  offset    +=    DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG	209	None	replace
1266	[BUG]  [BUGGY]  offset  +=  DECIMAL_DECIMAL_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DECIMAL_DECIMAL_HAVE_BOTH_SIZES_MSG  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DECIMAL_DECIMAL_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_DECIMAL_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_DECIMAL_HAVE_BOTH_SIZES_MSG	209	None	replace
1267	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  remaining  +  1;	  offset    -=    remaining;    	compilable	  [FE]  ZipException  	39	1	replace
1268	[BUG]  [BUGGY]  offset  -=  remaining  +  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  remaining  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  remaining  +  1;	  offset    -=    remaining;    	compilable	  [FE]  ZipException  	39	1	replace
1269	[BUG]  [BUGGY]  if(remaining!=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  diskSize  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining!=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	221	None	replace
1270	[BUG]  [BUGGY]  if(remaining  >=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  diskSize  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	221	None	replace
1271	[BUG]  [BUGGY]  if(remaining!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [CE]  incomparable  types:  int  and  <null>  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	221	None	replace
1272	[BUG]  [BUGGY]  while(remaining  >=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);	          if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	221	None	replace
1273	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1274	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1275	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1276	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1277	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1278	[BUG]  [BUGGY]  if(remaining  >  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1279	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));	  	compilable	  [FE]  ZipException  	183	1	add
1280	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));	  	compilable	  [FE]  ZipException  	183	1	add
1281	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ZipException  	183	1	add
1282	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    offset  -=  WORD;  offset  -=  WORD;	  	compilable	  [FE]  ZipException  	183	1	add
1283	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  resetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  resetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    offset  -=  WORD;  offset  -=  WORD;  resetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));	  	non-compiled	[CE]  cannot  find  symbol	183	None	add
1284	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  off));  [CE]  cannot  find  symbol  off  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  off));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  off));	  	non-compiled	[CE]  cannot  find  symbol  off	183	None	add
1285	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  SetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  SetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    offset  -=  WORD;  offset  -=  WORD;  SetRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));	  	non-compiled	[CE]  cannot  find  symbol	183	None	add
1286	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZIPEightByteInteger(buffer,  offset));  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZIPEightByteInteger(buffer,  offset));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZIPEightByteInteger(buffer,  offset));	  	non-compiled	[CE]  cannot  find  symbol	183	None	add
1287	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  isRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  -=  WORD;  offset  -=  WORD;  isRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    offset  -=  WORD;  offset  -=  WORD;  isRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));	  	non-compiled	[CE]  cannot  find  symbol	183	None	add
1288	[BUG]  [BUGGY]  remaining  -=  DECIMAL_SIZES_MSG;  [CE]  cannot  find  symbol  DECIMAL_SIZES_MSG  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DECIMAL_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DECIMAL_SIZES_MSG;	  remaining    -=    DEFAULT_DECIMAL_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_SIZES_MSG	223	None	replace
1289	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZES_MSG  +  1;	  remaining    -=    DEFAULT_DECIMAL_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	223	None	replace
1290	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG  +  diskStart;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG  +  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZES_MSG  +  diskStart;	  remaining    -=    DEFAULT_DECIMAL_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	223	None	replace
1291	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG  +  length;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZES_MSG  +  length;	  remaining    -=    DEFAULT_DECIMAL_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	223	None	replace
1292	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARED_SIZE  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECLARED_SIZE  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECLARED_SIZE  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECLARED_SIZE  +  1;	  remaining    -=    DEFAULT_DECLARED_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECLARED_SIZE	54	None	replace
1293	[BUG]  [BUGGY]  remaining  -=  DECLARED_SIZE;  [CE]  cannot  find  symbol  DECLARED_SIZE  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DECLARED_SIZE;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DECLARED_SIZE;	  remaining    -=    DEFAULT_DECLARED_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DECLARED_SIZE	54	None	replace
1294	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARED_SIZE  +  2;  [CE]  cannot  find  symbol  DEFAULT_DECLARED_SIZE  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECLARED_SIZE  +  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECLARED_SIZE  +  2;	  remaining    -=    DEFAULT_DECLARED_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECLARED_SIZE	54	None	replace
1295	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append(length    -    1);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1296	[BUG]  [BUGGY]  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(length    -    1);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1297	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append(length    -    1);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1298	[BUG]  [BUGGY]  if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  WORD)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append(length    -    1);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1299	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append(length  -  1);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  WORD;  buffer.append(remaining).append(length  -  1);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;  buffer.append(remaining).append(length  -  1);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(length    -    1);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1300	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append(length    -    1);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1301	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  }  [CE]  incompatible  types  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(    buffer,    offset);    	non-compiled	[CE]  incompatible  types	201	None	replace
1302	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  }  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(    buffer,    offset);    	non-compiled	[CE]  incompatible  types	201	None	replace
1303	[BUG]  [BUGGY]  buffer.append(diskStart).append('  ');  offset  +=  length;  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart).append('  ');  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart).append('  ');  offset  +=  length;	  offset    +=    length;    buffer.append(diskStart).append('    ');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
1304	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('    ');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
1305	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('    ');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
1306	[BUG]  [BUGGY]  if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('    ');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
1307	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('    ');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
1308	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }  else  {  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }  else  {  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  }  else  {  remaining  -=  WORD;  }	  offset    +=    length;    buffer.append(diskStart).append('    ');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
1309	[BUG]  [BUGGY]  offset  +=  diskStart  *  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  *  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  *  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    *    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	199	None	replace
1310	[BUG]  [BUGGY]  offset  +=  length  *  diskStart;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  *  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  *  diskStart;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    *    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	199	None	replace
1311	[BUG]  [BUGGY]  offset  +=  discStart  *  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  discStart  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  discStart  *  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  discStart  *  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    *    diskStart;    	non-compiled	[CE]  cannot  find  symbol  discStart	199	None	replace
1312	[BUG]  [BUGGY]  offset  +=  diskStart  *  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  *  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  *  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    *    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG	199	None	replace
1313	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  *  diskStart;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  *  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  *  diskStart;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    *    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	199	None	replace
1314	[BUG]  [BUGGY]  offset  +=  discStart  *  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  discStart  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  discStart  *  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  discStart  *  DEFAULT_DECIMAL_MUST_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    *    diskStart;    	non-compiled	[CE]  cannot  find  symbol  discStart	199	None	replace
1315	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	                if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	217	1	add
1316	[BUG]  [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	217	1	add
1317	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	                if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	217	1	add
1318	[BUG]  [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	217	1	add
1319	[BUG]  [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	217	None	add
1320	[BUG]  [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	217	None	add
1321	[BUG]  [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  >>  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  >>  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  >>  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	217	None	add
1322	[BUG]  [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  If(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  ';'  expected  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  If(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    If(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  ';'  expected	217	None	add
1323	[BUG]  [BUGGY]  offset  +=  HEADER_ID;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  HEADER_ID;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  HEADER_ID;	  offset    +=    READER_ID;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	57	None	replace
1324	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECLARATION;  [CE]  cannot  find  symbol  DEFAULT_DECLARATION  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECLARATION;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECLARATION;	  offset    +=    READER_ID;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECLARATION	57	None	replace
1325	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECEMBER_ID;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_ID  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECEMBER_ID;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECEMBER_ID;	  offset    +=    READER_ID;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_ID	57	None	replace
1326	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	17	1	replace
1327	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  ==  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	17	1	replace
1328	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	17	1	replace
1329	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	17	1	replace
1330	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	17	1	replace
1331	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining!=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	17	1	replace
1332	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1333	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	194	None	replace
1334	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	194	1	replace
1335	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  }	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	194	1	replace
1336	[BUG]  [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  WORD)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset	          if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	194	None	replace
1337	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	88	1	replace
1338	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	88	1	replace
1339	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	88	None	replace
1340	[BUG]  [BUGGY]  if(remaining!=  DWORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  DWORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining!=  DWORD)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	88	None	replace
1341	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	88	1	replace
1342	[BUG]  [BUGGY]  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	88	1	replace
1343	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	30	1	add
1344	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	30	1	add
1345	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	30	1	add
1346	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	30	1	add
1347	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    offset  +=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	30	1	add
1348	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    offset  +=  2;  offset  +=  2;	  	compilable	  [FE]  ZipException  	30	1	add
1349	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
1350	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInt  [CE]  '('  or  '['  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInt  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInt	  	non-compiled	[CE]  '('  or  '['  expected	30	None	add
1351	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
1352	[BUG]  [BUGGY]  buffer.append(remaining);  offset  +=  length;  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(remaining);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(remaining);  offset  +=  length;	  offset    +=    length;    buffer.append(dialogStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	253	None	replace
1353	[BUG]  [BUGGY]  buffer.append(dialogStart);  offset  +=  length;  [CE]  cannot  find  symbol  dialogStart  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(dialogStart);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(dialogStart);  offset  +=  length;	  offset    +=    length;    buffer.append(dialogStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol  dialogStart	253	None	replace
1354	[BUG]  [BUGGY]  offset  -=  length;  buffer.append(diskStart);  offset  +=  length;  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  buffer.append(diskStart);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  length;  buffer.append(diskStart);  offset  +=  length;	  offset    +=    length;    buffer.append(dialogStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	253	None	replace
1355	[BUG]  [BUGGY]  offset  -=  length;  buffer.append(dialogStart);  offset  +=  length;  [CE]  cannot  find  symbol  dialogStart  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  length;  buffer.append(dialogStart);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  length;  buffer.append(dialogStart);  offset  +=  length;	  offset    +=    length;    buffer.append(dialogStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol  dialogStart	253	None	replace
1356	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	113	None	replace
1357	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	113	None	replace
1358	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	113	None	replace
1359	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	113	None	replace
1360	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	113	None	replace
1361	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	113	None	replace
1362	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
1363	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  offset  +=  length;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  DWORD)  {  offset  +=  length;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	compilable	  [FE]  ZipException  	114	1	replace
1364	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  offset  +=  length;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  offset  +=  length;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  offset  +=  length;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    }    	compilable	  [FE]  ZipException  	114	1	replace
1365	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    	non-compiled	[CE]  ')'  expected	18	None	replace
1366	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    	compilable	  [FE]  ZipException  	18	1	replace
1367	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    	compilable	  [FE]  ZipException  	18	1	replace
1368	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    	compilable	  [FE]  ZipException  	18	1	replace
1369	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    	compilable	  [FE]  ZipException  	18	1	replace
1370	[BUG]  [BUGGY]  remaining  -=  DECEMBER;  [CE]  cannot  find  symbol  DECEMBER  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DECEMBER;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DECEMBER;	  remaining    -=    DEFAULT_DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	50	None	replace
1371	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECEMBER  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECEMBER  +  1;	  remaining    -=    DEFAULT_DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	50	None	replace
1372	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE  +  1;	  remaining    -=    DEFAULT_DECIMAL_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	49	None	replace
1373	[BUG]  [BUGGY]  remaining  -=  DECIMAL_SIZE;  [CE]  cannot  find  symbol  DECIMAL_SIZE  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DECIMAL_SIZE;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DECIMAL_SIZE;	  remaining    -=    DEFAULT_DECIMAL_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_SIZE	49	None	replace
1374	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  2;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE  +  2;	  remaining    -=    DEFAULT_DECIMAL_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	49	None	replace
1375	[BUG]  [BUGGY]  offset  +=  diskStart;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  offset    +=    remaining;    offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	154	None	replace
1376	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	154	None	replace
1377	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart  ==  null)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	154	1	replace
1378	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	154	1	replace
1379	[BUG]  [BUGGY]  if(diskStart  ==  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  }	  offset    +=    remaining;    offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	154	None	replace
1380	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  offset    +=    remaining;    offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	154	1	replace
1381	[BUG]  [BUGGY]  offset  +=  length;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  offset    +=    remaining;    offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    	compilable	  [FE]  ZipException  	154	1	replace
1382	[BUG]  [BUGGY]  if(diskStart!=  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  [CE]  incomparable  types:  ZipLong  and  int  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  0)  {  offset  +=  remaining;  offset  +=  remaining;  }  else  {  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }	  offset    +=    remaining;    offset    +=    remaining;    this.relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    remaining;    	non-compiled	[CE]  incomparable  types:  ZipLong  and  int	154	None	replace
1383	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_STANDARD;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_STANDARD  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_STANDARD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_STANDARD;	  remaining    -=    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_STANDARD	47	None	replace
1384	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1385	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	119	1	replace
1386	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	119	1	replace
1387	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	119	1	replace
1388	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	119	1	replace
1389	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	non-compiled	[CE]  ')'  expected	119	None	replace
1390	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  [CE]  ';'  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	non-compiled	[CE]  ';'  expected	119	None	replace
1391	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	145	1	add
1392	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	145	1	add
1393	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	145	1	add
1394	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	145	1	add
1395	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  +=  DWORD;  remaining  -=  WORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	145	None	add
1396	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD	  	non-compiled	[CE]  ';'  expected	145	None	add
1397	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  discStart  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart  ==  null)  {  discStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	145	None	add
1398	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  WORD;  }  [CE]  cannot  find  symbol  remainder  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remainder  -=  WORD;  }	  	non-compiled	[CE]  cannot  find  symbol  remainder	145	None	add
1399	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  <  discStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  WORD;  while(remaining  <  discStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;  while(remaining  <  discStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  discStart	167	None	replace
1400	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  <  discStart)  {  discStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  WORD;  while(remaining  <  discStart)  {  discStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;  while(remaining  <  discStart)  {  discStart  =  new  ZipLong(buffer,  offset);	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
1401	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;  while(remaining  >  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	167	None	replace
1402	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  <  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  WORD;  while(remaining  <  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;  while(remaining  <  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	167	None	replace
1403	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >=  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  WORD;  while(remaining  >=  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;  while(remaining  >=  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	167	None	replace
1404	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  discStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  WORD;  while(remaining  >  discStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;  while(remaining  >  discStart)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  remaining    -=    WORD;    while(remaining    >    diskStart)    {    discStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  discStart	167	None	replace
1405	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    discStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	110	None	replace
1406	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    discStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	110	None	replace
1407	[BUG]  [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong  [CE]  '('  or  '['  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    discStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  '('  or  '['  expected	110	None	replace
1408	[BUG]  [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  offset  +=  DWORD;  }  else  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    discStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	110	None	replace
1409	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    discStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	110	None	replace
1410	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	181	1	add
1411	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	181	1	add
1412	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	181	1	add
1413	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	181	1	add
1414	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	181	1	add
1415	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	181	1	add
1416	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  incompatible  types	181	None	add
1417	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	181	1	add
1418	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  3;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	181	1	add
1419	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  discStart  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	181	None	add
1420	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	181	1	add
1421	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  offset  =  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    offset  =  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	181	1	add
1422	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  WORD;  if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	226	1	replace
1423	[BUG]  [BUGGY]  offset  +=  WORD;  if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	226	1	replace
1424	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1425	[BUG]  [BUGGY]  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1426	[BUG]  [BUGGY]  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
1427	[BUG]  [BUGGY]  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  ')'  expected	130	None	replace
1428	[BUG]  [BUGGY]  offset  +=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
1429	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  WORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1430	[BUG]  [BUGGY]  offset  +=  WORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  WORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  WORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1431	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	109	None	replace
1432	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  ';'  expected	109	None	replace
1433	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	add
1434	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  +=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	65	1	add
1435	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  +=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	65	1	add
1436	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	65	1	add
1437	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	65	1	add
1438	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  +=  length;  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	add
1439	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  remaining  -=  WORD;  [CE]  class,  interface,  or  enum  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  remaining  -=  WORD;	  	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	add
1440	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  +=  length;  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	add
1441	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  +=  length;  offset  +=  length;  }  else  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	add
1442	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  +=  length;  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	65	1	add
1443	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  +=  length;  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	65	1	add
1444	[BUG]  [BUGGY]  buffer.append(diskStart).append(length);  offset  +=  length;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(diskStart).append(length);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(diskStart).append(length);  offset  +=  length;	  offset    +=    length;    buffer.append(diskStart).append(length);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	252	None	replace
1445	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append(length);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	252	None	replace
1446	[BUG]  [BUGGY]  if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append(length);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	252	None	replace
1447	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append(length);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	252	None	replace
1448	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append('n');  }	  offset    +=    length;    buffer.append(diskStart).append(length);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	252	None	replace
1449	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  remaining  -=  WORD;  }	  offset    +=    length;    buffer.append(diskStart).append(length);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	252	None	replace
1450	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MSG  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_MSG;	  offset    +=    LFH_MUST_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MSG	204	None	replace
1451	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1452	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1453	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1454	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1455	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)	  	compilable	  [FE]  ZipException  	68	1	add
1456	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)	  	compilable	  [FE]  ZipException  	68	1	add
1457	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1458	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1459	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)	  	compilable	  [FE]  ZipException  	68	1	add
1460	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)	  	compilable	  [FE]  ZipException  	68	1	add
1461	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)	  	compilable	  [FE]  ZipException  	68	1	add
1462	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)	  	compilable	  [FE]  ZipException  	68	1	add
1463	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  [CE]  illegal  start  of  expression  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
1464	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE;  offset  +=  DEFAULT_DECIMAL_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE;  offset  +=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZE;  offset  +=  DEFAULT_DECIMAL_SIZE;	  offset    +=    remaining;    offset    +=    remaining;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	11	None	replace
1465	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  offset  +=  remaining;  [CE]  inconvertible  types  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  offset  +=  remaining;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  offset  +=  remaining;	  offset    +=    remaining;    offset    +=    remaining;    	non-compiled	[CE]  inconvertible  types	11	None	replace
1466	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECLARATION;  offset  +=  DEFAULT_DECLARATION;  [CE]  cannot  find  symbol  DEFAULT_DECLARATION  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECLARATION;  offset  +=  DEFAULT_DECLARATION;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECLARATION;  offset  +=  DEFAULT_DECLARATION;	  offset    +=    remaining;    offset    +=    remaining;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECLARATION	11	None	replace
1467	[BUG]  [BUGGY]  if(remaining  >  diskEnd)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  diskEnd  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  diskEnd)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  diskEnd)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  diskEnd	127	None	replace
1468	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	127	None	replace
1469	[BUG]  [BUGGY]  if(remaining  <  0)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  0)  {  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	127	None	replace
1470	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  =  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  =  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    diskStart)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
1471	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append( "n ");  }  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append( "n ");  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append( "n ");  }	  offset    +=    length;    buffer.append(diskStart).append(length);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	252	None	replace
1472	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append('-');  }  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append('-');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append('-');  }	  offset    +=    length;    buffer.append(diskStart).append(length);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	252	None	replace
1473	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append('/');  }  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append('/');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  }  else  {  buffer.append('/');  }	  offset    +=    length;    buffer.append(diskStart).append(length);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	252	None	replace
1474	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	152	1	replace
1475	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	152	1	replace
1476	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	152	1	replace
1477	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	152	1	replace
1478	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
1479	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	152	None	replace
1480	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset	  if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ')'  expected	152	None	replace
1481	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  <  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
1482	[BUG]  [BUGGY]  if(remaining  <  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [FE]  ZipException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
1483	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
1484	[BUG]  [BUGGY]  if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [FE]  ZipException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    	compilable	  [FE]  ZipException  	244	1	replace
1485	[BUG]  [BUGGY]  while(remaining  >  length)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  length;  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  length)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  length)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  length;	  remaining    -=    WORD;    while(remaining    >    WORD)    {    discStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1486	[BUG]  [BUGGY]  offset  +=  discStart  +  length;  [CE]  cannot  find  symbol  discStart  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  discStart  +  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  discStart  +  length;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    +    length;    	non-compiled	[CE]  cannot  find  symbol  discStart	86	None	replace
1487	[BUG]  [BUGGY]  offset  +=  length  +  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  +  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  +  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG	86	None	replace
1488	[BUG]  [BUGGY]  offset  +=  diskStart  -  buffer.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  buffer.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  buffer.length;	  offset    +=    diskStart    -    remaining;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	133	None	replace
1489	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1490	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1491	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1492	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1493	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1494	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1495	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  3;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  3;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1496	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  3;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  3;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  3;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1497	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1498	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1499	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1500	[BUG]  [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	178	1	replace
1501	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	36	1	replace
1502	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	36	1	replace
1503	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	36	1	replace
1504	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    	compilable	  [FE]  ZipException  	36	1	replace
1505	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	90	None	replace
1506	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	90	1	replace
1507	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	90	1	replace
1508	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	90	None	replace
1509	[BUG]  [BUGGY]  if(remaining!=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining!=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining!=  0)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  cannot  find  symbol  diskSize	90	None	replace
1510	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	90	None	replace
1511	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
1512	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  [CE]  illegal  start  of  expression  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=	  if(diskStart!=    null)    {    diskSize    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
1513	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append(remaining    -    WORD);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
1514	[BUG]  [BUGGY]  buffer.append(remaining  -  WORD).append(diskStart  -  WORD);  offset  -=  WORD;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(remaining  -  WORD).append(diskStart  -  WORD);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(remaining  -  WORD).append(diskStart  -  WORD);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(remaining    -    WORD);    offset    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	22	None	replace
1515	[BUG]  [BUGGY]  buffer.append(remaining).append(diskStart  -  WORD);  offset  -=  WORD;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  buffer.append(remaining).append(diskStart  -  WORD);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	buffer.append(remaining).append(diskStart  -  WORD);  offset  -=  WORD;	  offset    -=    WORD;    buffer.append(diskStart).append(remaining    -    WORD);    offset    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	22	None	replace
1516	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  }  else  {  buffer.append('n');  }	  offset    -=    WORD;    buffer.append(diskStart).append(remaining    -    WORD);    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
1517	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart!=  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	188	1	replace
1518	[BUG]  [BUGGY]  if(diskStart!=  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	188	1	replace
1519	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	188	1	replace
1520	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	188	1	replace
1521	[BUG]  [BUGGY]  if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  discStart  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(discStart  ==  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  discStart	188	None	replace
1522	[BUG]  [BUGGY]  if(discStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(discStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(discStart!=  0)  {  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  }	  offset    -=    WORD;    offset    -=    WORD;    setRelativeHeaderOffset(new    ZipEightByteInteger(buffer,    offset));    remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  discStart	188	None	replace
1523	[BUG]  [BUGGY]  offset  +=  diskStart,  remaining  +  1;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart,  remaining  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart,  remaining  +  1;	  offset    +=    diskStart,    remaining;    	non-compiled	[CE]  ';'  expected	136	None	replace
1524	[BUG]  [BUGGY]  offset  +=  diskStart,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart,  relativeHeaderOffset;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart,  relativeHeaderOffset;	  offset    +=    diskStart,    remaining;    	non-compiled	[CE]  ';'  expected	136	None	replace
1525	[BUG]  [BUGGY]  offset  +=  diskStart,  length;  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart,  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart,  length;	  offset    +=    diskStart,    remaining;    	non-compiled	[CE]  ';'  expected	136	None	replace
1526	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    continue    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
1527	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    continue    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
1528	[BUG]  [BUGGY]  if(remaining  ==  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    continue    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
1529	[BUG]  [BUGGY]  if(remaining  <  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    continue    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
1530	[BUG]  [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0.0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0.0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0.0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0.0)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  0.0)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    continue    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
1531	[BUG]  [BUGGY]  if(remaining  ==  -1)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]                            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  ==  -1)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  ==  -1)  {  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  offset    +=    length;    offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    continue    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
1532	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  diskStart);  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  diskStart);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  diskStart);  }	  offset    -=    WORD;    offset    -=    WORD;    remaining    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	238	None	replace
1533	[BUG]  [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  }  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]          if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	                if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    if(diskStart  ==  null)  {  diskStart  =  new  ZIPLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol	214	None	add
1534	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset	  	non-compiled	[CE]  ')'  expected	151	None	add
1535	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1536	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  buffer.append(diskStart);  offset  +=  length;  [CE]  inconvertible  types  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  buffer.append(diskStart);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  buffer.append(diskStart);  offset  +=  length;	  offset    +=    length;    buffer.append(diskStart);    offset    +=    length;    	non-compiled	[CE]  inconvertible  types	250	None	replace
1537	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  else  {  buffer.append('n');  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  }  else  {  buffer.append('n');  }	  offset    +=    length;    buffer.append(diskStart);    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	250	None	replace
1538	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	175	1	replace
1539	[BUG]  [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }	  offset    +=    2;    offset    +=    2;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	175	1	replace
1540	[BUG]  [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  [CE]  illegal  start  of  expression  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
1541	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  [CE]  illegal  start  of  expression  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
1542	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    remaining;    offset    +=    remaining;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(    buffer,    offset);    	non-compiled	[CE]  incompatible  types	201	None	replace
1543	[BUG]  [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  SHORT;  [CE]  illegal  start  of  expression  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  SHORT;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  SHORT;	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	255	None	replace
1544	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  1)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	while(remaining  >  1)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	255	1	replace
1545	[BUG]  [BUGGY]  while(remaining  >  1)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  while(remaining  >  1)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	while(remaining  >  1)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  }	  remaining    -=    WORD;    while(remaining    >    0)    {    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	255	1	replace
1546	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  offset  +=  diskStart;  [CE]  inconvertible  types  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  offset  +=  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  offset  +=  diskStart;	  offset    +=    remaining;    offset    +=    remaining;    	non-compiled	[CE]  inconvertible  types	11	None	replace
1547	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECEMBER_SIZE;  offset  +=  DEFAULT_DECEMBER_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECEMBER_SIZE;  offset  +=  DEFAULT_DECEMBER_SIZE;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECEMBER_SIZE;  offset  +=  DEFAULT_DECEMBER_SIZE;	  offset    +=    remaining;    offset    +=    remaining;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	11	None	replace
1548	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE;  offset  +=  DEFAULT_DECIMAL_SIZES;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE;  offset  +=  DEFAULT_DECIMAL_SIZES;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZE;  offset  +=  DEFAULT_DECIMAL_SIZES;	  offset    +=    remaining;    offset    +=    remaining;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	11	None	replace
1549	[BUG]  [BUGGY]  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	109	None	replace
1550	[BUG]  [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    else    if(remaining    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	109	None	replace
1551	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  DWORD;	  	compilable	  [FE]  ZipException  	55	1	add
1552	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  DWORD;	  	compilable	  [FE]  ZipException  	55	1	add
1553	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	55	1	add
1554	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	55	1	add
1555	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;	  	compilable	  [FE]  ZipException  	55	1	add
1556	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;	  	compilable	  [FE]  ZipException  	55	1	add
1557	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	55	1	add
1558	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	55	1	add
1559	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  position  -=  DWORD;  [CE]  cannot  find  symbol  position  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  position  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  position  -=  DWORD;	  	non-compiled	[CE]  cannot  find  symbol  position	55	None	add
1560	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  ZipEightByteInteger(buffer,  offset);  offset  -=  DWORD;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  ZipEightByteInteger(buffer,  offset);  offset  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  ZipEightByteInteger(buffer,  offset);  offset  -=  DWORD;	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
1561	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  off  +=  DWORD;  [CE]  cannot  find  symbol  off  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  off  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  off  +=  DWORD;	  	non-compiled	[CE]  cannot  find  symbol  off	55	None	add
1562	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset  +=  DWORD;  offset  +=  DWORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
1563	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  DWORD;  offset  +=  DWORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  DWORD;  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset  +=  DWORD;  offset  +=  DWORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
1564	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(  buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(  buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(  buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(  buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
1565	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(  buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(  buffer,  offset);  offset  +=  DWORD;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(  buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(  buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(  buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(  buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	243	2	add
1566	[BUG]  [BUGGY]  offset  +=  diskEnd  -  1;  [CE]  cannot  find  symbol  diskEnd  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskEnd  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskEnd  -  1;	  offset    +=    DEFAULT_DECIMAL_SIZE    -    1;    	non-compiled	[CE]  cannot  find  symbol  diskEnd	84	None	replace
1567	[BUG]  [BUGGY]  offset  +=  diskHeaderOffset  -  1;  [CE]  cannot  find  symbol  diskHeaderOffset  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskHeaderOffset  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskHeaderOffset  -  1;	  offset    +=    DEFAULT_DECIMAL_SIZE    -    1;    	non-compiled	[CE]  cannot  find  symbol  diskHeaderOffset	84	None	replace
1568	[BUG]  [BUGGY]  offset  +=  diskStart  *  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  *  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  *  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    *    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	199	None	replace
1569	[BUG]  [BUGGY]  offset  +=  diskStart  *  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  *  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  *  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    *    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	199	None	replace
1570	[BUG]  [BUGGY]  offset  +=  diskStart  *  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  *  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  *  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    *    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG	199	None	replace
1571	[BUG]  [BUGGY]  offset  +=  diskStart  *  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  *  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  *  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    *    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG	199	None	replace
1572	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >  [CE]  ')'  expected  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >	  	non-compiled	[CE]  ')'  expected	129	None	add
1573	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  [CE]  ')'  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  	  	non-compiled	[CE]  ')'  expected	129	None	add
1574	[BUG]  [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  <  [CE]  ')'  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  <  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        DWORD;        offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  if(remaining  <  	  	non-compiled	[CE]  ')'  expected	129	None	add
1575	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1576	[BUG]  [BUGGY]  if(length  >  diskStart)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(length  >  diskStart)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(length  >  diskStart)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('n');    offset    +=    length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	247	None	replace
1577	[BUG]  [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  else  {  buffer.append( "n ");  offset  +=  length;  }  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  else  {  buffer.append( "n ");  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  }  else  {  buffer.append( "n ");  offset  +=  length;  }	  offset    +=    length;    buffer.append(diskStart).append('n');    offset    +=    length;    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
1578	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    DWORD;    while(remaining  >  DWORD)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
1579	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remainder  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remainder  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    DWORD;    while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remainder  -=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
1580	[BUG]  [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  diskEnd  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DWORD;  while(remaining  >  DWORD)  {  diskEnd  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    DWORD;    while(remaining  >  DWORD)  {  diskEnd  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
1581	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  offset  -=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    length    -    1;    offset  -=  length  -  1;	  	compilable	  [FE]  ZipException  	99	1	add
1582	[BUG]  [BUGGY]  offset  +=  length  -  1;  offset  -=  length  -  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  offset  -=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    offset  -=  length  -  1;	  	compilable	  [FE]  ZipException  	99	1	add
1583	[BUG]  [BUGGY]  offset  +=  length  -  1;  buffer  +=  length  -  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  buffer  +=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    buffer  +=  length  -  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	99	None	add
1584	[BUG]  [BUGGY]  offset  +=  length  -  1;  offset  +=  size  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  offset  +=  size  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    offset  +=  size  -  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	99	None	add
1585	[BUG]  [BUGGY]  offset  +=  length  -  1;  off  +=  length  -  1;  [CE]  cannot  find  symbol  off  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  off  +=  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    off  +=  length  -  1;	  	non-compiled	[CE]  cannot  find  symbol  off	99	None	add
1586	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  offset  =  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    length    -    1;    offset  =  length  -  1;	  	compilable	  [FE]  ZipException  	99	1	add
1587	[BUG]  [BUGGY]  offset  +=  length  -  1;  offset  =  length  -  1;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  -  1;  offset  =  length  -  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length    -    1;    offset  =  length  -  1;	  	compilable	  [FE]  ZipException  	99	1	add
1588	[BUG]  [BUGGY]  offset  +=  length  +  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  +  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  +  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG	73	None	replace
1589	[BUG]  [BUGGY]  offset  +=  length  +  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  inconvertible  types  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length  +  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  +  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    +    length;    	non-compiled	[CE]  inconvertible  types	73	None	replace
1590	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    offset  +=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	68	1	add
1591	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    offset  +=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	68	1	add
1592	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset	  	non-compiled	[CE]  ')'  expected	68	None	add
1593	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1594	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1595	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	add
1596	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  >>  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  incompatible  types	68	None	add
1597	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1598	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining!=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1599	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1600	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    }    else    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  else  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ZipException  	68	1	add
1601	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
1602	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
1603	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
1604	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
1605	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset	  	non-compiled	[CE]  ')'  expected	179	None	add
1606	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(relativeHeaderOffset!=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(relativeHeaderOffset!=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(relativeHeaderOffset!=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	179	None	add
1607	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
1608	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	179	1	add
1609	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	179	1	add
1610	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	179	1	add
1611	[BUG]  [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  [CE]  ';'  expected  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        2;        offset    +=    2;    }    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    2;    if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart	  	non-compiled	[CE]  ';'  expected	179	None	add
1612	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
1613	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
1614	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
1615	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    	compilable	  [FE]  ZipException  	34	1	replace
1616	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
1617	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
1618	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DW  [CE]  ';'  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DW  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    DWORD;    }    if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DW	  	non-compiled	[CE]  ';'  expected	143	None	add
1619	[BUG]  [BUGGY]  offset  +=  diskStart  -  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG	140	None	replace
1620	[BUG]  [BUGGY]  offset  +=  diskStart  -  DEFAULT_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  DEFAULT_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  DEFAULT_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG	140	None	replace
1621	[BUG]  [BUGGY]  offset  +=  diskStart  -  DEFAULT_DECIMAL_SIZES;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  DEFAULT_DECIMAL_SIZES;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  DEFAULT_DECIMAL_SIZES;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES	140	None	replace
1622	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
1623	[BUG]  [BUGGY]  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
1624	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  <  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
1625	[BUG]  [BUGGY]  if(remaining  <  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  0)  {  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
1626	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  -WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  -WORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
1627	[BUG]  [BUGGY]  if(remaining  >  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  -WORD;  }  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  -WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  -WORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	128	1	replace
1628	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HEAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  LFH_MUST_HEAVE_BOTH_SIZES_MSG  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_HEAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HEAVE_BOTH_SIZES_MSG;	  offset    +=    LFH_MUST_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_HEAVE_BOTH_SIZES_MSG	205	None	replace
1629	[BUG]  [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG+  diskStart;  [CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG+  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_BOTH_SIZES_MSG+  diskStart;	  offset    +=    LFH_MUST_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG	205	None	replace
1630	[BUG]  [BUGGY]  offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  diskStart;  [CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  diskStart;	  offset    +=    DEFAULT_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG	137	None	replace
1631	[BUG]  [BUGGY]  offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG  -  diskStart;  [CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG  -  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG  -  diskStart;	  offset    +=    DEFAULT_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG	137	None	replace
1632	[BUG]  [BUGGY]  offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG.trim();  [CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG.trim();  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG.trim();	  offset    +=    DEFAULT_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG	137	None	replace
1633	[BUG]  [BUGGY]  ZipLong  diskStart  =  new  ZipLong(remaining,  buffer);  [CE]  no  suitable  constructor  found  for  ZipLong(int,byte[])  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(remaining,  buffer);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	ZipLong  diskStart  =  new  ZipLong(remaining,  buffer);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(int,byte[])	211	None	replace
1634	[BUG]  [BUGGY]  ZipLong  diskStart  =  new  ZipLong(remaining,  buffer.length);  [CE]  no  suitable  constructor  found  for  ZipLong(int,int)  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  ZipLong  diskStart  =  new  ZipLong(remaining,  buffer.length);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	ZipLong  diskStart  =  new  ZipLong(remaining,  buffer.length);	          ZipLong    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(int,int)	211	None	replace
1635	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION  +  diskStart;  [CE]  cannot  find  symbol  DEFAULT_DECLARATION  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECLARATION  +  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECLARATION  +  diskStart;	  remaining    -=    DEFAULT_DECLARATION;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECLARATION	53	None	replace
1636	[BUG]  [BUGGY]  remaining  -=  DEFAULT_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_SIZES_MSG  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_SIZES_MSG;	  remaining    -=    DEFAULT_DECLARATION;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SIZES_MSG	53	None	replace
1637	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECLARATION  [FE]                      ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  DEFAULT_DECLARATION  +  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECLARATION  +  1;	  remaining    -=    DEFAULT_DECLARATION;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECLARATION	53	None	replace
1638	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  while(remaining  >  diskStart)  {  remaining  -=  WORD;  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  while(remaining  >  diskStart)  {  remaining  -=  WORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    while(remaining  >  diskStart)  {  remaining  -=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
1639	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  while(remaining  >  diskStart)  {  remaining  -=  WORD;  remaining  -=  WORD;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  while(remaining  >  diskStart)  {  remaining  -=  WORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    while(remaining  >  diskStart)  {  remaining  -=  WORD;  remaining  -=  WORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	74	None	add
1640	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remaining  -=  WORD;  parseFromLocalFileData(buffer,  offset);  [CE]  method  parseFromLocalFileData  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remaining  -=  WORD;  parseFromLocalFileData(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  parseFromLocalFileData(buffer,  offset);	  	non-compiled	[CE]  method  parseFromLocalFileData  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;	74	None	add
1641	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remainder  -=  WORD;  [CE]  cannot  find  symbol  remainder  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remainder  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  WORD;  remainder  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  remainder	74	None	add
1642	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1643	[BUG]  [BUGGY]  if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1644	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1645	[BUG]  [BUGGY]  if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  -1)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1646	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1647	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  +=  DWORD;  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset    	compilable	  [FE]  ZipException  	246	1	replace
1648	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1649	[BUG]  [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1650	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1651	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1652	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1653	[BUG]  [BUGGY]  if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1654	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1655	[BUG]  [BUGGY]  if(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  0;  }	  offset    +=    DWORD;    offset    +=    DWORD;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	130	1	replace
1656	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  incompatible  types  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  incompatible  types	227	None	replace
1657	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  ')'  expected	227	None	replace
1658	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    diskStart    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  incompatible  types	227	None	replace
1659	[BUG]  [BUGGY]  offset  -=  diskStartLength;  [CE]  cannot  find  symbol  diskStartLength  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  diskStartLength;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  diskStartLength;	  offset    -=    length;    	non-compiled	[CE]  cannot  find  symbol  diskStartLength	41	None	replace
1660	[BUG]  [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  }	  offset    -=    WORD;    buffer.append(diskStart).append('/');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
1661	[BUG]  [BUGGY]  offset  -=  DEFAULT_SIZE;  buffer.append(diskStart).append('/');  offset  -=  DEFAULT_SIZE;  [CE]  cannot  find  symbol  DEFAULT_SIZE  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  DEFAULT_SIZE;  buffer.append(diskStart).append('/');  offset  -=  DEFAULT_SIZE;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  DEFAULT_SIZE;  buffer.append(diskStart).append('/');  offset  -=  DEFAULT_SIZE;	  offset    -=    WORD;    buffer.append(diskStart).append('/');    offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SIZE	236	None	replace
1662	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
1663	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
1664	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  4;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  4;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
1665	[BUG]  [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  4;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  4;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  4;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
1666	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  3;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  3;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
1667	[BUG]  [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  3;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  3;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  3;  }	  offset    +=    2;    offset    +=    2;    if(remaining    >=    WORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(    buffer,    offset);    offset    +=    2;    }    	compilable	  [FE]  ZipException  	31	1	replace
1668	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	146	1	replace
1669	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	146	1	replace
1670	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [CE]  ';'  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  ';'  expected	146	None	replace
1671	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	146	1	replace
1672	[BUG]  [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	compilable	  [FE]  ZipException  	146	1	replace
1673	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;	  if(diskStart    ==    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    }    else    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1674	[BUG]  [BUGGY]  offset  +=  diskStart  -  deFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  deFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  deFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  deFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  deFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	198	None	replace
1675	[BUG]  [BUGGY]  offset  +=  diskStart  -  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  diskStart  -  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG    -    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG	198	None	replace
1676	[BUG]  [BUGGY]  remaining  -=  2;  while(remaining  <  =  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]          ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  2;  while(remaining  <  =  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  2;  while(remaining  <  =  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  remaining    -=    WORD;    while(remaining    >    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
1677	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	19	1	add
1678	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	19	1	add
1679	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  this.relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  this.relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  this.relativeHeaderOffset  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  incompatible  types	19	None	add
1680	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	add
1681	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	add
1682	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	add
1683	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	add
1684	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  this.diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  this.diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	19	1	add
1685	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  this.diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  this.diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  this.diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	19	1	add
1686	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(relativeHeaderOffset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(relativeHeaderOffset);	  	compilable	  [FE]  ZipException  	19	1	add
1687	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(relativeHeaderOffset);  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(relativeHeaderOffset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(relativeHeaderOffset);	  	compilable	  [FE]  ZipException  	19	1	add
1688	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2  *  DWORD;	  	compilable	  [FE]  ZipException  	2	1	add
1689	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2  *  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2  *  DWORD;	  	compilable	  [FE]  ZipException  	2	1	add
1690	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
1691	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
1692	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
1693	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;	  	compilable	  [FE]  ZipException  	2	1	add
1694	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;	  	compilable	  [FE]  ZipException  	2	1	add
1695	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;	  	compilable	  [FE]  ZipException  	2	1	add
1696	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  2  *  DWORD;  offset  +=  2  *  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2    *    DWORD;    offset  +=  2  *  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;	  	compilable	  [FE]  ZipException  	2	1	add
1697	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  -=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    offset  -=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	60	1	add
1698	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  -=  length;  offset  +=  length;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  -=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  -=  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	60	1	add
1699	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  =  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset        +=        length;        offset    +=    length;    offset  =  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	60	1	add
1700	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  =  length;  offset  +=  length;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  =  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  =  length;  offset  +=  length;	  	compilable	  [FE]  ZipException  	60	1	add
1701	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  buffer  +=  length;  offset  +=  length;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  buffer  +=  length;  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    buffer  +=  length;  offset  +=  length;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	60	None	add
1702	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
1703	[BUG]  [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length.length;  [CE]  int  cannot  be  dereferenced  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    +=    length;    offset  +=  length;  offset  +=  length;  offset  +=  length.length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        +=        length;        offset    +=    length;    offset  +=  length;  offset  +=  length.length;	  	non-compiled	[CE]  int  cannot  be  dereferenced	60	None	add
1704	[BUG]  [BUGGY]  offset  +=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  diskStart;  [CE]  cannot  find  symbol  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]            ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  diskStart;	  offset    +=    DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	71	None	replace
1705	[BUG]  [BUGGY]  offset  +=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  -  diskStart;  [CE]  cannot  find  symbol  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]              ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  -  diskStart;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  -  diskStart;	  offset    +=    DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	71	None	replace
1706	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	119	1	replace
1707	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	119	1	replace
1708	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	119	1	replace
1709	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	119	1	replace
1710	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	119	1	replace
1711	[BUG]  [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  offset    +=    length;    offset    +=    length;    }    if(remaining    >=    DWORD)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    length;    	compilable	  [FE]  ZipException  	119	1	replace
1712	[BUG]  [BUGGY]  remainder  -=  length;  [CE]  cannot  find  symbol  remainder  [FE]                ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remainder  -=  length;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remainder  -=  length;	  remaining    -=    WORD;    while(remaining    >    0.0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol  remainder	258	None	replace
1713	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  offset;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  offset;	  remaining    -=    WORD;    while(remaining    >    0.0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	258	1	replace
1714	[BUG]  [BUGGY]  remaining  -=  offset;  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  remaining  -=  offset;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  offset;	  remaining    -=    WORD;    while(remaining    >    0.0)    {    diskStart    =    new    ZipLong(buffer,    offset);    	compilable	  [FE]  ZipException  	258	1	replace
1715	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  HEADER_ID;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  HEADER_ID;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  offset  -=  HEADER_ID;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	233	None	add
1716	[BUG]  [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  SIZES_MSG;  [CE]  cannot  find  symbol  SIZES_MSG  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  -=  WORD;  offset  -=  SIZES_MSG;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset        -=        WORD;        offset    -=    WORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset  -=  WORD;  offset  -=  SIZES_MSG;	  	non-compiled	[CE]  cannot  find  symbol  SIZES_MSG	233	None	add
1717	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    2;    offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  2;	  	compilable	  [FE]  ZipException  	42	1	add
1718	[BUG]  [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  2;	  	compilable	  [FE]  ZipException  	42	1	add
1719	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    2;    offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	42	1	add
1720	[BUG]  [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	42	1	add
1721	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    2;    offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  1;	  	compilable	  [FE]  ZipException  	42	1	add
1722	[BUG]  [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  1;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  1;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  1;	  	compilable	  [FE]  ZipException  	42	1	add
1723	[BUG]  [BUGGY]  offset  -=  2;  offset  -=  2;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  2;  [CE]  ')'  expected  [FE]          ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    offset  -=  2;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  2;	  	non-compiled	[CE]  ')'  expected	42	None	add
1724	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    2;    offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  3;	  	compilable	  [FE]  ZipException  	42	1	add
1725	[BUG]  [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  3;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  3;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  -=  3;	  	compilable	  [FE]  ZipException  	42	1	add
1726	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    2;    offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  2;	  	compilable	  [FE]  ZipException  	42	1	add
1727	[BUG]  [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  2;  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  2;  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    offset  -=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  2;	  	compilable	  [FE]  ZipException  	42	1	add
1728	[BUG]  [BUGGY]  timeout  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    2;    offset  -=  2;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));	  	compilable	timeout	42	1	add
1729	[BUG]  [BUGGY]  offset  -=  2;  offset  -=  2;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  timeout  [FE]                ZipException    [CONTEXT]      compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);      [BUGGY]  offset  -=  2;  offset  -=  2;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [BUGGY]      remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    2;    offset  -=  2;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));	  	compilable	timeout	42	1	add
