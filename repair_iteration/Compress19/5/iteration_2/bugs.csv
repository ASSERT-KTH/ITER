bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  offset  +=  2  *  diskStart;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2  *  diskStart;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2  *  diskStart;	  offset    +=    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	12	None	replace
2	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2  *  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2  *  DWORD;	  offset    +=    2;    	compilable	  [FE]  ZipException  	12	1	replace
3	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2  *  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2  *  DWORD;	  offset    +=    2;    	compilable	  [FE]  ZipException  	12	1	replace
4	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  1;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  1;	  offset    +=    2;    	compilable	  [FE]  ZipException  	12	1	replace
5	[BUG]  [BUGGY]  offset  +=  1;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  1;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  1;	  offset    +=    2;    	compilable	  [FE]  ZipException  	12	1	replace
6	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  0;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  0;	  offset    +=    2;    	compilable	  [FE]  ZipException  	12	1	replace
7	[BUG]  [BUGGY]  offset  +=  0;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  0;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  0;	  offset    +=    2;    	compilable	  [FE]  ZipException  	12	1	replace
8	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  inconvertible  types  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_STANDARD;    	non-compiled	[CE]  inconvertible  types	18	None	replace
9	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZES;	  offset    +=    DEFAULT_DECIMAL_STANDARD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES	18	None	replace
10	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    remaining;    offset  +=  remaining;	  	compilable	  [FE]  ZipException  	7	1	add
11	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;	  	compilable	  [FE]  ZipException  	7	1	add
12	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	7	1	add
13	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	7	1	add
14	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
15	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  remaining;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
16	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	7	1	add
17	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	7	1	add
18	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  [CE]  ')'  expected  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(	  	non-compiled	[CE]  ')'  expected	7	None	add
19	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    WORD;    offset  -=  WORD;	  	compilable	  [FE]  ZipException  	5	1	add
20	[BUG]  [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  -=  WORD;	  	compilable	  [FE]  ZipException  	5	1	add
21	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    buffer.append(diskStart).append(length  -  1);  offset  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
22	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    buffer.append(diskStart).append(remaining  -  WORD);  offset  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
23	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(remaining);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(remaining);  offset  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    buffer.append(diskStart).append(remaining);  offset  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
24	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    buffer.append(diskStart).append(length  -  2);  offset  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
25	[BUG]  [BUGGY]  offset  -=  WORD;  offset  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  incompatible  types  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  	non-compiled	[CE]  incompatible  types	5	None	add
26	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append('W');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append('W');  offset  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    buffer.append(diskStart).append('W');  offset  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
27	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart);  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]                  ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  buffer.append(diskStart);  offset  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    buffer.append(diskStart);  offset  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
28	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2;    offset  +=  2;	  	compilable	  [FE]  ZipException  	11	1	add
29	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;	  	compilable	  [FE]  ZipException  	11	1	add
30	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	11	1	add
31	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	11	1	add
32	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
33	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	11	1	add
34	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	11	1	add
35	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset	  	non-compiled	[CE]  ')'  expected	11	None	add
36	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  offset  +=  2;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
37	[BUG]  [BUGGY]  offset  -=  diskStart;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  diskStart;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  diskStart;	  offset    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	6	None	replace
38	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  remaining;	  offset    -=    WORD;    	compilable	  [FE]  ZipException  	6	1	replace
39	[BUG]  [BUGGY]  offset  -=  remaining;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  remaining;	  offset    -=    WORD;    	compilable	  [FE]  ZipException  	6	1	replace
40	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  length;	  offset    -=    WORD;    	compilable	  [FE]  ZipException  	6	1	replace
41	[BUG]  [BUGGY]  offset  -=  length;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  length;	  offset    -=    WORD;    	compilable	  [FE]  ZipException  	6	1	replace
42	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  2;	  offset    -=    WORD;    	compilable	  [FE]  ZipException  	6	1	replace
43	[BUG]  [BUGGY]  offset  -=  2;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  2;	  offset    -=    WORD;    	compilable	  [FE]  ZipException  	6	1	replace
44	[BUG]  [BUGGY]  offset  -=  discStart;  [CE]  cannot  find  symbol  discStart  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  discStart;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  discStart;	  offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  discStart	6	None	replace
45	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  1;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  1;	  offset    -=    WORD;    	compilable	  [FE]  ZipException  	6	1	replace
46	[BUG]  [BUGGY]  offset  -=  1;  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  1;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  1;	  offset    -=    WORD;    	compilable	  [FE]  ZipException  	6	1	replace
47	[BUG]  [BUGGY]  remaining  -=  diskStart;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  diskStart;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  diskStart;	  remaining    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	21	None	replace
48	[BUG]  [BUGGY]  remaining  -=  discStart;  [CE]  cannot  find  symbol  discStart  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  discStart;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  discStart;	  remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  discStart	21	None	replace
49	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	21	None	replace
50	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	21	None	replace
51	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  length;	  remaining    -=    WORD;    	compilable	  [FE]  ZipException  	21	1	replace
52	[BUG]  [BUGGY]  remaining  -=  length;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  length;	  remaining    -=    WORD;    	compilable	  [FE]  ZipException  	21	1	replace
53	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  [CE]  cannot  find  symbol  DEFAULT_DECLARATION  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECLARATION;	  remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECLARATION	21	None	replace
54	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARED_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECLARED_SIZE  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  DEFAULT_DECLARED_SIZE;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECLARED_SIZE;	  remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECLARED_SIZE	21	None	replace
55	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  DWORD;	  offset    +=    DWORD;    	compilable	  [FE]  ZipException  	10	1	replace
56	[BUG]  [BUGGY]  offset  -=  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  DWORD;	  offset    +=    DWORD;    	compilable	  [FE]  ZipException  	10	1	replace
57	[BUG]  [BUGGY]  offset  +=  READER_ID;  [CE]  cannot  find  symbol  READER_ID  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  READER_ID;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  READER_ID;	  offset    +=    discStart;    	non-compiled	[CE]  cannot  find  symbol  READER_ID	4	None	replace
58	[BUG]  [BUGGY]  offset  +=  LAST_SIZE;  [CE]  cannot  find  symbol  LAST_SIZE  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  LAST_SIZE;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LAST_SIZE;	  offset    +=    discStart;    	non-compiled	[CE]  cannot  find  symbol  LAST_SIZE	4	None	replace
59	[BUG]  [BUGGY]  offset  +=  size;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  size;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  size;	  offset    +=    discStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	4	None	replace
60	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    length;    offset  +=  length;	  	compilable	  [FE]  ZipException  	2	1	add
61	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;	  	compilable	  [FE]  ZipException  	2	1	add
62	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
63	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
64	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [CE]  class,  interface,  or  enum  expected  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  remaining  -=  WORD;	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
65	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	2	1	add
66	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	2	1	add
67	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [CE]  ';'  expected  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  continue  -=  WORD;  }	  	non-compiled	[CE]  ';'  expected	2	None	add
68	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  	compilable	  [FE]  ZipException  	2	1	add
69	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [FE]  ZipException  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  	compilable	  [FE]  ZipException  	2	1	add
70	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  System.arraycopy(diskStart,  0,  buffer,  offset  +  remaining,  length);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  System.arraycopy(diskStart,  0,  buffer,  offset  +  remaining,  length);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  System.arraycopy(diskStart,  0,  buffer,  offset  +  remaining,  length);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
71	[BUG]  [BUGGY]  offset  +=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	19	None	replace
72	[BUG]  [BUGGY]  offset  +=  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	19	None	replace
73	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  length;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  length;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	19	None	replace
74	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining    -=    WORD;    remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	20	1	add
75	[BUG]  [BUGGY]  remaining  -=  WORD;  remaining  -=  WORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	20	1	add
76	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
77	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
78	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
79	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
80	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  WORD)  {  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  WORD)  {  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  WORD)  {  remaining  -=  WORD;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
81	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
82	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]                  ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  WORD)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
83	[BUG]  [BUGGY]  offset  +=  DECIMAL_SIZE;  [CE]  cannot  find  symbol  DECIMAL_SIZE  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DECIMAL_SIZE;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_SIZE;	  offset    +=    DEFAULT_DECIMAL_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_SIZE	15	None	replace
84	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  -  1;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  -  1;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZE  -  1;	  offset    +=    DEFAULT_DECIMAL_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	15	None	replace
85	[BUG]  [BUGGY]  offset  +=  DECIMAL_SIZES_MSG;  [CE]  cannot  find  symbol  DECIMAL_SIZES_MSG  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DECIMAL_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DECIMAL_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_SIZES_MSG	22	None	replace
86	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  length;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  length;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	22	None	replace
87	[BUG]  [BUGGY]  offset  +=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG	22	None	replace
88	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	      	non-compiled	[CE]  cannot  find  symbol  diskSize	14	None	replace
89	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart  ==  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	      	non-compiled	[CE]  cannot  find  symbol  diskSize	14	None	replace
90	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	      	non-compiled	[CE]  cannot  find  symbol  diskSize	14	None	replace
91	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart  ==  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	      	non-compiled	[CE]  cannot  find  symbol  diskSize	14	None	replace
92	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	      	non-compiled	[CE]  cannot  find  symbol  diskSize	14	None	replace
93	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  diskSize  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	      	non-compiled	[CE]  cannot  find  symbol  diskSize	14	None	replace
94	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  diskSize  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	      	non-compiled	[CE]  cannot  find  symbol  diskSize	14	None	replace
95	[BUG]  [BUGGY]      if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  remaining  -=  WORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  remaining  -=  WORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	        if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  remaining  -=  WORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	add
96	[BUG]  [BUGGY]  offset  +=  diskStart.length;  [CE]  cannot  find  symbol  length  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  diskStart.length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart.length;	  offset    +=    diskStart;    	non-compiled	[CE]  cannot  find  symbol  length	1	None	replace
97	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECEMBER_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECEMBER_SIZE;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECEMBER_SIZE;	  offset    +=    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	1	None	replace
98	[BUG]  [BUGGY]  offset  +=  DEFAULT_SIZE;  [CE]  cannot  find  symbol  DEFAULT_SIZE  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_SIZE;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_SIZE;	  offset    +=    diskStart;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SIZE	1	None	replace
99	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length  -  1;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length  -  1;	  offset    +=    length;    	compilable	  [FE]  ZipException  	3	1	replace
100	[BUG]  [BUGGY]  offset  +=  length  -  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length  -  1;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  -  1;	  offset    +=    length;    	compilable	  [FE]  ZipException  	3	1	replace
101	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length  -  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length  -  2;	  offset    +=    length;    	compilable	  [FE]  ZipException  	3	1	replace
102	[BUG]  [BUGGY]  offset  +=  length  -  2;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length  -  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  -  2;	  offset    +=    length;    	compilable	  [FE]  ZipException  	3	1	replace
103	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length  -  3;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length  -  3;	  offset    +=    length;    	compilable	  [FE]  ZipException  	3	1	replace
104	[BUG]  [BUGGY]  offset  +=  length  -  3;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length  -  3;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length  -  3;	  offset    +=    length;    	compilable	  [FE]  ZipException  	3	1	replace
105	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    DWORD;    offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	9	1	add
106	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	9	1	add
107	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
108	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	9	None	add
109	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	9	None	add
110	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
111	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  DWORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
112	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  diskEnd  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
113	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  else  if(remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
114	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
115	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	add
116	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	2	1	add
117	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	2	1	add
118	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  	compilable	  [FE]  ZipException  	2	1	add
119	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  	compilable	  [FE]  ZipException  	2	1	add
120	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  	compilable	  [FE]  ZipException  	2	1	add
121	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  	compilable	  [FE]  ZipException  	2	1	add
122	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES;  [CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES;	  offset    +=    discStart;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES	4	None	replace
123	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSGS;  [CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES_MSGS  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSGS;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSGS;	  offset    +=    discStart;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES_MSGS	4	None	replace
124	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_NSG;  [CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES_NSG  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_NSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_NSG;	  offset    +=    discStart;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES_NSG	4	None	replace
125	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_AMG;  [CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES_AMG  [FE]                  ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_AMG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_AMG;	  offset    +=    discStart;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES_AMG	4	None	replace
126	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
127	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
128	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
129	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	9	1	add
130	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  	compilable	  [FE]  ZipException  	9	1	add
131	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	9	None	add
132	[BUG]  [BUGGY]  offset  +=  diskStart  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  diskStart  -  1;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  1;	  offset    +=    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	1	None	replace
133	[BUG]  [BUGGY]  offset  +=  diskStart  -  remaining;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  diskStart  -  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  remaining;	  offset    +=    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	1	None	replace
134	[BUG]  [BUGGY]  offset  +=  diskStart  -  2;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  diskStart  -  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  2;	  offset    +=    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	1	None	replace
135	[BUG]  [BUGGY]  offset  +=  diskStart  -  length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  diskStart  -  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart  -  length;	  offset    +=    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	1	None	replace
136	[BUG]  [BUGGY]  offset  +=  diskStart,  remaining;  [CE]  ';'  expected  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  diskStart,  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart,  remaining;	  offset    +=    diskStart;    	non-compiled	[CE]  ';'  expected	1	None	replace
137	[BUG]  [BUGGY]  offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG	15	None	replace
138	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  +  diskStart;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE  +  diskStart;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZE  +  diskStart;	  offset    +=    DEFAULT_DECIMAL_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	15	None	replace
139	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  diskStart;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  diskStart;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZES_MSG  +  diskStart;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	22	None	replace
140	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  -  diskStart;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG  -  diskStart;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZES_MSG  -  diskStart;	  offset    +=    DEFAULT_DECIMAL_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	22	None	replace
141	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	      	compilable	  [FE]  ZipException  	14	1	replace
142	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	      	compilable	  [FE]  ZipException  	14	1	replace
143	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	      	compilable	  [FE]  ZipException  	14	1	replace
144	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	      	compilable	  [FE]  ZipException  	14	1	replace
145	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	      	compilable	  [FE]  ZipException  	14	1	replace
146	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	      	compilable	  [FE]  ZipException  	14	1	replace
147	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	      	compilable	  [FE]  ZipException  	14	1	replace
148	[BUG]  [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	      	compilable	  [FE]  ZipException  	14	1	replace
149	[BUG]  [BUGGY]  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  cannot  find  symbol  discStart  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	      	non-compiled	[CE]  cannot  find  symbol  discStart	14	None	replace
150	[BUG]  [BUGGY]  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  cannot  find  symbol  discStart  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	      	non-compiled	[CE]  cannot  find  symbol  discStart	14	None	replace
151	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	14	1	replace
152	[BUG]  [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	14	1	replace
153	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	7	1	add
154	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	7	1	add
155	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	add
156	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	7	1	add
157	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	7	1	add
158	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	7	1	add
159	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	7	1	add
160	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	7	1	add
161	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	7	1	add
162	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [CE]  class,  interface,  or  enum  expected  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	add
163	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	7	1	add
164	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	7	1	add
165	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  diskStart)  {  if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
166	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  diskStart)  {  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
167	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
168	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  diskStart)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
169	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
170	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  diskStart)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
171	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  diskStart)  {  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  diskStart)  {  remaining  -=  WORD;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
172	[BUG]  [BUGGY]  offset  -=  diskEnd;  [CE]  cannot  find  symbol  diskEnd  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  diskEnd;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  diskEnd;	  offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  diskEnd	6	None	replace
173	[BUG]  [BUGGY]  offset  -=  diskStart.length;  [CE]  cannot  find  symbol  length  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  diskStart.length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  diskStart.length;	  offset    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  length	6	None	replace
174	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	11	None	add
175	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	add
176	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	add
177	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;	  	compilable	  [FE]  ZipException  	11	1	add
178	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;	  	compilable	  [FE]  ZipException  	11	1	add
179	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;	  	compilable	  [FE]  ZipException  	11	1	add
180	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  }  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;	  	compilable	  [FE]  ZipException  	11	1	add
181	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	11	1	add
182	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	11	1	add
183	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));	  	compilable	  [FE]  ZipException  	5	1	add
184	[BUG]  [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));	  	compilable	  [FE]  ZipException  	5	1	add
185	[BUG]  [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart);  [CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  diskStart);	  	non-compiled	[CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;	5	None	add
186	[BUG]  [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  [CE]  ')'  expected  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  ')'  expected	5	None	add
187	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	5	1	add
188	[BUG]  [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	5	1	add
189	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));	  	compilable	  [FE]  ZipException  	5	1	add
190	[BUG]  [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset  +  length));	  	compilable	  [FE]  ZipException  	5	1	add
191	[BUG]  [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset);  [CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset),  relativeHeaderOffset);	  	non-compiled	[CE]  method  setRelativeHeaderOffset  in  class  Zip64ExtendedInformationExtraField  cannot  be  applied  to  given  types;	5	None	add
192	[BUG]  [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  [CE]  ')'  expected  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  -=  WORD;  setRelativeHeaderOffset(new  ZipEightByteInteger(buffer,  offset);  offset  -=  WORD;	  	non-compiled	[CE]  ')'  expected	5	None	add
193	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	        if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	13	1	add
194	[BUG]  [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	        if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	13	1	add
195	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_FIRST;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_FIRST  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  DEFAULT_DECIMAL_FIRST;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_FIRST;	  remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_FIRST	21	None	replace
196	[BUG]  [BUGGY]  remaining  -=  diskEnd;  [CE]  cannot  find  symbol  diskEnd  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  diskEnd;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  diskEnd;	  remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  diskEnd	21	None	replace
197	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  diskStart;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  diskStart;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  +  diskStart;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	19	None	replace
198	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  -  diskStart;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  -  diskStart;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  -  diskStart;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	19	None	replace
199	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  *  diskStart;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  *  diskStart;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  *  diskStart;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	19	None	replace
200	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset	  	non-compiled	[CE]  ')'  expected	7	None	add
201	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(  buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
202	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskSize  =  new  ZipEightByteInteger(buffer,  offset	  	non-compiled	[CE]  ')'  expected	7	None	add
203	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskSize  =  new  ZipEightByteInteger(  buffer,  offset);  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskSize  =  new  ZipEightByteInteger(  buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskSize  =  new  ZipEightByteInteger(  buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
204	[BUG]  [BUGGY]  offset  +=  LFH_MUST_SIZES_MSG;  [CE]  cannot  find  symbol  LFH_MUST_SIZES_MSG  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_SIZES_MSG;	  offset    +=    discStart;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_SIZES_MSG	4	None	replace
205	[BUG]  [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LFH_MUST_BOTH_SIZES_MSG;	  offset    +=    discStart;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG	4	None	replace
206	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  DWORD;	  offset    +=    DWORD;    	compilable	  [FE]  ZipException  	10	1	replace
207	[BUG]  [BUGGY]  remaining  -=  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  DWORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DWORD;	  offset    +=    DWORD;    	compilable	  [FE]  ZipException  	10	1	replace
208	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_FILE_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_FILE_SIZE  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_FILE_SIZE;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_FILE_SIZE;	  offset    +=    remaining;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_FILE_SIZE	8	None	replace
209	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG;	  offset    +=    DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_HAVE_BOTH_SIZES_MSG	19	None	replace
210	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	        ZipLong  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	13	1	add
211	[BUG]  [BUGGY]      ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      ZipLong  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	        ZipLong  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	13	1	add
212	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	        if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	13	1	add
213	[BUG]  [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	        if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	13	1	add
214	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	        if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	13	1	add
215	[BUG]  [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	        if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	13	1	add
216	[BUG]  [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	        if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
217	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	        if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	13	1	add
218	[BUG]  [BUGGY]      if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	        if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	13	1	add
219	[BUG]  [BUGGY]      if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	        if(diskStart!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
220	[BUG]  [BUGGY]      if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  [CE]  cannot  find  symbol  diskSize  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	        if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }	  	non-compiled	[CE]  cannot  find  symbol  diskSize	13	None	add
221	[BUG]  [BUGGY]      if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [CE]  cannot  find  symbol  diskSize  [FE]                  ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]      if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	        if(diskStart!=  null)  {  diskSize  =  new  ZipLong(buffer,  offset);  }  else  {  buffer.append('n');  }	  	non-compiled	[CE]  cannot  find  symbol  diskSize	13	None	add
222	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	21	None	replace
223	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZES_MSG;	  remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	21	None	replace
224	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZES;	  remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES	21	None	replace
225	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset	  	non-compiled	[CE]  ')'  expected	11	None	add
226	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset	  	non-compiled	[CE]  ')'  expected	11	None	add
227	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
228	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
229	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	11	1	add
230	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	11	1	add
231	[BUG]  [BUGGY]  offset  +=  LAST_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  LAST_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  LAST_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LAST_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    diskEnd;    	non-compiled	[CE]  cannot  find  symbol  LAST_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	16	None	replace
232	[BUG]  [BUGGY]  offset  +=  LAST_DECIMAL_SIZES_MSG;  [CE]  cannot  find  symbol  LAST_DECIMAL_SIZES_MSG  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  LAST_DECIMAL_SIZES_MSG;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  LAST_DECIMAL_SIZES_MSG;	  offset    +=    diskEnd;    	non-compiled	[CE]  cannot  find  symbol  LAST_DECIMAL_SIZES_MSG	16	None	replace
233	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
234	[BUG]  [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
235	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append('  ');  offset  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    buffer.append(diskStart).append('  ');  offset  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
236	[BUG]  [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  buffer.append(diskStart).append('/');  offset  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    buffer.append(diskStart).append('/');  offset  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
237	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	5	1	add
238	[BUG]  [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	5	1	add
239	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
240	[BUG]  [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  -=  WORD;  offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    -=    WORD;    offset  -=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
241	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  [CE]  ')'  expected  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,	  	non-compiled	[CE]  ')'  expected	9	None	add
242	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset	  	non-compiled	[CE]  ')'  expected	9	None	add
243	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	2	add
244	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(  buffer,  offset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	2	add
245	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer  [CE]  ')'  expected  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer	  	non-compiled	[CE]  ')'  expected	9	None	add
246	[BUG]  [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  DWORD;  offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    DWORD;    offset  +=  DWORD;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipEightByteInteger(buffer,  offset	  	non-compiled	[CE]  ')'  expected	9	None	add
247	[BUG]  [BUGGY]  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  buffer.append(diskStart).append('n');  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    buffer.append(diskStart).append('n');  offset  +=  length;	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
248	[BUG]  [BUGGY]  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  buffer.append(diskStart).append('  ');  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    buffer.append(diskStart).append('  ');  offset  +=  length;	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
249	[BUG]  [BUGGY]  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  buffer.append(diskStart).append('/');  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    buffer.append(diskStart).append('/');  offset  +=  length;	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
250	[BUG]  [BUGGY]  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  buffer.append(diskStart);  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    buffer.append(diskStart);  offset  +=  length;	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
251	[BUG]  [BUGGY]  offset  +=  length;  buffer.append('n');  offset  +=  length;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  buffer.append('n');  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    buffer.append('n');  offset  +=  length;	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
252	[BUG]  [BUGGY]  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  buffer.append(diskStart).append(length);  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    buffer.append(diskStart).append(length);  offset  +=  length;	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
253	[BUG]  [BUGGY]  offset  +=  length;  buffer.append(dialogStart);  offset  +=  length;  [CE]  cannot  find  symbol  dialogStart  [FE]                ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  offset  +=  length;  buffer.append(dialogStart);  offset  +=  length;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset    +=    length;    buffer.append(dialogStart);  offset  +=  length;	  	non-compiled	[CE]  cannot  find  symbol  dialogStart	2	None	add
254	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
255	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
256	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  WORD;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
257	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  0)  {  discStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
258	[BUG]  [BUGGY]  remaining  -=  WORD;  while(remaining  >  0.0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]            ZipException    [CONTEXT]    compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);    [BUGGY]  remaining  -=  WORD;  while(remaining  >  0.0)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining    -=    WORD;    while(remaining  >  0.0)  {  diskStart  =  new  ZipLong(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
