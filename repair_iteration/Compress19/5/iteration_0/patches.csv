bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  offset  +=  diskStart;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  diskStart;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskStart;	offset  +=  WORD;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
2	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  length;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  length;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
3	[BUG]  [BUGGY]  offset  +=  length;  [FE]  ZipException  [FE]      ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  length;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  length;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
4	[BUG]  [BUGGY]  offset  +=  discStart;  [CE]  cannot  find  symbol  discStart  [FE]        ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  discStart;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  discStart;	offset  +=  WORD;  	non-compiled	[CE]  cannot  find  symbol  discStart	9	None	replace
5	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  -=  WORD;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  -=  WORD;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
6	[BUG]  [BUGGY]  offset  -=  WORD;  [FE]  ZipException  [FE]          ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  -=  WORD;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  -=  WORD;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
7	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  remaining;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  remaining;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
8	[BUG]  [BUGGY]  offset  +=  remaining;  [FE]  ZipException  [FE]            ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  remaining;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  remaining;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
9	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  DWORD;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  DWORD;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
10	[BUG]  [BUGGY]  offset  +=  DWORD;  [FE]  ZipException  [FE]              ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  DWORD;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DWORD;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
11	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  2;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	offset  +=  2;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
12	[BUG]  [BUGGY]  offset  +=  2;  [FE]  ZipException  [FE]                ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  2;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  2;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
13	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	  	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
14	[BUG]  [BUGGY]    [FE]  ZipException  [FE]                  ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	  	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
15	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]    ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZE;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZE;	offset  +=  WORD;  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	9	None	replace
16	[BUG]  [BUGGY]  offset  +=  diskEnd;  [CE]  cannot  find  symbol  diskEnd  [FE]      ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  diskEnd;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  diskEnd;	offset  +=  WORD;  	non-compiled	[CE]  cannot  find  symbol  diskEnd	9	None	replace
17	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_FIRST;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_FIRST  [FE]        ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  DEFAULT_DECIMAL_FIRST;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_FIRST;	offset  +=  WORD;  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_FIRST	9	None	replace
18	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_STANDARD;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_STANDARD  [FE]          ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  DEFAULT_DECIMAL_STANDARD;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_STANDARD;	offset  +=  WORD;  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_STANDARD	9	None	replace
19	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG  [FE]    ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG;	offset  +=  WORD;  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_MUST_HAVE_BOTH_SIZES_MSG	9	None	replace
20	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  remaining  -=  WORD;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	remaining  -=  WORD;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
21	[BUG]  [BUGGY]  remaining  -=  WORD;  [FE]  ZipException  [FE]      ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  remaining  -=  WORD;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	remaining  -=  WORD;	offset  +=  WORD;  	compilable	  [FE]  ZipException  	9	1	replace
22	[BUG]  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]        ZipException  [CONTEXT]  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]  offset  +=  DEFAULT_DECIMAL_SIZES_MSG;  [BUGGY]  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	offset  +=  DEFAULT_DECIMAL_SIZES_MSG;	offset  +=  WORD;  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	9	None	replace
