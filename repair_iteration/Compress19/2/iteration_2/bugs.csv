bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	        if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	11	1	add
2	[BUG]  [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	        if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	11	1	add
3	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	        if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	11	1	add
4	[BUG]  [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	        if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }	  	compilable	  [FE]  ZipException  	11	1	add
5	[BUG]  [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer.append(relativeHeaderOffset);  }  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer.append(relativeHeaderOffset);  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	        if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer.append(relativeHeaderOffset);  }	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
6	[BUG]  [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer.append(relativeHeaderOffset);  }  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer.append(relativeHeaderOffset);  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	        if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer.append(relativeHeaderOffset);  }	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
7	[BUG]  [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  relativeHeaderOffset.add(relativeHeaderOffset);  }  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  relativeHeaderOffset.add(relativeHeaderOffset);  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	        if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  relativeHeaderOffset.add(relativeHeaderOffset);  }	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
8	[BUG]  [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  relativeHeaderOffset.add(relativeHeaderOffset);  }  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  relativeHeaderOffset.add(relativeHeaderOffset);  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	        if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  relativeHeaderOffset.add(relativeHeaderOffset);  }	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
9	[BUG]  [BUGGY]      if(relativeHeaderOffset!=  null)  {  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset!=  null)  {  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	        if(relativeHeaderOffset!=  null)  {  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  incompatible  types	11	None	add
10	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  return;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	        if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  return;  }	  	compilable	  [FE]  ZipException  	11	1	add
11	[BUG]  [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  return;  }  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  return;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	        if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  return;  }	  	compilable	  [FE]  ZipException  	11	1	add
12	[BUG]  [BUGGY]  offset  +=  READER_ID;  [CE]  cannot  find  symbol  READER_ID  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  READER_ID;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  READER_ID;	  offset    +=    RELATIVE_HeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  READER_ID	16	None	replace
13	[BUG]  [BUGGY]  offset  +=  RELATIVE_WORD;  [CE]  cannot  find  symbol  RELATIVE_WORD  [FE]                ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  RELATIVE_WORD;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  RELATIVE_WORD;	  offset    +=    RELATIVE_HeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_WORD	16	None	replace
14	[BUG]  [BUGGY]  offset  +=  RELATIVE_HEADER_ID;  [CE]  cannot  find  symbol  RELATIVE_HEADER_ID  [FE]                  ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  RELATIVE_HEADER_ID;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  RELATIVE_HEADER_ID;	  offset    +=    RELATIVE_HeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HEADER_ID	16	None	replace
15	[BUG]  [BUGGY]  offset  +=  relativeHeaderOffset.length;  [CE]  cannot  find  symbol  length  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  relativeHeaderOffset.length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  relativeHeaderOffset.length;	  offset    +=    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  length	13	None	replace
16	[BUG]  [BUGGY]  offset  +=  RelativeHeaderOffset.MAX_VALUE;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  RelativeHeaderOffset.MAX_VALUE;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  RelativeHeaderOffset.MAX_VALUE;	  offset    +=    RelativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
17	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  -=  remaining;	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
18	[BUG]  [BUGGY]  offset  -=  remaining;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  -=  remaining;	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
19	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  2;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  -=  2;	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
20	[BUG]  [BUGGY]  offset  -=  2;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  2;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  -=  2;	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
21	[BUG]  [BUGGY]  offset  -=  RelativeHeaderOffset;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  RelativeHeaderOffset;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  -=  RelativeHeaderOffset;	  offset    -=    DWORD;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	5	None	replace
22	[BUG]  [BUGGY]  offset  -=  RELATIVE_SIZE;  [CE]  cannot  find  symbol  RELATIVE_SIZE  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  RELATIVE_SIZE;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  -=  RELATIVE_SIZE;	  offset    -=    DWORD;    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_SIZE	5	None	replace
23	[BUG]  [BUGGY]  offset  -=  RelativeHeaderOffset.DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  RelativeHeaderOffset.DEFAULT_DECEMBER;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  -=  RelativeHeaderOffset.DEFAULT_DECEMBER;	  offset    -=    DWORD;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	5	None	replace
24	[BUG]  [BUGGY]  offset  -=  RelativeHeaderOffset.DEFAULT_SIZE;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  RelativeHeaderOffset.DEFAULT_SIZE;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  -=  RelativeHeaderOffset.DEFAULT_SIZE;	  offset    -=    DWORD;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	5	None	replace
25	[BUG]  [BUGGY]  offset  -=  RelativeHeaderOffset.DEFAULT;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  RelativeHeaderOffset.DEFAULT;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  -=  RelativeHeaderOffset.DEFAULT;	  offset    -=    DWORD;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	5	None	replace
26	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  1;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  1;	  offset    +=    2;    	compilable	  [FE]  ZipException  	7	1	replace
27	[BUG]  [BUGGY]  offset  +=  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  1;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  1;	  offset    +=    2;    	compilable	  [FE]  ZipException  	7	1	replace
28	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  0;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  0;	  offset    +=    2;    	compilable	  [FE]  ZipException  	7	1	replace
29	[BUG]  [BUGGY]  offset  +=  0;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  0;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  0;	  offset    +=    2;    	compilable	  [FE]  ZipException  	7	1	replace
30	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2  *  DWORD;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  2  *  DWORD;	  offset    +=    2;    	compilable	  [FE]  ZipException  	7	1	replace
31	[BUG]  [BUGGY]  offset  +=  2  *  DWORD;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2  *  DWORD;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  2  *  DWORD;	  offset    +=    2;    	compilable	  [FE]  ZipException  	7	1	replace
32	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  3;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  3;	  offset    +=    2;    	compilable	  [FE]  ZipException  	7	1	replace
33	[BUG]  [BUGGY]  offset  +=  3;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  3;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  3;	  offset    +=    2;    	compilable	  [FE]  ZipException  	7	1	replace
34	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -  1;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  length  -  1;	  offset    +=    length;    	compilable	  [FE]  ZipException  	9	1	replace
35	[BUG]  [BUGGY]  offset  +=  length  -  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -  1;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  length  -  1;	  offset    +=    length;    	compilable	  [FE]  ZipException  	9	1	replace
36	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -  2;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  length  -  2;	  offset    +=    length;    	compilable	  [FE]  ZipException  	9	1	replace
37	[BUG]  [BUGGY]  offset  +=  length  -  2;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -  2;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  length  -  2;	  offset    +=    length;    	compilable	  [FE]  ZipException  	9	1	replace
38	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -  remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  length  -  remaining;	  offset    +=    length;    	compilable	  [FE]  ZipException  	9	1	replace
39	[BUG]  [BUGGY]  offset  +=  length  -  remaining;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -  remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  length  -  remaining;	  offset    +=    length;    	compilable	  [FE]  ZipException  	9	1	replace
40	[BUG]  [BUGGY]  offset  +=  HEADER_ID;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  HEADER_ID;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  HEADER_ID;	  offset    +=    RELATIVE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
41	[BUG]  [BUGGY]  offset  +=  size;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  size;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  size;	  offset    +=    RELATIVE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
42	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    length;    offset  +=  length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	add
43	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    offset  +=  length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	add
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	add
45	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	add
46	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	add
47	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	add
48	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  HEADER_ID;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  HEADER_ID;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  HEADER_ID;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	8	None	add
49	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  size;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  size;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    offset  +=  length;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  size;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	8	None	add
50	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    2;    offset  +=  2;	  	compilable	  [FE]  ZipException  	6	1	add
51	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  +=  2;	  	compilable	  [FE]  ZipException  	6	1	add
52	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	6	1	add
53	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	6	1	add
54	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	6	1	add
55	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	6	1	add
56	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    2;    offset  +=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	6	1	add
57	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  +=  2;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	6	1	add
58	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [CE]  illegal  start  of  type  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  +=  2;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	non-compiled	[CE]  illegal  start  of  type	6	None	add
59	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    2;    offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	6	1	add
60	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	6	1	add
61	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                  ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG.length;    	non-compiled	[CE]  ';'  expected	10	None	replace
62	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.remaining;  [CE]  cannot  find  symbol  remaining  [FE]                    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.remaining;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG.length;    	non-compiled	[CE]  cannot  find  symbol  remaining	10	None	replace
63	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.substring(remaining);  [CE]  inconvertible  types  [FE]                      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.substring(remaining);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.substring(remaining);	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG.length;    	non-compiled	[CE]  inconvertible  types	10	None	replace
64	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.length();  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.length();	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
65	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.length();  [FE]  ArrayIndexOutOfBoundsException  [FE]                        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.length();  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.length();	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
66	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG+remaining;  [CE]  inconvertible  types  [FE]                          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG+remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG+remaining;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG.length;    	non-compiled	[CE]  inconvertible  types	10	None	replace
67	[BUG]  [BUGGY]  offset  +=  DWORD  +  compressedSize;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD  +  compressedSize;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD  +  compressedSize;	  offset    +=    DWORD    +    relativeHeaderOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	17	None	replace
68	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD  +  remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  DWORD  +  remaining;	  offset    +=    DWORD    +    relativeHeaderOffset;    	compilable	  [FE]  ZipException  	17	1	replace
69	[BUG]  [BUGGY]  offset  +=  DWORD  +  remaining;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD  +  remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD  +  remaining;	  offset    +=    DWORD    +    relativeHeaderOffset;    	compilable	  [FE]  ZipException  	17	1	replace
70	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD  +  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  DWORD  +  length;	  offset    +=    DWORD    +    relativeHeaderOffset;    	compilable	  [FE]  ZipException  	17	1	replace
71	[BUG]  [BUGGY]  offset  +=  DWORD  +  length;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD  +  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD  +  length;	  offset    +=    DWORD    +    relativeHeaderOffset;    	compilable	  [FE]  ZipException  	17	1	replace
72	[BUG]  [BUGGY]  offset  +=  DWORD  +  fileHeaderOffset;  [CE]  cannot  find  symbol  fileHeaderOffset  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD  +  fileHeaderOffset;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD  +  fileHeaderOffset;	  offset    +=    DWORD    +    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  fileHeaderOffset	17	None	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD  +  buffer.length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  DWORD  +  buffer.length;	  offset    +=    DWORD    +    relativeHeaderOffset;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	replace
74	[BUG]  [BUGGY]  offset  +=  DWORD  +  buffer.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]                ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD  +  buffer.length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD  +  buffer.length;	  offset    +=    DWORD    +    relativeHeaderOffset;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	replace
75	[BUG]  [BUGGY]  offset  +=  DWORD  +  size;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD  +  size;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD  +  size;	  offset    +=    DWORD    +    relativeHeaderOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	17	None	replace
76	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining  -  1;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  remaining  -  1;	  offset    +=    remaining;    	compilable	  [FE]  ZipException  	2	1	replace
77	[BUG]  [BUGGY]  offset  +=  remaining  -  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining  -  1;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  remaining  -  1;	  offset    +=    remaining;    	compilable	  [FE]  ZipException  	2	1	replace
78	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  WORD;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  WORD;	  offset    +=    remaining;    	compilable	  [FE]  ZipException  	2	1	replace
79	[BUG]  [BUGGY]  offset  +=  WORD;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  WORD;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  WORD;	  offset    +=    remaining;    	compilable	  [FE]  ZipException  	2	1	replace
80	[BUG]  [BUGGY]  offset  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	3	None	replace
81	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  relativeHeaderOffset;  [CE]  inconvertible  types  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  relativeHeaderOffset;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  relativeHeaderOffset;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  inconvertible  types	3	None	replace
82	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  length;  [CE]  inconvertible  types  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  length;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  inconvertible  types	3	None	replace
83	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    -=    DWORD;    offset  -=  DWORD;	  	compilable	  [FE]  ZipException  	4	1	add
84	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;	  	compilable	  [FE]  ZipException  	4	1	add
85	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  type  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
86	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  type  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
87	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	4	1	add
88	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	compilable	  [FE]  ZipException  	4	1	add
89	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  }  else  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
90	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  type  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
91	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  }  else  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
92	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  illegal  start  of  type  [FE]                  ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  }  else  if(remaining  ==  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
93	[BUG]  [BUGGY]  offset  +=  DWORD,  remaining;  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD,  remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD,  remaining;	  offset    +=    DWORD,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	18	None	replace
94	[BUG]  [BUGGY]  offset  +=  remaining,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining,  relativeHeaderOffset;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  remaining,  relativeHeaderOffset;	  offset    +=    DWORD,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	18	None	replace
95	[BUG]  [BUGGY]  offset  +=  DWORD,  compressedSize;  [CE]  ';'  expected  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD,  compressedSize;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD,  compressedSize;	  offset    +=    DWORD,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	18	None	replace
96	[BUG]  [BUGGY]  offset  +=  rest,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  rest,  relativeHeaderOffset;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  rest,  relativeHeaderOffset;	  offset    +=    DWORD,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	18	None	replace
97	[BUG]  [BUGGY]  offset  +=  length,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                  ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length,  relativeHeaderOffset;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  length,  relativeHeaderOffset;	  offset    +=    DWORD,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	18	None	replace
98	[BUG]  [BUGGY]  offset  +=  DWORD,  compressionSize;  [CE]  ';'  expected  [FE]                    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD,  compressionSize;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD,  compressionSize;	  offset    +=    DWORD,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	18	None	replace
99	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    remaining;    offset  +=  remaining;	  	compilable	  [FE]  ZipException  	1	1	add
100	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    remaining;    offset  +=  remaining;	  	compilable	  [FE]  ZipException  	1	1	add
101	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	1	1	add
102	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	1	1	add
103	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	1	1	add
104	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	1	1	add
105	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	1	1	add
106	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	1	1	add
107	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	1	1	add
108	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	1	1	add
109	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    remaining;    offset  +=  remaining;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	1	1	add
110	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  <  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	compilable	  [FE]  ZipException  	1	1	add
111	[BUG]  [BUGGY]  RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
112	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	12	1	replace
113	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	12	1	replace
114	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	12	1	replace
115	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	12	1	replace
116	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	12	1	replace
117	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	12	1	replace
118	[BUG]  [BUGGY]  offset  +=  DWORD  +  diskStart;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD  +  diskStart;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD  +  diskStart;	  offset    +=    DWORD    +    relativeHeaderOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	17	None	replace
119	[BUG]  [BUGGY]  offset  +=  DWORD  +  fileStart;  [CE]  cannot  find  symbol  fileStart  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD  +  fileStart;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD  +  fileStart;	  offset    +=    DWORD    +    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  fileStart	17	None	replace
120	[BUG]  [BUGGY]  offset  +=  2  *  relativeHeaderOffset;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2  *  relativeHeaderOffset;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  2  *  relativeHeaderOffset;	  offset    +=    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	7	None	replace
121	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	4	None	add
122	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  0,  length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  0,  length);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  0,  length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	4	None	add
123	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  System.arraycopy(buffer,  offset,  relativeHeaderOffset,  0,  length);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    -=    DWORD;    offset  -=  DWORD;  System.arraycopy(buffer,  offset,  relativeHeaderOffset,  0,  length);	  	compilable	  [FE]  ArrayStoreException  	4	1	add
124	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  System.arraycopy(buffer,  offset,  relativeHeaderOffset,  0,  length);  [FE]  ArrayStoreException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  System.arraycopy(buffer,  offset,  relativeHeaderOffset,  0,  length);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  System.arraycopy(buffer,  offset,  relativeHeaderOffset,  0,  length);	  	compilable	  [FE]  ArrayStoreException  	4	1	add
125	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    -=    DWORD;    offset  -=  DWORD;  this.diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	4	1	add
126	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.diskStart  =  new  ZipLong(buffer,  offset);  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.diskStart  =  new  ZipLong(buffer,  offset);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.diskStart  =  new  ZipLong(buffer,  offset);	  	compilable	  [FE]  ZipException  	4	1	add
127	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    length;    offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	add
128	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    offset  +=  length;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	add
129	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  illegal  start  of  type  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
130	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [CE]  illegal  start  of  type  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    offset  +=  length;  }  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
131	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	add
132	[BUG]  [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    offset  +=  length;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	add
133	[BUG]  [BUGGY]  offset  +=  relativeHeaderOffset.intValue();  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  relativeHeaderOffset.intValue();  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  relativeHeaderOffset.intValue();	  offset    +=    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
134	[BUG]  [BUGGY]  offset  +=  relativeHeaderOffset.toCharArray();  [CE]  cannot  find  symbol  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  relativeHeaderOffset.toCharArray();  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  relativeHeaderOffset.toCharArray();	  offset    +=    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
135	[BUG]  [BUGGY]  offset  +=  RelativeHeaderOffset.DEFAULT;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  RelativeHeaderOffset.DEFAULT;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  RelativeHeaderOffset.DEFAULT;	  offset    +=    RelativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
136	[BUG]  [BUGGY]  offset  +=  RelativeHeaderOffset.DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  RelativeHeaderOffset.DEFAULT_DECEMBER;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  RelativeHeaderOffset.DEFAULT_DECEMBER;	  offset    +=    RelativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
137	[BUG]  [BUGGY]  offset  +=  RelativeHeaderOffset.DEFAULT_SIZE;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  RelativeHeaderOffset.DEFAULT_SIZE;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  RelativeHeaderOffset.DEFAULT_SIZE;	  offset    +=    RelativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
138	[BUG]  [BUGGY]  offset  +=  RelativeHeaderOffset.LEFT;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  RelativeHeaderOffset.LEFT;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  RelativeHeaderOffset.LEFT;	  offset    +=    RelativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
139	[BUG]  [BUGGY]  offset  +=  rest;  [CE]  cannot  find  symbol  rest  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  rest;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  rest;	  offset    +=    RELATIVE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  rest	15	None	replace
140	[BUG]  [BUGGY]  offset  +=  RelativeHeaderOffset.LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  RelativeHeaderOffset.LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  RelativeHeaderOffset.LFH_MUST_HAVE_BOTH_SIZES_MSG;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	3	None	replace
141	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.toLowerCase();  [CE]  inconvertible  types  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.toLowerCase();  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.toLowerCase();	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  inconvertible  types	3	None	replace
142	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.trim();  [CE]  inconvertible  types  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.trim();  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.trim();	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  inconvertible  types	3	None	replace
143	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [CE]  illegal  start  of  type  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    remaining;    offset  +=  remaining;  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
144	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if  (remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    remaining;    offset  +=  remaining;  }  if  (remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	1	1	add
145	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if  (remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  }  if  (remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    remaining;    offset  +=  remaining;  }  if  (remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  remaining;	  	compilable	  [FE]  ZipException  	1	1	add
146	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    2;    offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	6	1	add
147	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2;  }	  	compilable	  [FE]  ZipException  	6	1	add
148	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  +=  2;RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	6	None	add
149	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }	  	compilable	  [FE]  ZipException  	6	1	add
150	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  +=  2;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  1;  }	  	compilable	  [FE]  ZipException  	6	1	add
151	[BUG]  [BUGGY]  offset  -=  relativeHeaderOffset;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  relativeHeaderOffset;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  -=  relativeHeaderOffset;	  offset    -=    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	5	None	replace
152	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.relativeHeaderOffset;  [CE]  cannot  find  symbol  relativeHeaderOffset  [FE]                  ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.relativeHeaderOffset;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.relativeHeaderOffset;	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG.length;    	non-compiled	[CE]  cannot  find  symbol  relativeHeaderOffset	10	None	replace
153	[BUG]  [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_BOTH_SIZES_MSG;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_BOTH_SIZES_MSG;	  offset    +=    RELATIVE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_BOTH_SIZES_MSG	15	None	replace
154	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSGS;  [CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES_MSGS  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSGS;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSGS;	  offset    +=    RELATIVE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES_MSGS	15	None	replace
155	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSGE;  [CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES_MSGE  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSGE;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSGE;	  offset    +=    RELATIVE_HeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_HAVE_BOTH_SIZES_MSGE	16	None	replace
156	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  -=  2;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    2;    offset  -=  2;	  	compilable	  [FE]  ZipException  	6	1	add
157	[BUG]  [BUGGY]  offset  +=  2;  offset  -=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  -=  2;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  -=  2;	  	compilable	  [FE]  ZipException  	6	1	add
158	[BUG]  [BUGGY]  offset  +=  2;  buffer  +=  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  buffer  +=  2;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    buffer  +=  2;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	6	None	add
159	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  3;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    2;    offset  +=  3;	  	compilable	  [FE]  ZipException  	6	1	add
160	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  3;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  3;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  +=  3;	  	compilable	  [FE]  ZipException  	6	1	add
161	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  1;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    2;    offset  +=  1;	  	compilable	  [FE]  ZipException  	6	1	add
162	[BUG]  [BUGGY]  offset  +=  2;  offset  +=  1;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  +=  1;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  +=  1;	  	compilable	  [FE]  ZipException  	6	1	add
163	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  =  2;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    2;    offset  =  2;	  	compilable	  [FE]  ZipException  	6	1	add
164	[BUG]  [BUGGY]  offset  +=  2;  offset  =  2;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  2;  offset  =  2;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    2;    offset  =  2;	  	compilable	  [FE]  ZipException  	6	1	add
165	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;	  	compilable	  [FE]  ZipException  	4	1	add
166	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;	  	compilable	  [FE]  ZipException  	4	1	add
167	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	compilable	  [FE]  ZipException  	4	1	add
168	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2  *  DWORD);	  	compilable	  [FE]  ZipException  	4	1	add
169	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	compilable	  [FE]  ZipException  	4	1	add
170	[BUG]  [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  DWORD;  offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    -=    DWORD;    offset  -=  DWORD;  this.relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);	  	compilable	  [FE]  ZipException  	4	1	add
171	[BUG]  [BUGGY]  offset  +=  DWORD,  compressionHeaderOffset;  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  DWORD,  compressionHeaderOffset;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  DWORD,  compressionHeaderOffset;	  offset    +=    DWORD,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	18	None	replace
172	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer  =  new  ZipLong(buffer,  offset);  }  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer  =  new  ZipLong(buffer,  offset);  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer  =  new  ZipLong(buffer,  offset);  }	      	non-compiled	[CE]  incompatible  types	12	None	replace
173	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	12	1	replace
174	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  +=  DWORD;  }	      	compilable	  [FE]  ZipException  	12	1	replace
175	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer  +=  length;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer  +=  length;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer  +=  length;  }	      	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	12	None	replace
176	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  return;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  return;  }	      	compilable	  [FE]  ZipException  	12	1	replace
177	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  return;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  return;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  return;  }	      	compilable	  [FE]  ZipException  	12	1	replace
178	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -  2  *  DWORD;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  length  -  2  *  DWORD;	  offset    +=    length;    	compilable	  [FE]  ZipException  	9	1	replace
179	[BUG]  [BUGGY]  offset  +=  length  -  2  *  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -  2  *  DWORD;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  length  -  2  *  DWORD;	  offset    +=    length;    	compilable	  [FE]  ZipException  	9	1	replace
180	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -(remaining  *  DWORD);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  length  -(remaining  *  DWORD);	  offset    +=    length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
181	[BUG]  [BUGGY]  offset  +=  length  -(remaining  *  DWORD);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -(remaining  *  DWORD);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  length  -(remaining  *  DWORD);	  offset    +=    length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
182	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -(remaining  -  DWORD);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  +=  length  -(remaining  -  DWORD);	  offset    +=    length;    	compilable	  [FE]  ZipException  	9	1	replace
183	[BUG]  [BUGGY]  offset  +=  length  -(remaining  -  DWORD);  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length  -(remaining  -  DWORD);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  length  -(remaining  -  DWORD);	  offset    +=    length;    	compilable	  [FE]  ZipException  	9	1	replace
184	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
185	[BUG]  [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  remaining;  offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    remaining;    offset  +=  remaining;  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  length;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
186	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.toString();  [CE]  inconvertible  types  [FE]                  ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.toString();  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG.toString();	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG.length;    	non-compiled	[CE]  inconvertible  types	10	None	replace
187	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	offset  -=  length;	  offset    -=    DWORD;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
188	[BUG]  [BUGGY]  offset  -=  length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  -=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  -=  length;	  offset    -=    DWORD;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
189	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
190	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
191	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(remaining  <  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	if(remaining  <  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
192	[BUG]  [BUGGY]  if(remaining  <  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(remaining  <  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(remaining  <  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
193	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(remaining  >=  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	if(remaining  >=  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
194	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(remaining  >=  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(remaining  >=  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
195	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
196	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
197	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
198	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	if(remaining  >  DWORD)  {  offset  -=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  }	  offset    -=    DWORD;    	compilable	  [FE]  ZipException  	5	1	replace
199	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);	  offset    +=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  ';'  expected	3	None	replace
200	[BUG]  [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer.append(RelativeHeaderOffset.toString());  }  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer.append(RelativeHeaderOffset.toString());  }  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	        if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  }  else  {  buffer.append(RelativeHeaderOffset.toString());  }	  	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	11	None	add
201	[BUG]  [BUGGY]  offset  +=  RelativeHeaderOffset.HEADER_ID;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  RelativeHeaderOffset.HEADER_ID;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  RelativeHeaderOffset.HEADER_ID;	  offset    +=    RelativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
202	[BUG]  [BUGGY]  offset  +=  RelativeHeaderOffset.RELATIVE;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  RelativeHeaderOffset.RELATIVE;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset  +=  RelativeHeaderOffset.RELATIVE;	  offset    +=    RelativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	14	None	replace
203	[BUG]  [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset);  offset  +=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]    ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset);  offset  +=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    int  length  =  relativeHeaderOffset.computeLength(buffer,  offset);  offset  +=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	8	None	add
204	[BUG]  [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  offset  +=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]      ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  offset  +=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  offset  +=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	8	None	add
205	[BUG]  [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  offset  +=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  offset  +=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  offset  +=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	8	None	add
206	[BUG]  [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.computeLength(buffer);  offset  +=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.computeLength(buffer);  offset  +=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    int  length  =  relativeHeaderOffset.computeLength(buffer);  offset  +=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	8	None	add
207	[BUG]  [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.indexOf('  ');  offset  +=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.indexOf('  ');  offset  +=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    int  length  =  relativeHeaderOffset.indexOf('  ');  offset  +=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	8	None	add
208	[BUG]  [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.computeValue(buffer);  offset  +=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.computeValue(buffer);  offset  +=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    int  length  =  relativeHeaderOffset.computeValue(buffer);  offset  +=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	8	None	add
209	[BUG]  [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.computeLength();  offset  +=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException    [CONTEXT]    if  (length  <  2  *  DWORD)  {  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);    [BUGGY]  offset  +=  length;  int  length  =  relativeHeaderOffset.computeLength();  offset  +=  length;  [BUGGY]    remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	offset    +=    length;    int  length  =  relativeHeaderOffset.computeLength();  offset  +=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	8	None	add
