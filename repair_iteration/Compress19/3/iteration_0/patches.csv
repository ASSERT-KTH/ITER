bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  2;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  2;	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
2	[BUG]  [BUGGY]  remaining  -=  2;  [FE]  ZipException  [FE]    ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  2;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
3	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  length;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length;	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
4	[BUG]  [BUGGY]  remaining  -=  length;  [FE]  ZipException  [FE]      ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  length;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
5	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]        ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;	remaining  -=  DWORD;  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	5	None	replace
6	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  WORD;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  WORD;	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
7	[BUG]  [BUGGY]  remaining  -=  WORD;  [FE]  ZipException  [FE]          ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  WORD;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
8	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]            ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;	remaining  -=  DWORD;  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	5	None	replace
9	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]              ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE;	remaining  -=  DWORD;  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	5	None	replace
10	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  1;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  1;	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
11	[BUG]  [BUGGY]  remaining  -=  1;  [FE]  ZipException  [FE]                ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  1;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
12	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]    [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	  	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
13	[BUG]  [BUGGY]    [FE]  ZipException  [FE]                  ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]    [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	  	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
14	[BUG]  [BUGGY]  remaining  -=  relativeHeaderOffset;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  relativeHeaderOffset;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  relativeHeaderOffset;	remaining  -=  DWORD;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	5	None	replace
15	[BUG]  [BUGGY]  remaining  -=  RELATIVE_SIZE;  [CE]  cannot  find  symbol  RELATIVE_SIZE  [FE]      ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  RELATIVE_SIZE;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RELATIVE_SIZE;	remaining  -=  DWORD;  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_SIZE	5	None	replace
16	[BUG]  [BUGGY]  remaining  -=  READER_ID;  [CE]  cannot  find  symbol  READER_ID  [FE]        ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  READER_ID;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  READER_ID;	remaining  -=  DWORD;  	non-compiled	[CE]  cannot  find  symbol  READER_ID	5	None	replace
17	[BUG]  [BUGGY]  remaining  -=  RELATIVE_HeaderOffset;  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]          ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  RELATIVE_HeaderOffset;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RELATIVE_HeaderOffset;	remaining  -=  DWORD;  	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	5	None	replace
18	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  0;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  0;	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
19	[BUG]  [BUGGY]  remaining  -=  0;  [FE]  ZipException  [FE]    ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  0;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;	remaining  -=  DWORD;  	compilable	  [FE]  ZipException  	5	1	replace
20	[BUG]  [BUGGY]  remaining  -=  size;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      ZipException  [CONTEXT]  throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]  remaining  -=  size;  [BUGGY]  }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  size;	remaining  -=  DWORD;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	5	None	replace
