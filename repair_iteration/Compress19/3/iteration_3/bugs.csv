bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_WORD  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_WORD  +  1;	  remaining    -=    DEFAULT_DECIMAL_WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_WORD	160	None	replace
2	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_HEADER_ID;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_HEADER_ID  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_HEADER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_HEADER_ID;	  remaining    -=    DEFAULT_DECIMAL_WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_HEADER_ID	160	None	replace
3	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD  +  2;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_WORD  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_WORD  +  2;	  remaining    -=    DEFAULT_DECIMAL_WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_WORD	160	None	replace
4	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  offset  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  1;  offset  -=  1;	  remaining    -=    1;    remainder    -=    1;    	compilable	  [FE]  ZipException  	148	1	replace
5	[BUG]  [BUGGY]  remaining  -=  1;  offset  -=  1;  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  offset  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  offset  -=  1;	  remaining    -=    1;    remainder    -=    1;    	compilable	  [FE]  ZipException  	148	1	replace
6	[BUG]  [BUGGY]  remaining  -=  1;  relativeHeaderOffset  -=  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  relativeHeaderOffset  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  relativeHeaderOffset  -=  1;	  remaining    -=    1;    remainder    -=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	148	None	replace
7	[BUG]  [BUGGY]  remaining  -=  1;  size  -=  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  size  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  size  -=  1;	  remaining    -=    1;    remainder    -=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	148	None	replace
8	[BUG]  [BUGGY]  remaining  -=  1;  diskStart  -=  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  diskStart  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  diskStart  -=  1;	  remaining    -=    1;    remainder    -=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	148	None	replace
9	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  0;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  T>  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    T>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	92	None	replace
10	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  T>  remaining  -=  1;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  T>  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  T>  remaining  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    <    T>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	92	None	replace
11	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  1;  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  T>  remaining  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    <    T>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	92	None	replace
12	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  T>  remaining  -=  2;  [CE]  ';'  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  T>  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  T>  remaining  -=  2;	  remaining    -=    0;    RelativeHeaderOffset    <    T>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	92	None	replace
13	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  T>  remaining  -=  1;  [CE]  ';'  expected  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  T>  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  T>  remaining  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    <    T>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	92	None	replace
14	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  remaining  -=  DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  remaining  -=  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  remaining  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    remainder    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	133	None	replace
15	[BUG]  [BUGGY]  remaining  -=  WORD;  diskStart  -=  WORD;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  diskStart  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  diskStart  -=  WORD;	  remaining    -=    WORD;    remainder    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	133	None	replace
16	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  remaining  -=  DEFAULT_DECEMBER_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  remaining  -=  DEFAULT_DECEMBER_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE;  remaining  -=  DEFAULT_DECEMBER_SIZE;	  remaining    -=    WORD;    remainder    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	133	None	replace
17	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  offset  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  WORD;  offset  -=  WORD;	  remaining    -=    WORD;    remainder    -=    WORD;    	compilable	  [FE]  ZipException  	133	1	replace
18	[BUG]  [BUGGY]  remaining  -=  WORD;  offset  -=  WORD;  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  offset  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  offset  -=  WORD;	  remaining    -=    WORD;    remainder    -=    WORD;    	compilable	  [FE]  ZipException  	133	1	replace
19	[BUG]  [BUGGY]  remaining  -=  length;  remainder  -=  WORD;  [CE]  cannot  find  symbol  remainder  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  remainder  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  remainder  -=  WORD;	  remaining    -=    WORD;    remainder    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  remainder	133	None	replace
20	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_ID;  remaining  -=  DEFAULT_DECEMBER_ID;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_ID  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_ID;  remaining  -=  DEFAULT_DECEMBER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_ID;  remaining  -=  DEFAULT_DECEMBER_ID;	  remaining    -=    WORD;    remainder    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_ID	133	None	replace
21	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    offset;    remaining  -=  offset;	  	compilable	  [FE]  ZipException  	48	1	add
22	[BUG]  [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    remaining  -=  offset;	  	compilable	  [FE]  ZipException  	48	1	add
23	[BUG]  [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.length();  remaining  -=  offset;  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.length();  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    int  offset  =  relativeHeaderOffset.length();  remaining  -=  offset;	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	48	None	add
24	[BUG]  [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.intValue();  remaining  -=  offset;  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.intValue();  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    int  offset  =  relativeHeaderOffset.intValue();  remaining  -=  offset;	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	48	None	add
25	[BUG]  [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  offset;  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    int  offset  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  offset;	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	48	None	add
26	[BUG]  [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf(':');  remaining  -=  offset;  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf(':');  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    int  offset  =  relativeHeaderOffset.indexOf(':');  remaining  -=  offset;	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	48	None	add
27	[BUG]  [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.compareTo(remaining);  remaining  -=  offset;  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.compareTo(remaining);  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    int  offset  =  relativeHeaderOffset.compareTo(remaining);  remaining  -=  offset;	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	48	None	add
28	[BUG]  [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  offset;  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    int  offset  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  offset;	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	48	None	add
29	[BUG]  [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.doubleValue();  remaining  -=  offset;  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.doubleValue();  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    int  offset  =  relativeHeaderOffset.doubleValue();  remaining  -=  offset;	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	48	None	add
30	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  *  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  *  2;	  remaining    -=    DEFAULT_DECIMAL_SIZE    *    2;    	compilable	  [FE]  ZipException  	33	1	replace
31	[BUG]  [BUGGY]  remaining  -=  length  *  2;  [FE]  ZipException  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  *  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  *  2;	  remaining    -=    DEFAULT_DECIMAL_SIZE    *    2;    	compilable	  [FE]  ZipException  	33	1	replace
32	[BUG]  [BUGGY]  remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  *  2;  [CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  *  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  *  2;	  remaining    -=    DEFAULT_DECIMAL_SIZE    *    2;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG	33	None	replace
33	[BUG]  [BUGGY]  remaining  -=  size  *  2;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  size  *  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  size  *  2;	  remaining    -=    DEFAULT_DECIMAL_SIZE    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	33	None	replace
34	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  *  4;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  *  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE  *  4;	  remaining    -=    DEFAULT_DECIMAL_SIZE    *    2;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	33	None	replace
35	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    2;    remaining  -=  2;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	17	1	add
36	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    2;    remaining  -=  2;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	17	1	add
37	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  2;  remainder  -=  2;  remaining  -=  2;  [CE]  cannot  find  symbol  remainder  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remainder  -=  2;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    2;    remainder  -=  2;  remaining  -=  2;	  	non-compiled	[CE]  cannot  find  symbol  remainder	17	None	add
38	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  2;  rest  -=  2;  remaining  -=  2;  [CE]  cannot  find  symbol  rest  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  rest  -=  2;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    2;    rest  -=  2;  remaining  -=  2;	  	non-compiled	[CE]  cannot  find  symbol  rest	17	None	add
39	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    2;    remaining  -=  2;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	17	1	add
40	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  1;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    2;    remaining  -=  2;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	17	1	add
41	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  2;  while  remaining  -=  2;  remaining  -=  2;  [CE]  '('  expected  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  while  remaining  -=  2;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    2;    while  remaining  -=  2;  remaining  -=  2;	  	non-compiled	[CE]  '('  expected	17	None	add
42	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    2;    remaining  -=  2;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	17	1	add
43	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  3;  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    2;    remaining  -=  2;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	17	1	add
44	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  2;  Rest  -=  2;  remaining  -=  2;  [CE]  cannot  find  symbol  Rest  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  Rest  -=  2;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    2;    Rest  -=  2;  remaining  -=  2;	  	non-compiled	[CE]  cannot  find  symbol  Rest	17	None	add
45	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    2;    remaining  -=  1;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	17	1	add
46	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  1;  remaining  -=  2;  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    2;    remaining  -=  1;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	17	1	add
47	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  remaining  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    length    -    1;    remaining  -=  length  -  1;	  	compilable	  [FE]  ZipException  	63	1	add
48	[BUG]  [BUGGY]  remaining  -=  length  -  1;  remaining  -=  length  -  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  remaining  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    remaining  -=  length  -  1;	  	compilable	  [FE]  ZipException  	63	1	add
49	[BUG]  [BUGGY]  remaining  -=  length  -  1;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length  -  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    int  length  =  relativeHeaderOffset.length();  remaining  -=  length  -  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	63	None	add
50	[BUG]  [BUGGY]  remaining  -=  length  -  1;  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  -  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  -  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	63	None	add
51	[BUG]  [BUGGY]  remaining  -=  length  -  1;  int  length  -=  length  -  1;  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  int  length  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    int  length  -=  length  -  1;	  	non-compiled	[CE]  ';'  expected	63	None	add
52	[BUG]  [BUGGY]  remaining  -=  length  -  1;  rest  -=  length  -  1;  [CE]  cannot  find  symbol  rest  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  rest  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    rest  -=  length  -  1;	  	non-compiled	[CE]  cannot  find  symbol  rest	63	None	add
53	[BUG]  [BUGGY]  remaining  -=  length  -  1;  int  length  =  relativeHeaderOffset.charAt(remaining  -  1);  remaining  -=  length  -  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  int  length  =  relativeHeaderOffset.charAt(remaining  -  1);  remaining  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    int  length  =  relativeHeaderOffset.charAt(remaining  -  1);  remaining  -=  length  -  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	63	None	add
54	[BUG]  [BUGGY]  remaining  -=  length  -  1;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  -  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  -  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	63	None	add
55	[BUG]  [BUGGY]  remaining  -=  length  -  1;  remainder  -=  length  -  1;  [CE]  cannot  find  symbol  remainder  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  remainder  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    remainder  -=  length  -  1;	  	non-compiled	[CE]  cannot  find  symbol  remainder	63	None	add
56	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOff    	non-compiled	[CE]  >  expected	22	None	replace
57	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)rel  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)rel  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)rel	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOff    	non-compiled	[CE]  >  expected	22	None	replace
58	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOff    	non-compiled	[CE]  >  expected	22	None	replace
59	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOff    	non-compiled	[CE]  >  expected	22	None	replace
60	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)rel  [CE]  >  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)rel  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)rel	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOff    	non-compiled	[CE]  >  expected	22	None	replace
61	[BUG]  [BUGGY]  remaining  -=  2;  relativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe  [CE]  >  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  relativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  relativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOff    	non-compiled	[CE]  >  expected	22	None	replace
62	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  remaining  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    length    -    2;    remaining  -=  length  -  2;	  	compilable	  [FE]  ZipException  	171	1	add
63	[BUG]  [BUGGY]  remaining  -=  length  -  2;  remaining  -=  length  -  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  remaining  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    remaining  -=  length  -  2;	  	compilable	  [FE]  ZipException  	171	1	add
64	[BUG]  [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length  -  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    int  length  =  relativeHeaderOffset.length();  remaining  -=  length  -  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	171	None	add
65	[BUG]  [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  -  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  -  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	171	None	add
66	[BUG]  [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  -  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  -  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	171	None	add
67	[BUG]  [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length  -  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length  -  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	171	None	add
68	[BUG]  [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length  -  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length  -  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	171	None	add
69	[BUG]  [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length  -  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length  -  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	171	None	add
70	[BUG]  [BUGGY]  remaining  -=  length  -  2;  remainder  -=  length  -  2;  [CE]  cannot  find  symbol  remainder  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  remainder  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    remainder  -=  length  -  2;	  	non-compiled	[CE]  cannot  find  symbol  remainder	171	None	add
71	[BUG]  [BUGGY]  remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  1;  [CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  1;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    1;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG	29	None	replace
72	[BUG]  [BUGGY]  remaining  -=  READER_ID  +  1;  [CE]  cannot  find  symbol  READER_ID  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  READER_ID  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  READER_ID  +  1;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    1;    	non-compiled	[CE]  cannot  find  symbol  READER_ID	29	None	replace
73	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  offset  +  1;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    1;    	compilable	  [FE]  ZipException  	29	1	replace
74	[BUG]  [BUGGY]  remaining  -=  offset  +  1;  [FE]  ZipException  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  offset  +  1;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    1;    	compilable	  [FE]  ZipException  	29	1	replace
75	[BUG]  [BUGGY]  remaining  -=  RELATIVE_DECIMAL_HeaderOffset;  [CE]  cannot  find  symbol  RELATIVE_DECIMAL_HeaderOffset  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RELATIVE_DECIMAL_HeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RELATIVE_DECIMAL_HeaderOffset;	  remaining    -=    DEFAULT_DECIMAL_HeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_DECIMAL_HeaderOffset	130	None	replace
76	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZES_MSG;	  remaining    -=    DEFAULT_DECIMAL_HeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES_MSG	130	None	replace
77	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    2;    remaining  -=  1;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	145	1	add
78	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  1;  remaining  -=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    2;    remaining  -=  1;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	145	1	add
79	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  2;  remainder  -=  1;  remaining  -=  2;  [CE]  cannot  find  symbol  remainder  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  remainder  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    2;    remainder  -=  1;  remaining  -=  2;	  	non-compiled	[CE]  cannot  find  symbol  remainder	145	None	add
80	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  2;  rest  -=  1;  remaining  -=  2;  [CE]  cannot  find  symbol  rest  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  rest  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    2;    rest  -=  1;  remaining  -=  2;	  	non-compiled	[CE]  cannot  find  symbol  rest	145	None	add
81	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  1;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    2;    remaining  -=  1;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	145	1	add
82	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  1;  remaining  -=  3;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  1;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    2;    remaining  -=  1;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	145	1	add
83	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  2;  Rest  -=  1;  remaining  -=  2;  [CE]  cannot  find  symbol  Rest  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  Rest  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    2;    Rest  -=  1;  remaining  -=  2;	  	non-compiled	[CE]  cannot  find  symbol  Rest	145	None	add
84	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  1;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    2;    remaining  -=  1;  remaining  -=  4;	  	compilable	  [FE]  ZipException  	145	1	add
85	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  1;  remaining  -=  4;  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  1;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    2;    remaining  -=  1;  remaining  -=  4;	  	compilable	  [FE]  ZipException  	145	1	add
86	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  1;  remaining  -=  2);  [CE]  ';'  expected  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  1;  remaining  -=  2);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    2;    remaining  -=  1;  remaining  -=  2);	  	non-compiled	[CE]  ';'  expected	145	None	add
87	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  2;  -=  1;  remaining  -=  2;  [CE]  illegal  start  of  expression  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    2;    -=  1;  remaining  -=  2;	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
88	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  10;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  10;	  remaining    -=    2;    remaining    -=    2;    	compilable	  [FE]  ZipException  	18	1	replace
89	[BUG]  [BUGGY]  remaining  -=  10;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  10;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  10;	  remaining    -=    2;    remaining    -=    2;    	compilable	  [FE]  ZipException  	18	1	replace
90	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  remaining  -=  DEFAULT_DECIMAL_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  remaining  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  remaining  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	138	None	replace
91	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  remaining  -=  DEFAULT_DECLARATION;  [CE]  cannot  find  symbol  DEFAULT_DECLARATION  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  remaining  -=  DEFAULT_DECLARATION;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECLARATION;  remaining  -=  DEFAULT_DECLARATION;	  remaining    -=    WORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECLARATION	138	None	replace
92	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL;  remaining  -=  DEFAULT_DECIMAL;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL;  remaining  -=  DEFAULT_DECIMAL;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL;  remaining  -=  DEFAULT_DECIMAL;	  remaining    -=    WORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL	138	None	replace
93	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset;  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset;    	non-compiled	[CE]  >  expected	24	None	replace
94	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOff  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOff  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOff	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset;    	non-compiled	[CE]  >  expected	24	None	replace
95	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [CE]  >  expected  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	161	None	replace
96	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_S  [CE]  >  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_S  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_S	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	161	None	replace
97	[BUG]  [BUGGY]  RelativeHeaderOffset  <  =  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [CE]  illegal  start  of  type  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  =  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  =  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
98	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	161	None	replace
99	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  1;  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	161	None	replace
100	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	161	None	replace
101	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	167	None	replace
102	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	167	None	replace
103	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	167	None	replace
104	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE  [CE]  >  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	167	None	replace
105	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE  [CE]  >  expected  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	167	None	replace
106	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	167	None	replace
107	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	57	None	replace
108	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	57	None	replace
109	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	57	None	replace
110	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >>  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >>  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >>  LFH_MUST_HAVE_BOTH	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	57	None	replace
111	[BUG]  [BUGGY]  remaining  -=  length  +  relativeHeaderOffset;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  relativeHeaderOffset;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    relativeHeaderOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	128	None	replace
112	[BUG]  [BUGGY]  remaining  -=  size  +  relativeHeaderOffset;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  size  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  size  +  relativeHeaderOffset;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    relativeHeaderOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	128	None	replace
113	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  compressedSize;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  compressedSize;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE  +  compressedSize;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	128	None	replace
114	[BUG]  [BUGGY]  remaining  -=  offset  +  relativeHeaderOffset;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  offset  +  relativeHeaderOffset;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    relativeHeaderOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	128	None	replace
115	[BUG]  [BUGGY]  remaining  -=  DECIMAL_SIZE  +  relativeHeaderOffset;  [CE]  cannot  find  symbol  DECIMAL_SIZE  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DECIMAL_SIZE  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DECIMAL_SIZE  +  relativeHeaderOffset;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  DECIMAL_SIZE	128	None	replace
116	[BUG]  [BUGGY]  remaining  -=  diskStart  +  relativeHeaderOffset;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  diskStart  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  diskStart  +  relativeHeaderOffset;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    relativeHeaderOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	128	None	replace
117	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong  [CE]  '('  or  '['  expected  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	non-compiled	[CE]  '('  or  '['  expected	16	None	replace
118	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	16	1	replace
119	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	16	1	replace
120	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong  [CE]  '('  or  '['  expected  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	non-compiled	[CE]  '('  or  '['  expected	16	None	replace
121	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	non-compiled	[CE]  incompatible  types	16	None	replace
122	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
123	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  T>relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  T>relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
124	[BUG]  [BUGGY]  remaining  -=  width;  [CE]  cannot  find  symbol  width  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  width;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  width;	  remaining    -=    RELATIVE_DECEMBER_SIZE;    	non-compiled	[CE]  cannot  find  symbol  width	95	None	replace
125	[BUG]  [BUGGY]  Rest  -=  2;  [CE]  cannot  find  symbol  Rest  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  Rest  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	Rest  -=  2;	  remaining    -=    2;    Rest    -=    2;    	non-compiled	[CE]  cannot  find  symbol  Rest	99	None	replace
126	[BUG]  [BUGGY]  remaining  -=  1;  Rest  -=  2;  [CE]  cannot  find  symbol  Rest  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  Rest  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  Rest  -=  2;	  remaining    -=    2;    Rest    -=    2;    	non-compiled	[CE]  cannot  find  symbol  Rest	99	None	replace
127	[BUG]  [BUGGY]  remaining  -=  2;  Remaining  -=  2;  [CE]  cannot  find  symbol  Remaining  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  Remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  Remaining  -=  2;	  remaining    -=    2;    Rest    -=    2;    	non-compiled	[CE]  cannot  find  symbol  Remaining	99	None	replace
128	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
129	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
130	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
131	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  2;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	while(remaining  >  0)  {  remaining  -=  2;  }	  remaining    -=    2;    while    remaining    -=    2;    	compilable	  [FE]  ZipException  	100	1	replace
132	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  2;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  2;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  2;  }	  remaining    -=    2;    while    remaining    -=    2;    	compilable	  [FE]  ZipException  	100	1	replace
133	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  2;  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  2;	  remaining    -=    2;    while    remaining    -=    2;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
134	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  1;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	while(remaining  >  0)  {  remaining  -=  1;  }	  remaining    -=    2;    while    remaining    -=    2;    	compilable	  [FE]  ZipException  	100	1	replace
135	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  1;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  1;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  1;  }	  remaining    -=    2;    while    remaining    -=    2;    	compilable	  [FE]  ZipException  	100	1	replace
136	[BUG]  [BUGGY]  while  remaining  -=  2;  [CE]  '('  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while  remaining  -=  2;	  remaining    -=    2;    while    remaining    -=    2;    	non-compiled	[CE]  '('  expected	100	None	replace
137	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  1;  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  1;	  remaining    -=    2;    while    remaining    -=    2;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
138	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  1;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  1;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	125	None	replace
139	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  length;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  length;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	125	None	replace
140	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  2;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  2;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	125	None	replace
141	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  offset;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  offset;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	125	None	replace
142	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  size;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  size;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECEMBER  +  size;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	125	None	replace
143	[BUG]  [BUGGY]  remaining  -=  READER_ID.DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  READER_ID  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  READER_ID.DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  READER_ID.DEFAULT_DECEMBER;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  READER_ID	125	None	replace
144	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	6	1	replace
145	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	6	1	replace
146	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
147	[BUG]  [BUGGY]  remaining  -=  diskStart  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  diskStart  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  diskStart  +  1;	  remaining    -=    DEFAULT_DECEMBER    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
148	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER  +  2;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER  +  2;	  remaining    -=    DEFAULT_DECEMBER    +    1;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	2	None	replace
149	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	156	None	replace
150	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	156	1	replace
151	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	156	1	replace
152	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	156	1	replace
153	[BUG]  [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	156	1	replace
154	[BUG]  [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	156	None	replace
155	[BUG]  [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  illegal  start  of  type  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
156	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  incompatible  types  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	156	None	replace
157	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  +  3;	  remaining    -=    length    +    1;    	compilable	  [FE]  ZipException  	62	1	replace
158	[BUG]  [BUGGY]  remaining  -=  length  +  3;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  3;	  remaining    -=    length    +    1;    	compilable	  [FE]  ZipException  	62	1	replace
159	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  *  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  *  1;	  remaining    -=    length    +    1;    	compilable	  [FE]  ZipException  	62	1	replace
160	[BUG]  [BUGGY]  remaining  -=  length  *  1;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  *  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  *  1;	  remaining    -=    length    +    1;    	compilable	  [FE]  ZipException  	62	1	replace
161	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	153	1	replace
162	[BUG]  [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	153	1	replace
163	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	153	None	replace
164	[BUG]  [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  illegal  start  of  type  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
165	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_ID  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_ID  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_ID  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_ID  +  1;	  remaining    -=    DEFAULT_DECEMBER_ID;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_ID	82	None	replace
166	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_HEADER_ID;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_HEADER_ID  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_HEADER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_HEADER_ID;	  remaining    -=    DEFAULT_DECEMBER_ID;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_HEADER_ID	82	None	replace
167	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	67	1	add
168	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remaining  -=  WORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	67	1	add
169	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remainder  -=  WORD;  remaining  -=  WORD;  [CE]  cannot  find  symbol  remainder  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remainder  -=  WORD;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remainder  -=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  remainder	67	None	add
170	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  Math.max(relativeHeaderOffset,  relativeHeaderOffset);  remaining  -=  WORD;  [CE]  no  suitable  method  found  for  max(ZipEightByteInteger,ZipEightByteInteger)  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  Math.max(relativeHeaderOffset,  relativeHeaderOffset);  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  =  Math.max(relativeHeaderOffset,  relativeHeaderOffset);  remaining  -=  WORD;	  	non-compiled	[CE]  no  suitable  method  found  for  max(ZipEightByteInteger,ZipEightByteInteger)	67	None	add
171	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  rest  -=  WORD;  remaining  -=  WORD;  [CE]  cannot  find  symbol  rest  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  rest  -=  WORD;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    rest  -=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  rest	67	None	add
172	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  Math.max(relativeHeaderOffset,  remaining);  remaining  -=  WORD;  [CE]  no  suitable  method  found  for  max(ZipEightByteInteger,int)  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  Math.max(relativeHeaderOffset,  remaining);  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  =  Math.max(relativeHeaderOffset,  remaining);  remaining  -=  WORD;	  	non-compiled	[CE]  no  suitable  method  found  for  max(ZipEightByteInteger,int)	67	None	add
173	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  Math.max(relativeHeaderOffset,  remaining  -=  WORD);  remaining  -=  WORD;  [CE]  no  suitable  method  found  for  max(ZipEightByteInteger,int)  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  Math.max(relativeHeaderOffset,  remaining  -=  WORD);  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  =  Math.max(relativeHeaderOffset,  remaining  -=  WORD);  remaining  -=  WORD;	  	non-compiled	[CE]  no  suitable  method  found  for  max(ZipEightByteInteger,int)	67	None	add
174	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  Math.max(relativeHeaderOffset,  remaining  -  WORD);  remaining  -=  WORD;  [CE]  no  suitable  method  found  for  max(ZipEightByteInteger,int)  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  Math.max(relativeHeaderOffset,  remaining  -  WORD);  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  =  Math.max(relativeHeaderOffset,  remaining  -  WORD);  remaining  -=  WORD;	  	non-compiled	[CE]  no  suitable  method  found  for  max(ZipEightByteInteger,int)	67	None	add
175	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  while  remaining  -=  WORD;  remaining  -=  WORD;  [CE]  '('  expected  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  while  remaining  -=  WORD;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    while  remaining  -=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  '('  expected	67	None	add
176	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [CE]  '('  or  '['  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  '('  or  '['  expected	110	None	replace
177	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  '('  or  '['  expected	110	None	replace
178	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	110	None	replace
179	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [CE]  '('  or  '['  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  '('  or  '['  expected	110	None	replace
180	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  '('  or  '['  expected	110	None	replace
181	[BUG]  [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  >  0)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  '('  or  '['  expected	110	None	replace
182	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  '('  or  '['  expected	110	None	replace
183	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	164	None	replace
184	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_S  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_S  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_S	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	164	None	replace
185	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	164	None	replace
186	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BO  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BO  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BO	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	164	None	replace
187	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_S  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_S  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_S	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	164	None	replace
188	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_S  [CE]  >  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_S  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_S	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	164	None	replace
189	[BUG]  [BUGGY]  remaining  -=  DECEMBER_ID;  [CE]  cannot  find  symbol  DECEMBER_ID  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DECEMBER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DECEMBER_ID;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf(':');    remaining    -=    length;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER_ID	40	None	replace
190	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  '('  or  '['  expected	14	None	replace
191	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [CE]  '('  or  '['  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  '('  or  '['  expected	14	None	replace
192	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  '('  or  '['  expected	14	None	replace
193	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  '('  or  '['  expected	14	None	replace
194	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
195	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [CE]  '('  or  '['  expected  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  '('  or  '['  expected	14	None	replace
196	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	7	1	add
197	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	7	1	add
198	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	7	1	add
199	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	7	1	add
200	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  reportHeaderOffset  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  reportHeaderOffset	7	None	add
201	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  If(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  ';'  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  If(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    If(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  ';'  expected	7	None	add
202	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  >=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  >=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  >=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	add
203	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  referHeaderOffset  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  referHeaderOffset	7	None	add
204	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    4;    remaining  -=  4;	  	compilable	  [FE]  ZipException  	76	1	add
205	[BUG]  [BUGGY]  remaining  -=  4;  remaining  -=  4;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    remaining  -=  4;	  	compilable	  [FE]  ZipException  	76	1	add
206	[BUG]  [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  4;  [CE]  >  expected  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  4;	  	non-compiled	[CE]  >  expected	76	None	add
207	[BUG]  [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [CE]  >  expected  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  >  expected	76	None	add
208	[BUG]  [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  4;  [CE]  >  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  4;	  	non-compiled	[CE]  >  expected	76	None	add
209	[BUG]  [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOff  [CE]  >  expected  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOff  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOff	  	non-compiled	[CE]  >  expected	76	None	add
210	[BUG]  [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  4;  [CE]  >  expected  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  4;	  	non-compiled	[CE]  >  expected	76	None	add
211	[BUG]  [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  4;  [CE]  >  expected  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  4;	  	non-compiled	[CE]  >  expected	76	None	add
212	[BUG]  [BUGGY]  remainder  -=  2;  [CE]  cannot  find  symbol  remainder  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remainder  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remainder  -=  2;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID?    LFH_MUST_HAVE_BOTH_SIZES_MSG    :    relativeHeaderOffset));    remaining    -=    2;    	non-compiled	[CE]  cannot  find  symbol  remainder	23	None	replace
213	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length;  remaining  -=  WORD;	  remaining    -=    WORD;    rest    -=    WORD;    	compilable	  [FE]  ZipException  	132	1	replace
214	[BUG]  [BUGGY]  remaining  -=  length;  remaining  -=  WORD;  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  remaining  -=  WORD;	  remaining    -=    WORD;    rest    -=    WORD;    	compilable	  [FE]  ZipException  	132	1	replace
215	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DWORD;  remaining  -=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  DWORD;  remaining  -=  DWORD;	  remaining    -=    WORD;    rest    -=    WORD;    	compilable	  [FE]  ZipException  	132	1	replace
216	[BUG]  [BUGGY]  remaining  -=  DWORD;  remaining  -=  DWORD;  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DWORD;  remaining  -=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DWORD;  remaining  -=  DWORD;	  remaining    -=    WORD;    rest    -=    WORD;    	compilable	  [FE]  ZipException  	132	1	replace
217	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  1;  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    ==    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	163	None	replace
218	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_S  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_S  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_S	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    ==    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	163	None	replace
219	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2;  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    ==    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	163	None	replace
220	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECEMBER;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
221	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECEMBER_SIZE;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECEMBER_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECEMBER_SIZE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
222	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
223	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECLARATION;  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECLARATION;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECLARATION;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
224	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_ID;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECEMBER_ID;  [CE]  ';'  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_ID;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECEMBER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_ID;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECEMBER_ID;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
225	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_WORD;  [CE]  ';'  expected  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_WORD;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
226	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
227	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
228	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
229	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  1;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  1;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECIMAL;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	126	None	replace
230	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  2;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  2;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECIMAL;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	126	None	replace
231	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  length;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  length;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECIMAL;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	126	None	replace
232	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  offset;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  offset;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECIMAL;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	126	None	replace
233	[BUG]  [BUGGY]  remaining  -=  READER_ID.DEFAULT_DECIMAL;  [CE]  cannot  find  symbol  READER_ID  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  READER_ID.DEFAULT_DECIMAL;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  READER_ID.DEFAULT_DECIMAL;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECIMAL;    	non-compiled	[CE]  cannot  find  symbol  READER_ID	126	None	replace
234	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  size;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  size;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  size;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECIMAL;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	126	None	replace
235	[BUG]  [BUGGY]  remaining  -=  size  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  size  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  size  -  1;	  remaining    -=    length    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	64	None	replace
236	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  offset  -  1;	  remaining    -=    length    -    1;    	compilable	  [FE]  ZipException  	64	1	replace
237	[BUG]  [BUGGY]  remaining  -=  offset  -  1;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  offset  -  1;	  remaining    -=    length    -    1;    	compilable	  [FE]  ZipException  	64	1	replace
238	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  /  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  /  1;	  remaining    -=    length    -    1;    	compilable	  [FE]  ZipException  	64	1	replace
239	[BUG]  [BUGGY]  remaining  -=  length  /  1;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  /  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  /  1;	  remaining    -=    length    -    1;    	compilable	  [FE]  ZipException  	64	1	replace
240	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  -  3;	  remaining    -=    length    -    1;    	compilable	  [FE]  ZipException  	64	1	replace
241	[BUG]  [BUGGY]  remaining  -=  length  -  3;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  -  3;	  remaining    -=    length    -    1;    	compilable	  [FE]  ZipException  	64	1	replace
242	[BUG]  [BUGGY]  remaining  -=  compressedSize.length;  [CE]  cannot  find  symbol  length  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  compressedSize.length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  compressedSize.length;	  remaining    -=    relativeHeaderOffset.length;    	non-compiled	[CE]  cannot  find  symbol  length	96	None	replace
243	[BUG]  [BUGGY]  remaining  -=  offset.length;  [CE]  int  cannot  be  dereferenced  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset.length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  offset.length;	  remaining    -=    relativeHeaderOffset.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	96	None	replace
244	[BUG]  [BUGGY]  remaining  -=  relativeHeaderOffset.length  +  1;  [CE]  cannot  find  symbol  length  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  relativeHeaderOffset.length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  relativeHeaderOffset.length  +  1;	  remaining    -=    relativeHeaderOffset.length;    	non-compiled	[CE]  cannot  find  symbol  length	96	None	replace
245	[BUG]  [BUGGY]  remaining  -=  diskStart.length;  [CE]  cannot  find  symbol  length  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  diskStart.length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  diskStart.length;	  remaining    -=    relativeHeaderOffset.length;    	non-compiled	[CE]  cannot  find  symbol  length	96	None	replace
246	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  buffer.length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  buffer.length;	  remaining    -=    relativeHeaderOffset.length;    	compilable	  [FE]  ZipException  	96	1	replace
247	[BUG]  [BUGGY]  remaining  -=  buffer.length;  [FE]  ZipException  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  buffer.length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  buffer.length;	  remaining    -=    relativeHeaderOffset.length;    	compilable	  [FE]  ZipException  	96	1	replace
248	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	52	None	replace
249	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	52	None	replace
250	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	52	None	replace
251	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	52	None	replace
252	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	52	None	replace
253	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	non-compiled	[CE]  incompatible  types	12	None	add
254	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	12	1	add
255	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	12	1	add
256	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	non-compiled	[CE]  incompatible  types	12	None	add
257	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	non-compiled	[CE]  incompatible  types	12	None	add
258	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  incompatible  types	12	None	add
259	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	12	1	add
260	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	12	1	add
261	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_ID  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_ID  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_ID  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_ID  +  1;	  remaining    -=    DEFAULT_DECIMAL_ID;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_ID	140	None	replace
262	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  0;  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remainder    -=    0;    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
263	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  0;  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remainder    -=    0;    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
264	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  offset  +  length;	  remaining    -=    offset;    	compilable	  [FE]  ZipException  	49	1	replace
265	[BUG]  [BUGGY]  remaining  -=  offset  +  length;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  offset  +  length;	  remaining    -=    offset;    	compilable	  [FE]  ZipException  	49	1	replace
266	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  *  1;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  *  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE  *  1;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    1;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	78	None	replace
267	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong  [CE]  '('  or  '['  expected  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	non-compiled	[CE]  '('  or  '['  expected	13	None	replace
268	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong  [CE]  '('  or  '['  expected  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	non-compiled	[CE]  '('  or  '['  expected	13	None	replace
269	[BUG]  [BUGGY]  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  'else'  without  'if'  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
270	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  2  *  DWORD  +  1;	  remaining    -=    2    *    DWORD;    	compilable	  [FE]  ZipException  	60	1	replace
271	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD  +  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  DWORD  +  1;	  remaining    -=    2    *    DWORD;    	compilable	  [FE]  ZipException  	60	1	replace
272	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  2  *  length;	  remaining    -=    2    *    DWORD;    	compilable	  [FE]  ZipException  	60	1	replace
273	[BUG]  [BUGGY]  remaining  -=  2  *  length;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  length;	  remaining    -=    2    *    DWORD;    	compilable	  [FE]  ZipException  	60	1	replace
274	[BUG]  [BUGGY]  remaining  -=  2  *  READER_ID;  [CE]  cannot  find  symbol  READER_ID  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  READER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  READER_ID;	  remaining    -=    2    *    DWORD;    	non-compiled	[CE]  cannot  find  symbol  READER_ID	60	None	replace
275	[BUG]  [BUGGY]  remaining  -=  2  *  size;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  size;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  size;	  remaining    -=    2    *    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	60	None	replace
276	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  3  *  DWORD;	  remaining    -=    2    *    DWORD;    	compilable	  [FE]  ZipException  	60	1	replace
277	[BUG]  [BUGGY]  remaining  -=  3  *  DWORD;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  3  *  DWORD;	  remaining    -=    2    *    DWORD;    	compilable	  [FE]  ZipException  	60	1	replace
278	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >=    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	54	None	replace
279	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >=    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	54	None	replace
280	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >=    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	54	None	replace
281	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >=    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	54	None	replace
282	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  /  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  /  2;	  remaining    -=    length    -    2;    	compilable	  [FE]  ZipException  	172	1	replace
283	[BUG]  [BUGGY]  remaining  -=  length  /  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  /  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  /  2;	  remaining    -=    length    -    2;    	compilable	  [FE]  ZipException  	172	1	replace
284	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  -  2  *  DWORD;	  remaining    -=    length    -    2;    	compilable	  [FE]  ZipException  	172	1	replace
285	[BUG]  [BUGGY]  remaining  -=  length  -  2  *  DWORD;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  -  2  *  DWORD;	  remaining    -=    length    -    2;    	compilable	  [FE]  ZipException  	172	1	replace
286	[BUG]  [BUGGY]  remaining  -=  size  -  2;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  size  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  size  -  2;	  remaining    -=    length    -    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	172	None	replace
287	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  *  2  +  length;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  *  2  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE  *  2  +  length;	  remaining    -=    DEFAULT_DECEMBER_SIZE    *    2;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	81	None	replace
288	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  remaining  -=  DEFAULT_DECEMBER;  [CE]  ';'  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  remaining  -=  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  remaining  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    RelativeHeaderOffset    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	69	None	replace
289	[BUG]  [BUGGY]  remaining  -=  length;  RelativeHeaderOffset  remaining  -=  WORD;  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  RelativeHeaderOffset  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  RelativeHeaderOffset  remaining  -=  WORD;	  remaining    -=    WORD;    RelativeHeaderOffset    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	69	None	replace
290	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  -=  WORD;  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  -=  WORD;	  remaining    -=    WORD;    RelativeHeaderOffset    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	69	None	replace
291	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  remaining  -=  2;  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  remaining  -=  2;	  remaining    -=    WORD;    RelativeHeaderOffset    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	69	None	replace
292	[BUG]  [BUGGY]  remaining  -=  DWORD;  RelativeHeaderOffset  remaining  -=  DWORD;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DWORD;  RelativeHeaderOffset  remaining  -=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DWORD;  RelativeHeaderOffset  remaining  -=  DWORD;	  remaining    -=    WORD;    RelativeHeaderOffset    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	69	None	replace
293	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  remaining  -=  2;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  remaining  -=  2;	  remaining    -=    WORD;    RelativeHeaderOffset    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	69	None	replace
294	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset!=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	165	None	replace
295	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  1;  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset!=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	165	None	replace
296	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE_  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE_  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE_	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE_    	non-compiled	[CE]  >  expected	58	None	replace
297	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_  [CE]  >  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE_    	non-compiled	[CE]  >  expected	58	None	replace
298	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_  [CE]  >  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE_    	non-compiled	[CE]  >  expected	58	None	replace
299	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_  [CE]  >  expected  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE_    	non-compiled	[CE]  >  expected	58	None	replace
300	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_  [CE]  >  expected  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE_    	non-compiled	[CE]  >  expected	58	None	replace
301	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE_  [CE]  >  expected  [FE]                                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE_  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE_	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE_    	non-compiled	[CE]  >  expected	58	None	replace
302	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.HEADER_ID;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.HEADER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.HEADER_ID;	  remaining    -=    RelativeHeaderOffset.RELATIVE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	127	None	replace
303	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.HEIGHT;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.HEIGHT;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.HEIGHT;	  remaining    -=    RelativeHeaderOffset.RELATIVE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	127	None	replace
304	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_SIZE;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_SIZE;	  remaining    -=    RelativeHeaderOffset.RELATIVE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	127	None	replace
305	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.SIZE;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.SIZE;	  remaining    -=    RelativeHeaderOffset.RELATIVE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	127	None	replace
306	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.RELATIVE_SIZE  +  1;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.RELATIVE_SIZE  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.RELATIVE_SIZE  +  1;	  remaining    -=    RelativeHeaderOffset.RELATIVE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	127	None	replace
307	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DECEMBER_SIZE;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DECEMBER_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DECEMBER_SIZE;	  remaining    -=    RelativeHeaderOffset.RELATIVE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	127	None	replace
308	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	155	1	replace
309	[BUG]  [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	155	1	replace
310	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  >  0;  [CE]  illegal  start  of  type  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  >  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  >  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
311	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [CE]  illegal  start  of  type  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
312	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  >  0;  [CE]  illegal  start  of  type  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  >  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  >  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
313	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [CE]  illegal  start  of  type  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
314	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >=  0;  [CE]  illegal  start  of  type  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
315	[BUG]  [BUGGY]  while  remaining  -=  length;  [CE]  '('  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while  remaining  -=  length;	  remaining    -=    WORD;    while    remaining    -=    WORD;    	non-compiled	[CE]  '('  expected	134	None	replace
316	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	while(remaining  >  0)  {  remaining  -=  WORD;  }	  remaining    -=    WORD;    while    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	134	1	replace
317	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  WORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  WORD;  }	  remaining    -=    WORD;    while    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	134	1	replace
318	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  WORD;	  remaining    -=    WORD;    while    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
319	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  WORD)  {  remaining  -=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	while(remaining  >  WORD)  {  remaining  -=  WORD;  }	  remaining    -=    WORD;    while    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	134	1	replace
320	[BUG]  [BUGGY]  while(remaining  >  WORD)  {  remaining  -=  WORD;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  WORD)  {  remaining  -=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  WORD)  {  remaining  -=  WORD;  }	  remaining    -=    WORD;    while    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	134	1	replace
321	[BUG]  [BUGGY]  while(remaining  >  WORD)  {  remaining  -=  WORD;  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  WORD)  {  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  WORD)  {  remaining  -=  WORD;	  remaining    -=    WORD;    while    remaining    -=    WORD;    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
322	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0.0)  {  remaining  -=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	while(remaining  >  0.0)  {  remaining  -=  WORD;  }	  remaining    -=    WORD;    while    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	134	1	replace
323	[BUG]  [BUGGY]  while(remaining  >  0.0)  {  remaining  -=  WORD;  }  [FE]  ZipException  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0.0)  {  remaining  -=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0.0)  {  remaining  -=  WORD;  }	  remaining    -=    WORD;    while    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	134	1	replace
324	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);  remaining  -=  1;  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG,    relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  >  expected	56	None	replace
325	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);  remaining  -=  1;  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG,    relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  >  expected	56	None	replace
326	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);  remaining  -=  2;  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);  remaining  -=  2;	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG,    relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  >  expected	56	None	replace
327	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    1;    remaining  -=  2;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	103	1	add
328	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  2;  remaining  -=  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    remaining  -=  2;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	103	1	add
329	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  remainder  -=  2;  remaining  -=  1;  [CE]  cannot  find  symbol  remainder  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remainder  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    remainder  -=  2;  remaining  -=  1;	  	non-compiled	[CE]  cannot  find  symbol  remainder	103	None	add
330	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  rest  -=  2;  remaining  -=  1;  [CE]  cannot  find  symbol  rest  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  rest  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    rest  -=  2;  remaining  -=  1;	  	non-compiled	[CE]  cannot  find  symbol  rest	103	None	add
331	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  Rest  -=  2;  remaining  -=  1;  [CE]  cannot  find  symbol  Rest  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  Rest  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    Rest  -=  2;  remaining  -=  1;	  	non-compiled	[CE]  cannot  find  symbol  Rest	103	None	add
332	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  while  remaining  -=  2;  remaining  -=  1;  [CE]  '('  expected  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  while  remaining  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    while  remaining  -=  2;  remaining  -=  1;	  	non-compiled	[CE]  '('  expected	103	None	add
333	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  1;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    1;    remaining  -=  1;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	103	1	add
334	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  1;  remaining  -=  1;  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  1;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    remaining  -=  1;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	103	1	add
335	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  -=  2;  remaining  -=  1;  [CE]  illegal  start  of  expression  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    -=  2;  remaining  -=  1;	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
336	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  3;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    1;    remaining  -=  3;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	103	1	add
337	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  3;  remaining  -=  1;  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  3;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    remaining  -=  3;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	103	1	add
338	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	8	1	replace
339	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	8	1	replace
340	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  =  new  ZipLong(buffer,  offset);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
341	[BUG]  [BUGGY]  RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
342	[BUG]  [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  rest  =  new  ZipLong(buffer,  offset);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
343	[BUG]  [BUGGY]  remaining  -=  length;  Rest  -=  WORD;  [CE]  cannot  find  symbol  Rest  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  Rest  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  Rest  -=  WORD;	  remaining    -=    WORD;    Rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  Rest	135	None	replace
344	[BUG]  [BUGGY]  Rest  -=  WORD;  [CE]  cannot  find  symbol  Rest  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  Rest  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	Rest  -=  WORD;	  remaining    -=    WORD;    Rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  Rest	135	None	replace
345	[BUG]  [BUGGY]  remaining  -=  DWORD;  Rest  -=  WORD;  [CE]  cannot  find  symbol  Rest  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DWORD;  Rest  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DWORD;  Rest  -=  WORD;	  remaining    -=    WORD;    Rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  Rest	135	None	replace
346	[BUG]  [BUGGY]  remaining  -=  2;  Rest  -=  3;  [CE]  cannot  find  symbol  Rest  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  Rest  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  Rest  -=  3;	  remaining    -=    WORD;    Rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  Rest	135	None	replace
347	[BUG]  [BUGGY]  remaining  -=  WORD;  Rest  -=  length;  [CE]  cannot  find  symbol  Rest  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  Rest  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  Rest  -=  length;	  remaining    -=    WORD;    Rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  Rest	135	None	replace
348	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  WORD;  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  WORD;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
349	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECLARATION;  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECLARATION;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECLARATION;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
350	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  HEADER_ID;  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  HEADER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  HEADER_ID;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
351	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER_ID;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER_ID;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
352	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_SIZE;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_SIZE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
353	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	9	1	add
354	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	9	1	add
355	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  	non-compiled	[CE]  ';'  expected	9	None	add
356	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
357	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(  [CE]  ')'  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(	  	non-compiled	[CE]  ')'  expected	9	None	add
358	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	9	1	add
359	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	9	1	add
360	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  [CE]  ';'  expected  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset	  	non-compiled	[CE]  ';'  expected	9	None	add
361	[BUG]  [BUGGY]  remaining  -=  size  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  size  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  size  +  2;	  remaining    -=    size    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	45	None	replace
362	[BUG]  [BUGGY]  remaining  -=  compressedSize  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  compressedSize  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  compressedSize  +  1;	  remaining    -=    size    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	45	None	replace
363	[BUG]  [BUGGY]  remaining  -=  relativeHeaderOffset  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  relativeHeaderOffset  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  relativeHeaderOffset  +  1;	  remaining    -=    size    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	45	None	replace
364	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [CE]  '('  or  '['  expected  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  '('  or  '['  expected	123	None	replace
365	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  '('  or  '['  expected	123	None	replace
366	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_S  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_S  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_S	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    remaining    >    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	166	None	replace
367	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    remaining    >    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	166	None	replace
368	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    remaining    >    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	166	None	replace
369	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  >  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    remaining    >    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	166	None	replace
370	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  <  =  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  >  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  <  =  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  <  =  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    remaining    >    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	166	None	replace
371	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  1;  [CE]  >  expected  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG  +  1;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    remaining    >    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	166	None	replace
372	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  1;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	91	None	replace
373	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  0;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	91	None	replace
374	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  2;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  2;	  remaining    -=    0;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	91	None	replace
375	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  1;  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	91	None	replace
376	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	non-compiled	[CE]  incompatible  types	15	None	add
377	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
378	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
379	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	non-compiled	[CE]  incompatible  types	15	None	add
380	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
381	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
382	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +  [CE]  illegal  start  of  expression  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
383	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  incompatible  types	15	None	add
384	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    3;    remaining  -=  1;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	150	1	add
385	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  3;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    3;    remaining  -=  1;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	150	1	add
386	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  3;  remainder  -=  1;  remaining  -=  3;  [CE]  cannot  find  symbol  remainder  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remainder  -=  1;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    3;    remainder  -=  1;  remaining  -=  3;	  	non-compiled	[CE]  cannot  find  symbol  remainder	150	None	add
387	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  3;  rest  -=  1;  remaining  -=  3;  [CE]  cannot  find  symbol  rest  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  rest  -=  1;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    3;    rest  -=  1;  remaining  -=  3;	  	non-compiled	[CE]  cannot  find  symbol  rest	150	None	add
388	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    3;    remaining  -=  1;  remaining  -=  4;	  	compilable	  [FE]  ZipException  	150	1	add
389	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  4;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    3;    remaining  -=  1;  remaining  -=  4;	  	compilable	  [FE]  ZipException  	150	1	add
390	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  3;  Rest  -=  1;  remaining  -=  3;  [CE]  cannot  find  symbol  Rest  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  Rest  -=  1;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    3;    Rest  -=  1;  remaining  -=  3;	  	non-compiled	[CE]  cannot  find  symbol  Rest	150	None	add
391	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    3;    remaining  -=  1;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	150	1	add
392	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  2;  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    3;    remaining  -=  1;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	150	1	add
393	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    3;    remaining  -=  2;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	150	1	add
394	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  2;  remaining  -=  3;  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    3;    remaining  -=  2;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	150	1	add
395	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  3;  -=  1;  remaining  -=  3;  [CE]  illegal  start  of  expression  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  -=  1;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    3;    -=  1;  remaining  -=  3;	  	non-compiled	[CE]  illegal  start  of  expression	150	None	add
396	[BUG]  [BUGGY]  remaining  -=  DEFAULT_WORD  +  1;  [CE]  cannot  find  symbol  DEFAULT_WORD  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_WORD  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_WORD  +  1;	  remaining    -=    DEFAULT_WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_WORD	4	None	replace
397	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  [CE]  cannot  find  symbol  DEFAULT_DECLARATION  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECLARATION;	  remaining    -=    DEFAULT_WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECLARATION	4	None	replace
398	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  offset  +  2;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    2;    	compilable	  [FE]  ZipException  	79	1	replace
399	[BUG]  [BUGGY]  remaining  -=  offset  +  2;  [FE]  ZipException  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  offset  +  2;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    2;    	compilable	  [FE]  ZipException  	79	1	replace
400	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  1;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    1;    remaining  -=  1;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	50	1	add
401	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  1;  remaining  -=  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  1;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    1;    remaining  -=  1;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	50	1	add
402	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  1;  remainder  -=  1;  remaining  -=  1;  [CE]  cannot  find  symbol  remainder  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  remainder  -=  1;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    1;    remainder  -=  1;  remaining  -=  1;	  	non-compiled	[CE]  cannot  find  symbol  remainder	50	None	add
403	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  1;  rest  -=  1;  remaining  -=  1;  [CE]  cannot  find  symbol  rest  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  rest  -=  1;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    1;    rest  -=  1;  remaining  -=  1;	  	non-compiled	[CE]  cannot  find  symbol  rest	50	None	add
404	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  1;  while  remaining  -=  1;  remaining  -=  1;  [CE]  '('  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  while  remaining  -=  1;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    1;    while  remaining  -=  1;  remaining  -=  1;	  	non-compiled	[CE]  '('  expected	50	None	add
405	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  1;  Rest  -=  1;  remaining  -=  1;  [CE]  cannot  find  symbol  Rest  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  Rest  -=  1;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    1;    Rest  -=  1;  remaining  -=  1;	  	non-compiled	[CE]  cannot  find  symbol  Rest	50	None	add
406	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  1;  -=  1;  remaining  -=  1;  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  -=  1;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    1;    -=  1;  remaining  -=  1;	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
407	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    1;    remaining  -=  1;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	50	1	add
408	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  1;  remaining  -=  2;  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  1;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    1;    remaining  -=  1;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	50	1	add
409	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    1;    remaining  -=  2;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	50	1	add
410	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  2;  remaining  -=  1;  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    1;    remaining  -=  2;  remaining  -=  1;	  	compilable	  [FE]  ZipException  	50	1	add
411	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  ==  0;  [CE]  illegal  start  of  type  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  ==  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  ==  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
412	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [CE]  illegal  start  of  type  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
413	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [CE]  illegal  start  of  type  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
414	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  ==  0;  [CE]  illegal  start  of  type  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  ==  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  ==  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
415	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [CE]  illegal  start  of  type  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
416	[BUG]  [BUGGY]  remaining  -=  length  +  DEFAULT_DECEMBER_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  DEFAULT_DECEMBER_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  DEFAULT_DECEMBER_SIZE;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	80	None	replace
417	[BUG]  [BUGGY]  remaining  -=  length  +  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG	80	None	replace
418	[BUG]  [BUGGY]  remaining  -=  size  +  length;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  size  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  size  +  length;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	80	None	replace
419	[BUG]  [BUGGY]  remaining  -=  length  +  DEFAULT_DECEMBRE_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECEMBRE_SIZE  [FE]                                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  DEFAULT_DECEMBRE_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  DEFAULT_DECEMBRE_SIZE;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBRE_SIZE	80	None	replace
420	[BUG]  [BUGGY]  remaining  -=  length  +  DEFAULT_SIZE;  [CE]  cannot  find  symbol  DEFAULT_SIZE  [FE]                                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  DEFAULT_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  DEFAULT_SIZE;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SIZE	80	None	replace
421	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  +  length  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]                                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  +  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE  +  length  +  1;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	80	None	replace
422	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  +  offset;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]                                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  +  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE  +  offset;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	80	None	replace
423	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    ==    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	55	None	replace
424	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    ==    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	55	None	replace
425	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    ==    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	55	None	replace
426	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    ==    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	55	None	replace
427	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE  [CE]  >  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    ==    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	55	None	replace
428	[BUG]  [BUGGY]  remaining  -=  RELATIVE_DECIMAL_HEADER;  [CE]  cannot  find  symbol  RELATIVE_DECIMAL_HEADER  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RELATIVE_DECIMAL_HEADER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RELATIVE_DECIMAL_HEADER;	  remaining    -=    DEFAULT_DECIMAL_HEADER;    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_DECIMAL_HEADER	131	None	replace
429	[BUG]  [BUGGY]  remainder  -=  1;  [CE]  cannot  find  symbol  remainder  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remainder  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remainder  -=  1;	  remaining    -=    1;    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol  remainder	51	None	replace
430	[BUG]  [BUGGY]  RelativeHeaderOffset  <  =  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;  [CE]  illegal  start  of  type  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  =  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  =  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
431	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  >  expected	162	None	replace
432	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  >  expected	162	None	replace
433	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_S  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_S  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_S	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  >  expected	162	None	replace
434	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  >  expected	162	None	replace
435	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);  [CE]  illegal  start  of  type  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
436	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0);  [CE]  illegal  start  of  type  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0);	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
437	[BUG]  [BUGGY]  remaining  -=  length;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);  [CE]  illegal  start  of  type  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
438	[BUG]  [BUGGY]  remaining  -=  DWORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);  [CE]  illegal  start  of  type  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DWORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DWORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
439	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);  [CE]  illegal  start  of  type  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
440	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  ==  0);  [CE]  illegal  start  of  type  [FE]                                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  ==  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  ==  0);	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
441	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  0;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    rest    -=    0;    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
442	[BUG]  [BUGGY]  remaining  -=  WORD;  int  length  =  relativeHeaderOffset.length();  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  int  length  =  relativeHeaderOffset.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  int  length  =  relativeHeaderOffset.length();	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	42	None	replace
443	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.length();  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.length();	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	42	None	replace
444	[BUG]  [BUGGY]  remaining  -=  2;  int  length  =  relativeHeaderOffset.length();  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  int  length  =  relativeHeaderOffset.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  int  length  =  relativeHeaderOffset.length();	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	42	None	replace
445	[BUG]  [BUGGY]  remaining  -=  offset;  int  length  =  relativeHeaderOffset.length();  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  length  =  relativeHeaderOffset.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  offset;  int  length  =  relativeHeaderOffset.length();	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	42	None	replace
446	[BUG]  [BUGGY]  remaining  -=  1;  int  length  =  relativeHeaderOffset.length();  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  int  length  =  relativeHeaderOffset.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  int  length  =  relativeHeaderOffset.length();	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	42	None	replace
447	[BUG]  [BUGGY]  remaining  -=  length;  int  length  =  compressedSize.length();  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  int  length  =  compressedSize.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  int  length  =  compressedSize.length();	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	42	None	replace
448	[BUG]  [BUGGY]  remaining  -=  length  +  DEFAULT_DECIMAL_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  DEFAULT_DECIMAL_SIZE;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	32	None	replace
449	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  length  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE  +  length  +  1;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	32	None	replace
450	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  offset;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE  +  offset;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	32	None	replace
451	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  WORD;  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  T>  remaining  -=  WORD;	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
452	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  2;  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  T>  remaining  -=  2;	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
453	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  READER_ID;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  READER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  T>  remaining  -=  READER_ID;	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
454	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  length;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  T>  remaining  -=  length;	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
455	[BUG]  [BUGGY]  remaining  -=  length,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length,  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length,  relativeHeaderOffset;	  remaining    -=    size,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	46	None	replace
456	[BUG]  [BUGGY]  remaining  -=  compressedSize,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  compressedSize,  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  compressedSize,  relativeHeaderOffset;	  remaining    -=    size,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	46	None	replace
457	[BUG]  [BUGGY]  remaining  -=  size,  compressedSize;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  size,  compressedSize;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  size,  compressedSize;	  remaining    -=    size,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	46	None	replace
458	[BUG]  [BUGGY]  remaining  -=  WORD,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD,  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD,  relativeHeaderOffset;	  remaining    -=    size,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	46	None	replace
459	[BUG]  [BUGGY]  remaining  -=  compressionSize,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  compressionSize,  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  compressionSize,  relativeHeaderOffset;	  remaining    -=    size,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	46	None	replace
460	[BUG]  [BUGGY]  remaining  -=  offset,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset,  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  offset,  relativeHeaderOffset;	  remaining    -=    size,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	46	None	replace
461	[BUG]  [BUGGY]  remaining  -=  DECEMBER_ID,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DECEMBER_ID,  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DECEMBER_ID,  relativeHeaderOffset;	  remaining    -=    size,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	46	None	replace
462	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        0;        remaining    -=    0;    remaining  -=  0;  remaining  -=  0;	  	compilable	  [FE]  ZipException  	85	1	add
463	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  remaining  -=  0;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    remaining  -=  0;  remaining  -=  0;	  	compilable	  [FE]  ZipException  	85	1	add
464	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  RelativeHeaderOffset  remaining  -=  0;  remaining  -=  0;  [CE]  ';'  expected  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  RelativeHeaderOffset  remaining  -=  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    RelativeHeaderOffset  remaining  -=  0;  remaining  -=  0;	  	non-compiled	[CE]  ';'  expected	85	None	add
465	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  remainder  -=  0;  remaining  -=  0;  [CE]  cannot  find  symbol  remainder  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  remainder  -=  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    remainder  -=  0;  remaining  -=  0;	  	non-compiled	[CE]  cannot  find  symbol  remainder	85	None	add
466	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  rest  -=  0;  remaining  -=  0;  [CE]  cannot  find  symbol  rest  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  rest  -=  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    rest  -=  0;  remaining  -=  0;	  	non-compiled	[CE]  cannot  find  symbol  rest	85	None	add
467	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  Rest  -=  0;  remaining  -=  0;  [CE]  cannot  find  symbol  Rest  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  Rest  -=  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    Rest  -=  0;  remaining  -=  0;	  	non-compiled	[CE]  cannot  find  symbol  Rest	85	None	add
468	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  RelativeHeaderOffset  <  0;  remaining  -=  0;  [CE]  illegal  start  of  type  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  RelativeHeaderOffset  <  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    RelativeHeaderOffset  <  0;  remaining  -=  0;	  	non-compiled	[CE]  illegal  start  of  type	85	None	add
469	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  -=  0;  remaining  -=  0;  [CE]  illegal  start  of  expression  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  -=  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    -=  0;  remaining  -=  0;	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
470	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  =  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        0;        remaining    -=    0;    remaining  =  0;  remaining  -=  0;	  	compilable	  [FE]  ZipException  	85	1	add
471	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  =  0;  remaining  -=  0;  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  =  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    remaining  =  0;  remaining  -=  0;	  	compilable	  [FE]  ZipException  	85	1	add
472	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	158	None	replace
473	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	158	None	replace
474	[BUG]  [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  '('  or  '['  expected	158	None	replace
475	[BUG]  [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [CE]  '('  or  '['  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  '('  or  '['  expected	158	None	replace
476	[BUG]  [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	158	None	replace
477	[BUG]  [BUGGY]  if(remaining  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  '('  or  '['  expected	158	None	replace
478	[BUG]  [BUGGY]  if(length  ==  0)  {  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  ==  0)  {  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  ==  0)  {  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	158	None	replace
479	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	106	1	add
480	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	106	1	add
481	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  	non-compiled	[CE]  ';'  expected	106	None	add
482	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
483	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(  [CE]  ')'  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(	  	non-compiled	[CE]  ')'  expected	106	None	add
484	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  [CE]  ';'  expected  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset	  	non-compiled	[CE]  ';'  expected	106	None	add
485	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	106	1	add
486	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	106	1	add
487	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  offset  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  2;  offset  -=  2;	  remaining    -=    2;    rest    -=    2;    	compilable	  [FE]  ZipException  	97	1	replace
488	[BUG]  [BUGGY]  remaining  -=  2;  offset  -=  2;  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  offset  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  offset  -=  2;	  remaining    -=    2;    rest    -=    2;    	compilable	  [FE]  ZipException  	97	1	replace
489	[BUG]  [BUGGY]  remaining  -=  2;  diskStart  -=  2;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  diskStart  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  diskStart  -=  2;	  remaining    -=    2;    rest    -=    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	97	None	replace
490	[BUG]  [BUGGY]  remaining  -=  2;  relativeHeaderOffset  -=  2;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  relativeHeaderOffset  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  relativeHeaderOffset  -=  2;	  remaining    -=    2;    rest    -=    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	97	None	replace
491	[BUG]  [BUGGY]  remaining  -=  2;  size  -=  2;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  size  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  size  -=  2;	  remaining    -=    2;    rest    -=    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	97	None	replace
492	[BUG]  [BUGGY]  remaining  -=  2;  compressedSize  -=  2;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  compressedSize  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  compressedSize  -=  2;	  remaining    -=    2;    rest    -=    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	97	None	replace
493	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	157	None	replace
494	[BUG]  [BUGGY]  offset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  offset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	offset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incompatible  types	157	None	replace
495	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  T>  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
496	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
497	[BUG]  [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  illegal  start  of  type  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
498	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	157	None	replace
499	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECEMBER;  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
500	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECLARATION;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECLARATION;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECLARATION;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
501	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  remaining  -=  WORD;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  N>  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  N>  remaining  -=  WORD;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
502	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_SIZE;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_SIZE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
503	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_SIZE;  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_SIZE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
504	[BUG]  [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  >  0)  {  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
505	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remainder    -=    1;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
506	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remainder    -=    1;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
507	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remainder    -=    1;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	112	None	replace
508	[BUG]  [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remainder    -=    1;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
509	[BUG]  [BUGGY]  remaining  -=  2  *  diskStart;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  diskStart;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  diskStart;	  remaining    -=    2    *    relativeHeaderOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	139	None	replace
510	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  2  *  offset;	  remaining    -=    2    *    relativeHeaderOffset;    	compilable	  [FE]  ZipException  	139	1	replace
511	[BUG]  [BUGGY]  remaining  -=  2  *  offset;  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  offset;	  remaining    -=    2    *    relativeHeaderOffset;    	compilable	  [FE]  ZipException  	139	1	replace
512	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  buffer.length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  2  *  buffer.length;	  remaining    -=    2    *    relativeHeaderOffset;    	compilable	  [FE]  ZipException  	139	1	replace
513	[BUG]  [BUGGY]  remaining  -=  2  *  buffer.length;  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  buffer.length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  buffer.length;	  remaining    -=    2    *    relativeHeaderOffset;    	compilable	  [FE]  ZipException  	139	1	replace
514	[BUG]  [BUGGY]  remaining  -=  2  *  compressedSize;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  compressedSize;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  compressedSize;	  remaining    -=    2    *    relativeHeaderOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	139	None	replace
515	[BUG]  [BUGGY]  remaining  -=  2  *  discStart;  [CE]  cannot  find  symbol  discStart  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  discStart;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  discStart;	  remaining    -=    2    *    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  discStart	139	None	replace
516	[BUG]  [BUGGY]  remaining  -=  DWORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [CE]  illegal  start  of  type  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DWORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DWORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
517	[BUG]  [BUGGY]  remaining  -=  length;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [CE]  illegal  start  of  type  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
518	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  >  0;  [CE]  illegal  start  of  type  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  >  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  >  0;	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
519	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >=  0;  [CE]  illegal  start  of  type  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >=  0;	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
520	[BUG]  [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	168	None	replace
521	[BUG]  [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [CE]  '('  or  '['  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteIn	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  '('  or  '['  expected	168	None	replace
522	[BUG]  [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [CE]  '('  or  '['  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  '('  or  '['  expected	168	None	replace
523	[BUG]  [BUGGY]  if(remaining  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [CE]  '('  or  '['  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightBy	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  '('  or  '['  expected	168	None	replace
524	[BUG]  [BUGGY]  if(remaining  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [CE]  '('  or  '['  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  0)  {  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  '('  or  '['  expected	168	None	replace
525	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
526	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
527	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
528	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
529	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  8;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  8;	  remaining    -=    2;    remaining    -=    3;    	compilable	  [FE]  ZipException  	102	1	replace
530	[BUG]  [BUGGY]  remaining  -=  8;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  8;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  8;	  remaining    -=    2;    remaining    -=    3;    	compilable	  [FE]  ZipException  	102	1	replace
531	[BUG]  [BUGGY]  RelativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  type  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
532	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	154	1	replace
533	[BUG]  [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	154	1	replace
534	[BUG]  [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0)  {  offset  +=  DWORD;  }  [CE]  illegal  start  of  type  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0)  {  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0)  {  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
535	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  >  expected	20	None	replace
536	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  >  expected	20	None	replace
537	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  >  expected	20	None	replace
538	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    3;    remaining  -=  3;	  	compilable	  [FE]  ZipException  	27	1	add
539	[BUG]  [BUGGY]  remaining  -=  3;  remaining  -=  3;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    remaining  -=  3;	  	compilable	  [FE]  ZipException  	27	1	add
540	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  3;  [CE]  >  expected  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  3;	  	non-compiled	[CE]  >  expected	27	None	add
541	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  3;  [CE]  >  expected  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  3;	  	non-compiled	[CE]  >  expected	27	None	add
542	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [CE]  >  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  >  expected	27	None	add
543	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOff  [CE]  >  expected  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOff  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOff	  	non-compiled	[CE]  >  expected	27	None	add
544	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  3;  [CE]  >  expected  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  3;	  	non-compiled	[CE]  >  expected	27	None	add
545	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset;  [CE]  >  expected  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset;	  	non-compiled	[CE]  >  expected	27	None	add
546	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  3;  [CE]  >  expected  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  3;	  	non-compiled	[CE]  >  expected	27	None	add
547	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	108	1	add
548	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	108	1	add
549	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	108	1	add
550	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	108	1	add
551	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	108	None	add
552	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  discStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	108	None	add
553	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  >  expected	21	None	replace
554	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  >  expected	21	None	replace
555	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  >  expected	21	None	replace
556	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  >  expected	21	None	replace
557	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  >  expected	21	None	replace
558	[BUG]  [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	159	None	replace
559	[BUG]  [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  }  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  }	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	159	None	replace
560	[BUG]  [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	159	None	replace
561	[BUG]  [BUGGY]  if(remaining  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [CE]  '('  or  '['  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByt	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  '('  or  '['  expected	159	None	replace
562	[BUG]  [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  }  [CE]  ';'  expected  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  }	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	159	None	replace
563	[BUG]  [BUGGY]  remaining  -=  diskStart  +  length;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  diskStart  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  diskStart  +  length;	  remaining    -=    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	47	None	replace
564	[BUG]  [BUGGY]  remaining  -=  length  +  DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  DEFAULT_DECEMBER;	  remaining    -=    DEFAULT_DECEMBER    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	170	None	replace
565	[BUG]  [BUGGY]  remaining  -=  length  +  DEFAULT_HEADER_ID;  [CE]  cannot  find  symbol  DEFAULT_HEADER_ID  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  DEFAULT_HEADER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  DEFAULT_HEADER_ID;	  remaining    -=    DEFAULT_DECEMBER    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HEADER_ID	170	None	replace
566	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  +  2  *  DWORD;	  remaining    -=    length    +    2;    	compilable	  [FE]  ZipException  	66	1	replace
567	[BUG]  [BUGGY]  remaining  -=  length  +  2  *  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  2  *  DWORD;	  remaining    -=    length    +    2;    	compilable	  [FE]  ZipException  	66	1	replace
568	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    3;    remaining  -=  2;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	101	1	add
569	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  2;  remaining  -=  3;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    3;    remaining  -=  2;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	101	1	add
570	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  3;  remainder  -=  2;  remaining  -=  3;  [CE]  cannot  find  symbol  remainder  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  remainder  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    3;    remainder  -=  2;  remaining  -=  3;	  	non-compiled	[CE]  cannot  find  symbol  remainder	101	None	add
571	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  3;  rest  -=  2;  remaining  -=  3;  [CE]  cannot  find  symbol  rest  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  rest  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    3;    rest  -=  2;  remaining  -=  3;	  	non-compiled	[CE]  cannot  find  symbol  rest	101	None	add
572	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  2;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    3;    remaining  -=  2;  remaining  -=  4;	  	compilable	  [FE]  ZipException  	101	1	add
573	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  2;  remaining  -=  4;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  2;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    3;    remaining  -=  2;  remaining  -=  4;	  	compilable	  [FE]  ZipException  	101	1	add
574	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  3;  Rest  -=  2;  remaining  -=  3;  [CE]  cannot  find  symbol  Rest  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  Rest  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    3;    Rest  -=  2;  remaining  -=  3;	  	non-compiled	[CE]  cannot  find  symbol  Rest	101	None	add
575	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  3;  while  remaining  -=  2;  remaining  -=  3;  [CE]  '('  expected  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  while  remaining  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    3;    while  remaining  -=  2;  remaining  -=  3;	  	non-compiled	[CE]  '('  expected	101	None	add
576	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  3;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    3;    remaining  -=  3;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	101	1	add
577	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  3;  remaining  -=  3;  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  3;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    3;    remaining  -=  3;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	101	1	add
578	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  2;  remaining  -=  5;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    3;    remaining  -=  2;  remaining  -=  5;	  	compilable	  [FE]  ZipException  	101	1	add
579	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  2;  remaining  -=  5;  [FE]  ZipException  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  2;  remaining  -=  5;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    3;    remaining  -=  2;  remaining  -=  5;	  	compilable	  [FE]  ZipException  	101	1	add
580	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  2;  remaining  -=  4;	  remaining    -=    2;    remaining    -=    1;    	compilable	  [FE]  ZipException  	104	1	replace
581	[BUG]  [BUGGY]  remaining  -=  2;  remaining  -=  4;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  remaining  -=  4;	  remaining    -=    2;    remaining    -=    1;    	compilable	  [FE]  ZipException  	104	1	replace
582	[BUG]  [BUGGY]  remaining  -=  2;  remainder  -=  1;  [CE]  cannot  find  symbol  remainder  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  remainder  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  remainder  -=  1;	  remaining    -=    2;    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol  remainder	104	None	replace
583	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  -=  0;  [CE]  ';'  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	87	None	replace
584	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  remaining  -=  1;  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  remaining  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	87	None	replace
585	[BUG]  [BUGGY]  relativeHeaderOffset  remaining  -=  0;  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	87	None	replace
586	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  2;  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  2;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID?    LFH_MUST_HAVE_BOTH_SIZES_MSG    :    relativeHeaderOffset);    remaining    -=    2;    	non-compiled	[CE]  >  expected	25	None	replace
587	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  1;  [CE]  >  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  1;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID?    LFH_MUST_HAVE_BOTH_SIZES_MSG    :    relativeHeaderOffset);    remaining    -=    2;    	non-compiled	[CE]  >  expected	25	None	replace
588	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  N>  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
589	[BUG]  [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  type  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
590	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  type  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
591	[BUG]  [BUGGY]  remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  length;  [CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  length;	  remaining    -=    DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG	30	None	replace
592	[BUG]  [BUGGY]  remaining  -=  DEFAULT_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_HAVE_BOTH_SIZES_MSG;	  remaining    -=    DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG	30	None	replace
593	[BUG]  [BUGGY]  remaining  -=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  1;  [CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  1;	  remaining    -=    DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG	30	None	replace
594	[BUG]  [BUGGY]  remaining  -=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  length;  [CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_HAVE_BOTH_SIZES_MSG  +  length;	  remaining    -=    DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG	30	None	replace
595	[BUG]  [BUGGY]  remaining  -=  DEFAULT_SIZE  +  1;  [CE]  cannot  find  symbol  DEFAULT_SIZE  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_SIZE  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_SIZE  +  1;	  remaining    -=    DEFAULT_SIZE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SIZE	1	None	replace
596	[BUG]  [BUGGY]  RelativeHeaderOffset  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remaining  -=  0;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remaining  -=  0;	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	89	None	replace
597	[BUG]  [BUGGY]  rest  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remaining  -=  0;  [CE]  cannot  find  symbol  rest  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  rest  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	rest  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remaining  -=  0;	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol  rest	89	None	replace
598	[BUG]  [BUGGY]  remaining  -=  0;  int  diskStart  =  relativeHeaderOffset.length()  +  1;  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  int  diskStart  =  relativeHeaderOffset.length()  +  1;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  int  diskStart  =  relativeHeaderOffset.length()  +  1;  remaining  -=  0;	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
599	[BUG]  [BUGGY]  remaining  -=  0;  int  diskStart  =  buffer.length();  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  int  diskStart  =  buffer.length();  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  int  diskStart  =  buffer.length();  remaining  -=  0;	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
600	[BUG]  [BUGGY]  remaining  -=  0;  int  diskStart  =  relativeHeaderOffset.length()  +  2;  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  int  diskStart  =  relativeHeaderOffset.length()  +  2;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  int  diskStart  =  relativeHeaderOffset.length()  +  2;  remaining  -=  0;	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
601	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DWORD;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  DWORD;  remaining  -=  WORD;	  remaining    -=    WORD;    second    -=    WORD;    	compilable	  [FE]  ZipException  	137	1	replace
602	[BUG]  [BUGGY]  remaining  -=  DWORD;  remaining  -=  WORD;  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DWORD;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DWORD;  remaining  -=  WORD;	  remaining    -=    WORD;    second    -=    WORD;    	compilable	  [FE]  ZipException  	137	1	replace
603	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  remaining  -=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    2    *    DWORD;    remaining  -=  2  *  DWORD;	  	compilable	  [FE]  ZipException  	59	1	add
604	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  remaining  -=  2  *  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  remaining  -=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    remaining  -=  2  *  DWORD;	  	compilable	  [FE]  ZipException  	59	1	add
605	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE	  	non-compiled	[CE]  >  expected	59	None	add
606	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  2  *  DWORD;  [CE]  >  expected  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  2  *  DWORD;	  	non-compiled	[CE]  >  expected	59	None	add
607	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH	  	non-compiled	[CE]  >  expected	59	None	add
608	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE	  	non-compiled	[CE]  >  expected	59	None	add
609	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH	  	non-compiled	[CE]  >  expected	59	None	add
610	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE	  	non-compiled	[CE]  >  expected	59	None	add
611	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  DWORD  ||  relativeHeaderOffset  >  DWORD)  {  remaining  -=  2  *  DWORD;  [CE]  >  expected  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  DWORD  ||  relativeHeaderOffset  >  DWORD)  {  remaining  -=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  DWORD  ||  relativeHeaderOffset  >  DWORD)  {  remaining  -=  2  *  DWORD;	  	non-compiled	[CE]  >  expected	59	None	add
612	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
613	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
614	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
615	[BUG]  [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
616	[BUG]  [BUGGY]  remaining  -=  HEADER_ID  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  HEADER_ID  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  HEADER_ID  +  1;	  remaining    -=    HEADER_ID;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	26	None	replace
617	[BUG]  [BUGGY]  remaining  -=  HEADER_ID,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  HEADER_ID,  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  HEADER_ID,  relativeHeaderOffset;	  remaining    -=    HEADER_ID;    	non-compiled	[CE]  ';'  expected	26	None	replace
618	[BUG]  [BUGGY]  remaining  -=  HEADER_ID  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  HEADER_ID  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  HEADER_ID  +  2;	  remaining    -=    HEADER_ID;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	26	None	replace
619	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  +  compressedSize;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  +  compressedSize;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE  +  compressedSize;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	94	None	replace
620	[BUG]  [BUGGY]  remaining  -=  DECEMBER_SIZE  +  relativeHeaderOffset;  [CE]  cannot  find  symbol  DECEMBER_SIZE  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DECEMBER_SIZE  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DECEMBER_SIZE  +  relativeHeaderOffset;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER_SIZE	94	None	replace
621	[BUG]  [BUGGY]  remaining  -=  DEFAULT_SIZE;  remaining  -=  DEFAULT_SIZE;  [CE]  cannot  find  symbol  DEFAULT_SIZE  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_SIZE;  remaining  -=  DEFAULT_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_SIZE;  remaining  -=  DEFAULT_SIZE;	  remaining    -=    WORD;    remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SIZE	68	None	replace
622	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        length;        remaining    -=    length;    remaining  -=  length;  remaining  -=  length;	  	compilable	  [FE]  ZipException  	34	1	add
623	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remaining  -=  length;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    remaining  -=  length;  remaining  -=  length;	  	compilable	  [FE]  ZipException  	34	1	add
624	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  remainder  -=  length;  remaining  -=  length;  [CE]  cannot  find  symbol  remainder  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  remainder  -=  length;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    remainder  -=  length;  remaining  -=  length;	  	non-compiled	[CE]  cannot  find  symbol  remainder	34	None	add
625	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    int  length  =  relativeHeaderOffset.length();  remaining  -=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	34	None	add
626	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  rest  -=  length;  remaining  -=  length;  [CE]  cannot  find  symbol  rest  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  rest  -=  length;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    rest  -=  length;  remaining  -=  length;	  	non-compiled	[CE]  cannot  find  symbol  rest	34	None	add
627	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.indexOf(':');  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.indexOf(':');  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    int  length  =  relativeHeaderOffset.indexOf(':');  remaining  -=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	34	None	add
628	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	34	None	add
629	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	34	None	add
630	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	34	None	add
631	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT  +  1;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT  +  1;	  remaining    -=    RelativeHeaderOffset.DEFAULT;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	124	None	replace
632	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT  +  length;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT  +  length;	  remaining    -=    RelativeHeaderOffset.DEFAULT;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	124	None	replace
633	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT  +  2;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT  +  2;	  remaining    -=    RelativeHeaderOffset.DEFAULT;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	124	None	replace
634	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT  +  offset;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT  +  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT  +  offset;	  remaining    -=    RelativeHeaderOffset.DEFAULT;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	124	None	replace
635	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DECEMBER;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DECEMBER;	  remaining    -=    RelativeHeaderOffset.DEFAULT;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	124	None	replace
636	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  remaining  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    length    +    2;    remaining  -=  length  +  2;	  	compilable	  [FE]  ZipException  	65	1	add
637	[BUG]  [BUGGY]  remaining  -=  length  +  2;  remaining  -=  length  +  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  remaining  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    remaining  -=  length  +  2;	  	compilable	  [FE]  ZipException  	65	1	add
638	[BUG]  [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length  +  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    int  length  =  relativeHeaderOffset.length();  remaining  -=  length  +  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	add
639	[BUG]  [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  +  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  +  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	add
640	[BUG]  [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.compareTo(remaining);  remaining  -=  length  +  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.compareTo(remaining);  remaining  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    int  length  =  relativeHeaderOffset.compareTo(remaining);  remaining  -=  length  +  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	add
641	[BUG]  [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  +  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  +  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	add
642	[BUG]  [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length  +  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length  +  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	add
643	[BUG]  [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length  +  2;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length  +  2;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	add
644	[BUG]  [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    int  length  =  relativeHeaderOffset.indexOf('  ')+  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	65	None	add
645	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	5	1	add
646	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	5	1	add
647	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	5	1	add
648	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	5	1	add
649	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  >=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  >=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  >=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	add
650	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  reportHeaderOffset  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  reportHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  reportHeaderOffset	5	None	add
651	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  >>  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  >>  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  >>  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	5	None	add
652	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  If(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  ';'  expected  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  If(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    If(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  ';'  expected	5	None	add
653	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  length  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  2;  length  -=  2;	  remaining    -=    2;    remainder    -=    2;    	compilable	  [FE]  ZipException  	98	1	replace
654	[BUG]  [BUGGY]  remaining  -=  2;  length  -=  2;  [FE]  ZipException  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  length  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  length  -=  2;	  remaining    -=    2;    remainder    -=    2;    	compilable	  [FE]  ZipException  	98	1	replace
655	[BUG]  [BUGGY]  remaining  -=  2;  resolvedSize  -=  2;  [CE]  cannot  find  symbol  resolvedSize  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  resolvedSize  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  resolvedSize  -=  2;	  remaining    -=    2;    remainder    -=    2;    	non-compiled	[CE]  cannot  find  symbol  resolvedSize	98	None	replace
656	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  ==  0);  [CE]  illegal  start  of  type  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  ==  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  =  0  ||  relativeHeaderOffset  ==  0);	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
657	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0);  [CE]  illegal  start  of  type  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0);	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
658	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  ==  0);  [CE]  illegal  start  of  type  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  ==  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  ==  0);	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
659	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
660	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset);	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
661	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
662	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
663	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  offset);  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(computeSize,  buffer,  offset);	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
664	[BUG]  [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
665	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
666	[BUG]  [BUGGY]  rest  -=  1;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [CE]  cannot  find  symbol  rest  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  rest  -=  1;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	rest  -=  1;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol  rest	114	None	replace
667	[BUG]  [BUGGY]  Rest  -=  1;  [CE]  cannot  find  symbol  Rest  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  Rest  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	Rest  -=  1;	  remaining    -=    1;    Rest    -=    1;    	non-compiled	[CE]  cannot  find  symbol  Rest	149	None	replace
668	[BUG]  [BUGGY]  remaining  -=  2;  Rest  -=  1;  [CE]  cannot  find  symbol  Rest  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  Rest  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  Rest  -=  1;	  remaining    -=    1;    Rest    -=    1;    	non-compiled	[CE]  cannot  find  symbol  Rest	149	None	replace
669	[BUG]  [BUGGY]  remaining  -=  1;  Remaining  -=  1;  [CE]  cannot  find  symbol  Remaining  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  Remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  Remaining  -=  1;	  remaining    -=    1;    Rest    -=    1;    	non-compiled	[CE]  cannot  find  symbol  Remaining	149	None	replace
670	[BUG]  [BUGGY]  remaining  -=  2;  rest  -=  1;  [CE]  cannot  find  symbol  rest  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  rest  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  rest  -=  1;	  remaining    -=    1;    Rest    -=    1;    	non-compiled	[CE]  cannot  find  symbol  rest	149	None	replace
671	[BUG]  [BUGGY]  remaining  -=  READER_ID  +  2;  [CE]  cannot  find  symbol  READER_ID  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  READER_ID  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  READER_ID  +  2;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    2;    	non-compiled	[CE]  cannot  find  symbol  READER_ID	31	None	replace
672	[BUG]  [BUGGY]  remaining  -=  DEFAULT_RELATIVE_SIZE;  [CE]  cannot  find  symbol  DEFAULT_RELATIVE_SIZE  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_RELATIVE_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_RELATIVE_SIZE;	  remaining    -=    DEFAULT_RELATIVE_HeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_RELATIVE_SIZE	43	None	replace
673	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  5;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  5;	  remaining    -=    1;    remaining    -=    3;    	compilable	  [FE]  ZipException  	151	1	replace
674	[BUG]  [BUGGY]  remaining  -=  5;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  5;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  5;	  remaining    -=    1;    remaining    -=    3;    	compilable	  [FE]  ZipException  	151	1	replace
675	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
676	[BUG]  [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
677	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
678	[BUG]  [BUGGY]  if(remaining!=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining!=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining!=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
679	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  ';'  expected	109	None	replace
680	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  illegal  start  of  expression  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
681	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  [CE]  not  a  statement  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  not  a  statement	109	None	replace
682	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    exception    =    relativeHeaderOffset.equals(relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
683	[BUG]  [BUGGY]  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    exception    =    relativeHeaderOffset.equals(relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
684	[BUG]  [BUGGY]  Rest  -=  1;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;  [CE]  cannot  find  symbol  Rest  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  Rest  -=  1;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	Rest  -=  1;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    exception    =    relativeHeaderOffset.equals(relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol  Rest	116	None	replace
685	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    exception    =    relativeHeaderOffset.equals(relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
686	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	53	None	replace
687	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	53	None	replace
688	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	53	None	replace
689	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	53	None	replace
690	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +=    DWORD);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
691	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +=    DWORD);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
692	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  remaining  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +=    DWORD);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
693	[BUG]  [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +=    DWORD);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
694	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    length    +    1;    remaining  -=  length  +  1;	  	compilable	  [FE]  ZipException  	61	1	add
695	[BUG]  [BUGGY]  remaining  -=  length  +  1;  remaining  -=  length  +  1;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    remaining  -=  length  +  1;	  	compilable	  [FE]  ZipException  	61	1	add
696	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.length();  remaining  -=  length  +  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
697	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length  +  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
698	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length  +  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
699	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.compareTo(remaining);  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.compareTo(remaining);  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.compareTo(remaining);  remaining  -=  length  +  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
700	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  +  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
701	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length  +  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
702	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.indexOf('  ')+  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
703	[BUG]  [BUGGY]  remainder  -=  length;  [CE]  cannot  find  symbol  remainder  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remainder  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remainder  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.charAt(remaining);    remaining    -=    length;    	non-compiled	[CE]  cannot  find  symbol  remainder	39	None	replace
704	[BUG]  [BUGGY]  remaining  -=  compressedSize  +  relativeHeaderOffset;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  compressedSize  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  compressedSize  +  relativeHeaderOffset;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    relativeHeaderOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	94	None	replace
705	[BUG]  [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset!=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	165	None	replace
706	[BUG]  [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset!=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	165	None	replace
707	[BUG]  [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset!=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	165	None	replace
708	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
709	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	155	1	replace
710	[BUG]  [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	155	1	replace
711	[BUG]  [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	155	None	replace
712	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
713	[BUG]  [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  RELATIVE_HeaderOffset  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RELATIVE_HeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RELATIVE_HeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HeaderOffset	157	None	replace
714	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RELATIVEHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	157	None	replace
715	[BUG]  [BUGGY]  RELATIVE_HEADER_Offset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  RELATIVE_HEADER_Offset  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RELATIVE_HEADER_Offset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RELATIVE_HEADER_Offset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HEADER_Offset	157	None	replace
716	[BUG]  [BUGGY]  remaining  -=  4;  remainder  -=  4;  [CE]  cannot  find  symbol  remainder  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remainder  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    remainder  -=  4;	  	non-compiled	[CE]  cannot  find  symbol  remainder	76	None	add
717	[BUG]  [BUGGY]  remaining  -=  4;  rest  -=  4;  [CE]  cannot  find  symbol  rest  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  rest  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    rest  -=  4;	  	non-compiled	[CE]  cannot  find  symbol  rest	76	None	add
718	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    4;    remaining  -=  3;	  	compilable	  [FE]  ZipException  	76	1	add
719	[BUG]  [BUGGY]  remaining  -=  4;  remaining  -=  3;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    remaining  -=  3;	  	compilable	  [FE]  ZipException  	76	1	add
720	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  5;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    4;    remaining  -=  5;	  	compilable	  [FE]  ZipException  	76	1	add
721	[BUG]  [BUGGY]  remaining  -=  4;  remaining  -=  5;  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  5;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    remaining  -=  5;	  	compilable	  [FE]  ZipException  	76	1	add
722	[BUG]  [BUGGY]  remaining  -=  4;  Rest  -=  4;  [CE]  cannot  find  symbol  Rest  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  Rest  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    Rest  -=  4;	  	non-compiled	[CE]  cannot  find  symbol  Rest	76	None	add
723	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  6;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    4;    remaining  -=  6;	  	compilable	  [FE]  ZipException  	76	1	add
724	[BUG]  [BUGGY]  remaining  -=  4;  remaining  -=  6;  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  6;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    remaining  -=  6;	  	compilable	  [FE]  ZipException  	76	1	add
725	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  8;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    4;    remaining  -=  8;	  	compilable	  [FE]  ZipException  	76	1	add
726	[BUG]  [BUGGY]  remaining  -=  4;  remaining  -=  8;  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  8;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    remaining  -=  8;	  	compilable	  [FE]  ZipException  	76	1	add
727	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	57	None	replace
728	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	57	None	replace
729	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD  +  relativeHeaderOffset;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  DWORD  +  relativeHeaderOffset;	  remaining    -=    2    *    DWORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	60	None	replace
730	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  Rest  -=  DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  Rest  -=  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  Rest  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    Rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	135	None	replace
731	[BUG]  [BUGGY]  remaining  -=  0;  Rest  -=  0;  [CE]  cannot  find  symbol  Rest  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  Rest  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  Rest  -=  0;	  remaining    -=    WORD;    Rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  Rest	135	None	replace
732	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  Rest  -=  DEFAULT_DECEMBER_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  Rest  -=  DEFAULT_DECEMBER_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE;  Rest  -=  DEFAULT_DECEMBER_SIZE;	  remaining    -=    WORD;    Rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	135	None	replace
733	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_ID;  Rest  -=  DEFAULT_DECEMBER_ID;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_ID  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_ID;  Rest  -=  DEFAULT_DECEMBER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_ID;  Rest  -=  DEFAULT_DECEMBER_ID;	  remaining    -=    WORD;    Rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_ID	135	None	replace
734	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_WORD;  Rest  -=  DEFAULT_DECEMBER_WORD;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_WORD  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_WORD;  Rest  -=  DEFAULT_DECEMBER_WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_WORD;  Rest  -=  DEFAULT_DECEMBER_WORD;	  remaining    -=    WORD;    Rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_WORD	135	None	replace
735	[BUG]  [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  offset;  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    int  offset  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  offset;	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	48	None	add
736	[BUG]  [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.compute(buffer,  offset);  remaining  -=  offset;  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.compute(buffer,  offset);  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    int  offset  =  relativeHeaderOffset.compute(buffer,  offset);  remaining  -=  offset;	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	48	None	add
737	[BUG]  [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf('n');  remaining  -=  offset;  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf('n');  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    int  offset  =  relativeHeaderOffset.indexOf('n');  remaining  -=  offset;	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	48	None	add
738	[BUG]  [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf('  ')+  length;  remaining  -=  offset;  [CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  int  offset  =  relativeHeaderOffset.indexOf('  ')+  length;  remaining  -=  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    int  offset  =  relativeHeaderOffset.indexOf('  ')+  length;  remaining  -=  offset;	  	non-compiled	[CE]  variable  offset  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	48	None	add
739	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	11	None	replace
740	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	11	None	replace
741	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	52	None	replace
742	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	52	None	replace
743	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	52	None	replace
744	[BUG]  [BUGGY]  remaining  -=  3;  Rest  -=  1;  [CE]  cannot  find  symbol  Rest  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  Rest  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  3;  Rest  -=  1;	  remaining    -=    1;    Rest    -=    1;    	non-compiled	[CE]  cannot  find  symbol  Rest	149	None	replace
745	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  0;  [CE]  illegal  start  of  expression  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  0;	  remaining    -=    2;    while    remaining    -=    2;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
746	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    1;    	compilable	  [FE]  ZipException  	115	1	replace
747	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    1;    	compilable	  [FE]  ZipException  	115	1	replace
748	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remainder  -=  1;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remainder  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remainder  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
749	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  5;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    3;    remaining  -=  1;  remaining  -=  5;	  	compilable	  [FE]  ZipException  	150	1	add
750	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  5;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  5;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    3;    remaining  -=  1;  remaining  -=  5;	  	compilable	  [FE]  ZipException  	150	1	add
751	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  6;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    3;    remaining  -=  1;  remaining  -=  6;	  	compilable	  [FE]  ZipException  	150	1	add
752	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  6;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  3;  remaining  -=  1;  remaining  -=  6;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    3;    remaining  -=  1;  remaining  -=  6;	  	compilable	  [FE]  ZipException  	150	1	add
753	[BUG]  [BUGGY]  remaining  -=  relativeHeaderOffset.DEFAULT;  [CE]  cannot  find  symbol  DEFAULT  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  relativeHeaderOffset.DEFAULT;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  relativeHeaderOffset.DEFAULT;	  remaining    -=    RelativeHeaderOffset.DEFAULT;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	124	None	replace
754	[BUG]  [BUGGY]  remaining  -=  RELATIVEHeaderOffset.DEFAULT;  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RELATIVEHeaderOffset.DEFAULT;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RELATIVEHeaderOffset.DEFAULT;	  remaining    -=    RelativeHeaderOffset.DEFAULT;    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	124	None	replace
755	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT  +  relativeHeaderOffset;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT  +  relativeHeaderOffset;	  remaining    -=    RelativeHeaderOffset.DEFAULT;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	124	None	replace
756	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    0;    	compilable	  [FE]  ZipException  	119	1	replace
757	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    0;    	compilable	  [FE]  ZipException  	119	1	replace
758	[BUG]  [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
759	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remainder  -=  0;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remainder  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remainder  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
760	[BUG]  [BUGGY]  remaining  -=  relativeHeaderOffset  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  relativeHeaderOffset  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  relativeHeaderOffset  -  1;	  remaining    -=    length    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	64	None	replace
761	[BUG]  [BUGGY]  remaining  -=  relativeHeaderOffset.length  -  1;  [CE]  cannot  find  symbol  length  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  relativeHeaderOffset.length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  relativeHeaderOffset.length  -  1;	  remaining    -=    length    -    1;    	non-compiled	[CE]  cannot  find  symbol  length	64	None	replace
762	[BUG]  [BUGGY]  remaining  -=  length  +  2;  remainder  -=  length  +  2;  [CE]  cannot  find  symbol  remainder  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  remainder  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    remainder  -=  length  +  2;	  	non-compiled	[CE]  cannot  find  symbol  remainder	65	None	add
763	[BUG]  [BUGGY]  remaining  -=  length  +  2;  rest  -=  length  +  2;  [CE]  cannot  find  symbol  rest  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  rest  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    rest  -=  length  +  2;	  	non-compiled	[CE]  cannot  find  symbol  rest	65	None	add
764	[BUG]  [BUGGY]  remaining  -=  length  +  2;  while  remaining  -=  length  +  2;  [CE]  '('  expected  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  while  remaining  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    while  remaining  -=  length  +  2;	  	non-compiled	[CE]  '('  expected	65	None	add
765	[BUG]  [BUGGY]  remaining  -=  length  +  2;  Rest  -=  length  +  2;  [CE]  cannot  find  symbol  Rest  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  Rest  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    Rest  -=  length  +  2;	  	non-compiled	[CE]  cannot  find  symbol  Rest	65	None	add
766	[BUG]  [BUGGY]  remaining  -=  length  +  2;  remaining  -=  length  +  2;  }  [CE]  illegal  start  of  type  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  remaining  -=  length  +  2;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    remaining  -=  length  +  2;  }	  	non-compiled	[CE]  illegal  start  of  type	65	None	add
767	[BUG]  [BUGGY]  remaining  -=  length  +  2;  remaining  -=  size  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  remaining  -=  size  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    remaining  -=  size  +  2;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	add
768	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  remaining  =  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    length    +    2;    remaining  =  length  +  2;	  	compilable	  [FE]  ZipException  	65	1	add
769	[BUG]  [BUGGY]  remaining  -=  length  +  2;  remaining  =  length  +  2;  [FE]  ZipException  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  remaining  =  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    remaining  =  length  +  2;	  	compilable	  [FE]  ZipException  	65	1	add
770	[BUG]  [BUGGY]  remaining  -=  length  -  2;  rest  -=  length  -  2;  [CE]  cannot  find  symbol  rest  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  rest  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    rest  -=  length  -  2;	  	non-compiled	[CE]  cannot  find  symbol  rest	171	None	add
771	[BUG]  [BUGGY]  remaining  -=  length  -  2;  int  length  -=  length  -  2;  [CE]  ';'  expected  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  int  length  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    int  length  -=  length  -  2;	  	non-compiled	[CE]  ';'  expected	171	None	add
772	[BUG]  [BUGGY]  remaining  -=  length  -  2;  Rest  -=  length  -  2;  [CE]  cannot  find  symbol  Rest  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  Rest  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    Rest  -=  length  -  2;	  	non-compiled	[CE]  cannot  find  symbol  Rest	171	None	add
773	[BUG]  [BUGGY]  remaining  -=  length  -  2;  while  remaining  -=  length  -  2;  [CE]  '('  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  while  remaining  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    while  remaining  -=  length  -  2;	  	non-compiled	[CE]  '('  expected	171	None	add
774	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  length  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    length    -    2;    length  -=  length  -  2;	  	compilable	  [FE]  ZipException  	171	1	add
775	[BUG]  [BUGGY]  remaining  -=  length  -  2;  length  -=  length  -  2;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  length  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    length  -=  length  -  2;	  	compilable	  [FE]  ZipException  	171	1	add
776	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  remaining  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    length    -    2;    remaining  -=  length  -  1;	  	compilable	  [FE]  ZipException  	171	1	add
777	[BUG]  [BUGGY]  remaining  -=  length  -  2;  remaining  -=  length  -  1;  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  remaining  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    remaining  -=  length  -  1;	  	compilable	  [FE]  ZipException  	171	1	add
778	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
779	[BUG]  [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
780	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
781	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
782	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
783	[BUG]  [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
784	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
785	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
786	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
787	[BUG]  [BUGGY]  if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  -1)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
788	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
789	[BUG]  [BUGGY]  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ZipException  	109	1	replace
790	[BUG]  [BUGGY]  remaining  -=  length;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [CE]  illegal  start  of  type  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
791	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [CE]  illegal  start  of  type  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  3;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
792	[BUG]  [BUGGY]  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	168	None	replace
793	[BUG]  [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	168	None	replace
794	[BUG]  [BUGGY]  if(length  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	168	None	replace
795	[BUG]  [BUGGY]  if(length  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	168	None	replace
796	[BUG]  [BUGGY]  relativeHeaderOffset  <  HEADER_ID>  remaining  -=  1;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  HEADER_ID>  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  HEADER_ID>  remaining  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	91	None	replace
797	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    0;    	compilable	  [FE]  ZipException  	117	1	replace
798	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    0;    	compilable	  [FE]  ZipException  	117	1	replace
799	[BUG]  [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
800	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset);  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset);  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.computeLength(buffer,  offset);  remaining  -=  length  +  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
801	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.compute(buffer,  offset);  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.compute(buffer,  offset);  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.compute(buffer,  offset);  remaining  -=  length  +  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
802	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length  +  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
803	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  >  expected	20	None	replace
804	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHe	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOff    	non-compiled	[CE]  >  expected	22	None	replace
805	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOff    	non-compiled	[CE]  >  expected	22	None	replace
806	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +=    DWORD);    remaining    -=    1;    	compilable	  [FE]  ZipException  	113	1	replace
807	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +=    DWORD);    remaining    -=    1;    	compilable	  [FE]  ZipException  	113	1	replace
808	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remainder  -=  1;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remainder  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remainder  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +=    DWORD);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
809	[BUG]  [BUGGY]  remaining  -=  1;  resolvedSize  -=  1;  [CE]  cannot  find  symbol  resolvedSize  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  resolvedSize  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  resolvedSize  -=  1;	  remaining    -=    1;    remainder    -=    1;    	non-compiled	[CE]  cannot  find  symbol  resolvedSize	148	None	replace
810	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	14	1	replace
811	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    	compilable	  [FE]  ZipException  	14	1	replace
812	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHea  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHea  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHea	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset;    	non-compiled	[CE]  >  expected	24	None	replace
813	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHea  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHea  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :(RelativeHeaderOffset  <  HEADER_ID>)relativeHea	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :(RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset;    	non-compiled	[CE]  >  expected	24	None	replace
814	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  6;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  6;	  remaining    -=    1;    remaining    -=    3;    	compilable	  [FE]  ZipException  	151	1	replace
815	[BUG]  [BUGGY]  remaining  -=  6;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  6;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  6;	  remaining    -=    1;    remaining    -=    3;    	compilable	  [FE]  ZipException  	151	1	replace
816	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressionSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  compressionSize  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressionSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressionSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  compressionSize	108	None	add
817	[BUG]  [BUGGY]  remaining  -=  2;  Rest  -=  4;  [CE]  cannot  find  symbol  Rest  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  Rest  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  Rest  -=  4;	  remaining    -=    2;    Rest    -=    2;    	non-compiled	[CE]  cannot  find  symbol  Rest	99	None	replace
818	[BUG]  [BUGGY]  remaining  -=  3;  Rest  -=  2;  [CE]  cannot  find  symbol  Rest  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  Rest  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  3;  Rest  -=  2;	  remaining    -=    2;    Rest    -=    2;    	non-compiled	[CE]  cannot  find  symbol  Rest	99	None	replace
819	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  1;  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remainder    -=    1;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
820	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remainder    -=    1;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
821	[BUG]  [BUGGY]  remaining  -=  diskStart  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  diskStart  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  diskStart  +  2;	  remaining    -=    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	47	None	replace
822	[BUG]  [BUGGY]  remaining  -=  diskStart  +  offset;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  diskStart  +  offset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  diskStart  +  offset;	  remaining    -=    diskStart;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	47	None	replace
823	[BUG]  [BUGGY]  remaining  -=  3;  remainder  -=  3;  [CE]  cannot  find  symbol  remainder  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  remainder  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    remainder  -=  3;	  	non-compiled	[CE]  cannot  find  symbol  remainder	27	None	add
824	[BUG]  [BUGGY]  remaining  -=  3;  rest  -=  3;  [CE]  cannot  find  symbol  rest  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  rest  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    rest  -=  3;	  	non-compiled	[CE]  cannot  find  symbol  rest	27	None	add
825	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    3;    remaining  -=  4;	  	compilable	  [FE]  ZipException  	27	1	add
826	[BUG]  [BUGGY]  remaining  -=  3;  remaining  -=  4;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    remaining  -=  4;	  	compilable	  [FE]  ZipException  	27	1	add
827	[BUG]  [BUGGY]  remaining  -=  3;  Rest  -=  3;  [CE]  cannot  find  symbol  Rest  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  Rest  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    Rest  -=  3;	  	non-compiled	[CE]  cannot  find  symbol  Rest	27	None	add
828	[BUG]  [BUGGY]  remaining  -=  3;  while  remaining  -=  3;  [CE]  '('  expected  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  while  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    while  remaining  -=  3;	  	non-compiled	[CE]  '('  expected	27	None	add
829	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    3;    remaining  -=  2;	  	compilable	  [FE]  ZipException  	27	1	add
830	[BUG]  [BUGGY]  remaining  -=  3;  remaining  -=  2;  [FE]  ZipException  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    remaining  -=  2;	  	compilable	  [FE]  ZipException  	27	1	add
831	[BUG]  [BUGGY]  remaining  -=  3;  other  -=  3;  [CE]  cannot  find  symbol  other  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  other  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    3;    other  -=  3;	  	non-compiled	[CE]  cannot  find  symbol  other	27	None	add
832	[BUG]  [BUGGY]  remaining  -=  relativeHeaderOffset.DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  relativeHeaderOffset.DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  relativeHeaderOffset.DEFAULT_DECEMBER;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	125	None	replace
833	[BUG]  [BUGGY]  remaining  -=  DWORD;  int  length  =  relativeHeaderOffset.length();  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DWORD;  int  length  =  relativeHeaderOffset.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DWORD;  int  length  =  relativeHeaderOffset.length();	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	42	None	replace
834	[BUG]  [BUGGY]  remaining  -=  size;  int  length  =  relativeHeaderOffset.length();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  size;  int  length  =  relativeHeaderOffset.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  size;  int  length  =  relativeHeaderOffset.length();	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	42	None	replace
835	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  2;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  >  expected	21	None	replace
836	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  4;  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  3;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  4;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  >  expected	21	None	replace
837	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  rest  -=  DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  rest  -=  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  rest  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	132	None	replace
838	[BUG]  [BUGGY]  remaining  -=  length;  rest  -=  length;  [CE]  cannot  find  symbol  rest  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  rest  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  rest  -=  length;	  remaining    -=    WORD;    rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  rest	132	None	replace
839	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  remainder  -=  DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  remainder  -=  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  remainder  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	132	None	replace
840	[BUG]  [BUGGY]  remaining  -=  0;  rest  -=  0;  [CE]  cannot  find  symbol  rest  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  rest  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  rest  -=  0;	  remaining    -=    WORD;    rest    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  rest	132	None	replace
841	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZIPEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZIPEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZIPEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
842	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
843	[BUG]  [BUGGY]  remaining  -=  READER_ID;  RelativeHeaderOffset  <  N>  remaining  -=  READER_ID;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  READER_ID;  RelativeHeaderOffset  <  N>  remaining  -=  READER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  READER_ID;  RelativeHeaderOffset  <  N>  remaining  -=  READER_ID;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
844	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECIMAL_WORD;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECIMAL_WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECIMAL_WORD;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
845	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  N>  remaining  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
846	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  N>  remaining  -=  2;  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  N>  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  N>  remaining  -=  2;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
847	[BUG]  [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [CE]  ';'  expected  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  ';'  expected	123	None	replace
848	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [CE]  ';'  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  ';'  expected	123	None	replace
849	[BUG]  [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  ';'  expected	123	None	replace
850	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  ';'  expected	123	None	replace
851	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  ';'  expected	123	None	replace
852	[BUG]  [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  }  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  }	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  ';'  expected	123	None	replace
853	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  +  length;	  remaining    -=    DEFAULT_DECEMBER    +    length;    	compilable	  [FE]  ZipException  	170	1	replace
854	[BUG]  [BUGGY]  remaining  -=  length  +  length;  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  length;	  remaining    -=    DEFAULT_DECEMBER    +    length;    	compilable	  [FE]  ZipException  	170	1	replace
855	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(relativeHeaderOffset);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(relativeHeaderOffset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(relativeHeaderOffset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    exception    =    relativeHeaderOffset.equals(relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
856	[BUG]  [BUGGY]  remaining  -=  length  -  1;  Rest  -=  length  -  1;  [CE]  cannot  find  symbol  Rest  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  Rest  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    Rest  -=  length  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Rest	63	None	add
857	[BUG]  [BUGGY]  remaining  -=  length  -  1;  while  remaining  -=  length  -  1;  [CE]  '('  expected  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  while  remaining  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    while  remaining  -=  length  -  1;	  	non-compiled	[CE]  '('  expected	63	None	add
858	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  length  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    length    -    1;    length  -=  length  -  1;	  	compilable	  [FE]  ZipException  	63	1	add
859	[BUG]  [BUGGY]  remaining  -=  length  -  1;  length  -=  length  -  1;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  length  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    length  -=  length  -  1;	  	compilable	  [FE]  ZipException  	63	1	add
860	[BUG]  [BUGGY]  remaining  -=  length  -  1;  -=  length  -  1;  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1;  -=  length  -  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    1;    -=  length  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
861	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >=    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	54	None	replace
862	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >=    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	54	None	replace
863	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  3;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >=    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	54	None	replace
864	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;	  	non-compiled	[CE]  incompatible  types	67	None	add
865	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;  remainder  -=  WORD;  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;  remainder  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;  remainder  -=  WORD;	  	non-compiled	[CE]  incompatible  types	67	None	add
866	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;  rest  -=  WORD;  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;  rest  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;  rest  -=  WORD;	  	non-compiled	[CE]  incompatible  types	67	None	add
867	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  WORD;  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  remaining  -=  WORD;	  	non-compiled	[CE]  incompatible  types	67	None	add
868	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;  while  remaining  -=  WORD;  [CE]  '('  expected  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;  while  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  WORD;  while  remaining  -=  WORD;	  	non-compiled	[CE]  '('  expected	67	None	add
869	[BUG]  [BUGGY]  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	159	None	replace
870	[BUG]  [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	159	None	replace
871	[BUG]  [BUGGY]  if(length  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	159	None	replace
872	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL_SIZE;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL_SIZE;	  remaining    -=    RelativeHeaderOffset.RELATIVE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	127	None	replace
873	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.HEIGHT_SIZE;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.HEIGHT_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.HEIGHT_SIZE;	  remaining    -=    RelativeHeaderOffset.RELATIVE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	127	None	replace
874	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	12	1	add
875	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	12	1	add
876	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	non-compiled	[CE]  incompatible  types	12	None	add
877	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  incompatible  types	12	None	add
878	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset	  	non-compiled	[CE]  ')'  expected	12	None	add
879	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    remaining    >    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	166	None	replace
880	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    remaining    >    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	166	None	replace
881	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    remaining    >    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	166	None	replace
882	[BUG]  [BUGGY]  remaining  -=  RELATIVE_HEADER_ID;  [CE]  cannot  find  symbol  RELATIVE_HEADER_ID  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RELATIVE_HEADER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RELATIVE_HEADER_ID;	  remaining    -=    DEFAULT_HEADER_ID;    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HEADER_ID	3	None	replace
883	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_DEFAULT;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_DEFAULT  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_DEFAULT;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_DEFAULT;	  remaining    -=    DEFAULT_DECIMAL_HeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_DEFAULT	130	None	replace
884	[BUG]  [BUGGY]  remaining  -=  length;  RelativeHeaderOffset  remaining  -=  length;  [CE]  ';'  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  RelativeHeaderOffset  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  RelativeHeaderOffset  remaining  -=  length;	  remaining    -=    WORD;    RelativeHeaderOffset    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	69	None	replace
885	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  remaining  -=  3;  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  remaining  -=  3;	  remaining    -=    WORD;    RelativeHeaderOffset    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	69	None	replace
886	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  remaining  -=  3;  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  3;  RelativeHeaderOffset  remaining  -=  3;	  remaining    -=    WORD;    RelativeHeaderOffset    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	69	None	replace
887	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
888	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  illegal  start  of  expression  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
889	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  	non-compiled	[CE]  ')'  expected	9	None	add
890	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	9	1	add
891	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	compilable	  [FE]  ZipException  	9	1	add
892	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	compilable	  [FE]  ZipException  	111	1	replace
893	[BUG]  [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [FE]  ZipException  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	compilable	  [FE]  ZipException  	111	1	replace
894	[BUG]  [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
895	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  buffer.length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  buffer.length  +  1;	  remaining    -=    size    +    1;    	compilable	  [FE]  ZipException  	45	1	replace
896	[BUG]  [BUGGY]  remaining  -=  buffer.length  +  1;  [FE]  ZipException  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  buffer.length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  buffer.length  +  1;	  remaining    -=    size    +    1;    	compilable	  [FE]  ZipException  	45	1	replace
897	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
898	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  	non-compiled	[CE]  ')'  expected	106	None	add
899	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  illegal  start  of  expression  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
900	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +  [CE]  illegal  start  of  expression  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
901	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  2;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  2;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
902	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  1;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  1;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
903	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_STATE;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_STATE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_STATE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
904	[BUG]  [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);  remaining  -=  1;  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG,    relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  >  expected	56	None	replace
905	[BUG]  [BUGGY]  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);  remaining  -=  1;  [CE]  not  a  statement  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG,  relativeHeaderOffset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG,    relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  not  a  statement	56	None	replace
906	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  while  remaining  -=  0;  remaining  -=  0;  [CE]  '('  expected  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  while  remaining  -=  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    while  remaining  -=  0;  remaining  -=  0;	  	non-compiled	[CE]  '('  expected	85	None	add
907	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  remainder  -=  0;  [CE]  cannot  find  symbol  remainder  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  remainder  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    remaining  -=  0;  remainder  -=  0;	  	non-compiled	[CE]  cannot  find  symbol  remainder	85	None	add
908	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0.0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        0;        remaining    -=    0;    remaining  -=  0.0;  remaining  -=  0;	  	compilable	  [FE]  ZipException  	85	1	add
909	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0.0;  remaining  -=  0;  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0.0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    remaining  -=  0.0;  remaining  -=  0;	  	compilable	  [FE]  ZipException  	85	1	add
910	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	164	None	replace
911	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_S  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_S  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_S	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	164	None	replace
912	[BUG]  [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  RELATIVEHeaderOffset  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RELATIVEHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  RELATIVEHeaderOffset	8	None	replace
913	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
914	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);  remainder  -=  0;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);  remainder  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  diskStart  =  new  ZipLong(buffer,  offset);  remainder  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
915	[BUG]  [BUGGY]  remaining  -=  compressionHeaderOffset,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  compressionHeaderOffset,  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  compressionHeaderOffset,  relativeHeaderOffset;	  remaining    -=    size,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	46	None	replace
916	[BUG]  [BUGGY]  remaining  -=  compressSize,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  compressSize,  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  compressSize,  relativeHeaderOffset;	  remaining    -=    size,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	46	None	replace
917	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset;	  remaining    -=    DEFAULT_DECIMAL_HEADER;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	131	None	replace
918	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
919	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
920	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  	non-compiled	[CE]  incompatible  types	15	None	add
921	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  incompatible  types	15	None	add
922	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset	  	non-compiled	[CE]  ')'  expected	15	None	add
923	[BUG]  [BUGGY]  remaining  -=  length  +  DEFAULT_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  DEFAULT_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  DEFAULT_HAVE_BOTH_SIZES_MSG;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    length;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HAVE_BOTH_SIZES_MSG	32	None	replace
924	[BUG]  [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    WORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	138	None	replace
925	[BUG]  [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    WORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	138	None	replace
926	[BUG]  [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [CE]  illegal  start  of  type  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  }	  remaining    -=    WORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
927	[BUG]  [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  WORD;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  WORD;	  remaining    -=    WORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	138	None	replace
928	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BO  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BO  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BO	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    ==    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	55	None	replace
929	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	30	None	replace
930	[BUG]  [BUGGY]  remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  relativeHeaderOffset;  [CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  relativeHeaderOffset;	  remaining    -=    DEFAULT_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG	30	None	replace
931	[BUG]  [BUGGY]  remaining  -=  relativeHeaderOffset  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  relativeHeaderOffset  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  relativeHeaderOffset  +  2;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	31	None	replace
932	[BUG]  [BUGGY]  remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  2;  [CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG  +  2;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    2;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MUST_HAVE_BOTH_SIZES_MSG	31	None	replace
933	[BUG]  [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_  [CE]  >  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  >  expected	162	None	replace
934	[BUG]  [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  >  expected	162	None	replace
935	[BUG]  [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  >  expected	162	None	replace
936	[BUG]  [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  >  expected	162	None	replace
937	[BUG]  [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  >  expected	162	None	replace
938	[BUG]  [BUGGY]  relativeHeaderOffset  =  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  =  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  =  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	162	None	replace
939	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  2  *  DWORD;  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  remaining  -=  2  *  DWORD;	  	non-compiled	[CE]  incompatible  types	59	None	add
940	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  2  *  DWORD;	  	non-compiled	[CE]  incompatible  types	59	None	add
941	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  2  *  DWORD;  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    int  diskStart  =  new  ZipLong(buffer,  offset);  remaining  -=  2  *  DWORD;	  	non-compiled	[CE]  incompatible  types	59	None	add
942	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;	  	non-compiled	[CE]  incompatible  types	59	None	add
943	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DEFAULT_DECIMAL_SIZE;  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DEFAULT_DECIMAL_SIZE;	  	non-compiled	[CE]  incompatible  types	59	None	add
944	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  2  *  DWORD;  [CE]  incompatible  types  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  2  *  DWORD;	  	non-compiled	[CE]  incompatible  types	59	None	add
945	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DEFAULT_DECIMAL_MSG;  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DEFAULT_DECIMAL_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    int  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DEFAULT_DECIMAL_MSG;	  	non-compiled	[CE]  incompatible  types	59	None	add
946	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  remainder  -=  DEFAULT_DECIMAL_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  remainder  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  remainder  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    remainder    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	133	None	replace
947	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  remainder  -=  DEFAULT_DECEMBER_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  remainder  -=  DEFAULT_DECEMBER_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE;  remainder  -=  DEFAULT_DECEMBER_SIZE;	  remaining    -=    WORD;    remainder    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	133	None	replace
948	[BUG]  [BUGGY]  remaining  -=  length;  remainder  -=  length;  [CE]  cannot  find  symbol  remainder  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  remainder  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  remainder  -=  length;	  remaining    -=    WORD;    remainder    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  remainder	133	None	replace
949	[BUG]  [BUGGY]  remaining  -=  relativeHeaderOffset  *  2;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  relativeHeaderOffset  *  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  relativeHeaderOffset  *  2;	  remaining    -=    DEFAULT_DECEMBER_SIZE    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	81	None	replace
950	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  *  2  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE  *  2  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE  *  2  +  1;	  remaining    -=    DEFAULT_DECEMBER_SIZE    *    2;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER_SIZE	81	None	replace
951	[BUG]  [BUGGY]  if(remaining  ==  -1)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  ==  -1)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  ==  -1)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	110	None	replace
952	[BUG]  [BUGGY]  remaining  -=  relativeHeaderOffset.length  +  2;  [CE]  cannot  find  symbol  length  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  relativeHeaderOffset.length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  relativeHeaderOffset.length  +  2;	  remaining    -=    relativeHeaderOffset.length;    	non-compiled	[CE]  cannot  find  symbol  length	96	None	replace
953	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [CE]  >  expected  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	161	None	replace
954	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  while  remaining  -=  DEFAULT_DECIMAL_SIZE;  [CE]  '('  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  while  remaining  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  while  remaining  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    while    remaining    -=    WORD;    	non-compiled	[CE]  '('  expected	134	None	replace
955	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  while  remaining  -=  DEFAULT_DECEMBER;  [CE]  '('  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  while  remaining  -=  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  while  remaining  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    while    remaining    -=    WORD;    	non-compiled	[CE]  '('  expected	134	None	replace
956	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  while  remaining  -=  DEFAULT_DECEMBER_SIZE;  [CE]  '('  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_SIZE;  while  remaining  -=  DEFAULT_DECEMBER_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_SIZE;  while  remaining  -=  DEFAULT_DECEMBER_SIZE;	  remaining    -=    WORD;    while    remaining    -=    WORD;    	non-compiled	[CE]  '('  expected	134	None	replace
957	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  while  remaining  -=  DEFAULT_DECLARATION;  [CE]  '('  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  while  remaining  -=  DEFAULT_DECLARATION;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECLARATION;  while  remaining  -=  DEFAULT_DECLARATION;	  remaining    -=    WORD;    while    remaining    -=    WORD;    	non-compiled	[CE]  '('  expected	134	None	replace
958	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	167	None	replace
959	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  relativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	167	None	replace
960	[BUG]  [BUGGY]  remaining  -=  0,  relativeHeaderOffset  =  relativeHeaderOffset.length();  remaining  -=  0;  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0,  relativeHeaderOffset  =  relativeHeaderOffset.length();  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0,  relativeHeaderOffset  =  relativeHeaderOffset.length();  remaining  -=  0;	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	89	None	replace
961	[BUG]  [BUGGY]  remaining  -=  0,  relativeHeaderOffset.length();  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0,  relativeHeaderOffset.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0,  relativeHeaderOffset.length();	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	89	None	replace
962	[BUG]  [BUGGY]  rest  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remainder  -=  0;  [CE]  cannot  find  symbol  rest  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  rest  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remainder  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	rest  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remainder  -=  0;	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol  rest	89	None	replace
963	[BUG]  [BUGGY]  remaining  -=  0;  System.arraycopy(relativeHeaderOffset,  offset,  diskStart,  length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  System.arraycopy(relativeHeaderOffset,  offset,  diskStart,  length);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  System.arraycopy(relativeHeaderOffset,  offset,  diskStart,  length);	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	89	None	replace
964	[BUG]  [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	158	None	replace
965	[BUG]  [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	158	None	replace
966	[BUG]  [BUGGY]  remaining  -=  RELATIVE_SIZE  +  1;  [CE]  cannot  find  symbol  RELATIVE_SIZE  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RELATIVE_SIZE  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RELATIVE_SIZE  +  1;	  remaining    -=    DEFAULT_DECEMBER    +    1;    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_SIZE	2	None	replace
967	[BUG]  [BUGGY]  remaining  -=  discStart  +  1;  [CE]  cannot  find  symbol  discStart  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  discStart  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  discStart  +  1;	  remaining    -=    DEFAULT_DECEMBER    +    1;    	non-compiled	[CE]  cannot  find  symbol  discStart	2	None	replace
968	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    2;    remaining  -=  2;  remaining  -=  4;	  	compilable	  [FE]  ZipException  	17	1	add
969	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  4;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  4;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    2;    remaining  -=  2;  remaining  -=  4;	  	compilable	  [FE]  ZipException  	17	1	add
970	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  remaining  -=  DEFAULT_DECIMAL_WORD;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_WORD  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  remaining  -=  DEFAULT_DECIMAL_WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_WORD;  remaining  -=  DEFAULT_DECIMAL_WORD;	  remaining    -=    WORD;    remaining    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_WORD	68	None	replace
971	[BUG]  [BUGGY]  remaining  -=  length;  other  -=  length;  [CE]  cannot  find  symbol  other  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  other  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  other  -=  length;	  remaining    -=    WORD;    other    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  other	136	None	replace
972	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  other  -=  DEFAULT_DECIMAL_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  other  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  other  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    other    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	136	None	replace
973	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  other  -=  DEFAULT_DECEMBER;  [CE]  cannot  find  symbol  DEFAULT_DECEMBER  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  other  -=  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  other  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    other    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECEMBER	136	None	replace
974	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  2;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        1;        remaining    -=    2;    remaining  -=  2;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	145	1	add
975	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  2;  remaining  -=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  2;  remaining  -=  2;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    2;    remaining  -=  2;  remaining  -=  2;	  	compilable	  [FE]  ZipException  	145	1	add
976	[BUG]  [BUGGY]  remaining  -=  RELATIVE_DECIMAL_WORD;  [CE]  cannot  find  symbol  RELATIVE_DECIMAL_WORD  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RELATIVE_DECIMAL_WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RELATIVE_DECIMAL_WORD;	  remaining    -=    DEFAULT_DECIMAL_WORD;    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_DECIMAL_WORD	160	None	replace
977	[BUG]  [BUGGY]  remaining  -=  2  *  HEADER_ID;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  HEADER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  HEADER_ID;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	19	None	replace
978	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER_ID;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER_ID;  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER_ID;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER_ID;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER_ID;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
979	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
980	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER;  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
981	[BUG]  [BUGGY]  remaining  -=  READER_ID;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  READER_ID;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  READER_ID;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  READER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  READER_ID;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  READER_ID;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
982	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER_ID;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  DEFAULT_DECEMBER_ID;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
983	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  2;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  2;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
984	[BUG]  [BUGGY]  relativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  2;  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  remaining  -=  2;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID?    LFH_MUST_HAVE_BOTH_SIZES_MSG    :    relativeHeaderOffset);    remaining    -=    2;    	non-compiled	[CE]  >  expected	25	None	replace
985	[BUG]  [BUGGY]  remaining  -=  2  *  diskHeaderOffset;  [CE]  cannot  find  symbol  diskHeaderOffset  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  diskHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  *  diskHeaderOffset;	  remaining    -=    2    *    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  diskHeaderOffset	139	None	replace
986	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  2;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  2;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    rest    -=    0;    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
987	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  0;  [CE]  cannot  find  symbol  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    rest    -=    0;    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
988	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  1;  [CE]  cannot  find  symbol  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  rest  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    rest    -=    0;    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
989	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  &&  relativeHeaderOffset  ==  0);  [CE]  illegal  start  of  type  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  &&  relativeHeaderOffset  ==  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  0  &&  relativeHeaderOffset  ==  0);	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
990	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  1;  remaining  -=  1);  [CE]  ';'  expected  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  1;  remaining  -=  1);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    1;    remaining  -=  1;  remaining  -=  1);	  	non-compiled	[CE]  ';'  expected	50	None	add
991	[BUG]  [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  diskStart  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  diskStart  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  diskStart  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    WORD;    second    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	137	None	replace
992	[BUG]  [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remainder  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remainder  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remainder  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    WORD;    second    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	137	None	replace
993	[BUG]  [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  second  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  second  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  second  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    WORD;    second    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	137	None	replace
994	[BUG]  [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  0;  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  rest  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remainder    -=    0;    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
995	[BUG]  [BUGGY]  remainder  -=  0;  [CE]  cannot  find  symbol  remainder  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remainder  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remainder  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remainder    -=    0;    	non-compiled	[CE]  cannot  find  symbol  remainder	118	None	replace
996	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	13	1	replace
997	[BUG]  [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	13	1	replace
998	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	13	1	replace
999	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	13	1	replace
1000	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	13	1	replace
1001	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	13	1	replace
1002	[BUG]  [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [CE]  illegal  start  of  type  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1003	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [CE]  illegal  start  of  type  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  3;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1004	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  &&  relativeHeaderOffset  >  0;  [CE]  illegal  start  of  type  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  &&  relativeHeaderOffset  >  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  0  &&  relativeHeaderOffset  >  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1005	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  relativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	53	None	replace
1006	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  <  LFH_MUST_HAVE  ||  relativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	53	None	replace
1007	[BUG]  [BUGGY]  remaining  -=  1;  compressedSize  -=  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  compressedSize  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  compressedSize  -=  1;	  remaining    -=    1;    rest    -=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	147	None	replace
1008	[BUG]  [BUGGY]  relativeHeaderOffset  <  T>  remaining  -=  0;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  T>  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  T>  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    T>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	92	None	replace
1009	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  *  2  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  *  2  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE  *  2  +  1;	  remaining    -=    DEFAULT_DECIMAL_SIZE    *    2;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	33	None	replace
1010	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  *  2  +  length;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  *  2  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE  *  2  +  length;	  remaining    -=    DEFAULT_DECIMAL_SIZE    *    2;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	33	None	replace
1011	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  while  remaining  -=  length;  remaining  -=  length;  [CE]  '('  expected  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  while  remaining  -=  length;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    while  remaining  -=  length;  remaining  -=  length;	  	non-compiled	[CE]  '('  expected	34	None	add
1012	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  Rest  -=  length;  remaining  -=  length;  [CE]  cannot  find  symbol  Rest  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  Rest  -=  length;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    Rest  -=  length;  remaining  -=  length;	  	non-compiled	[CE]  cannot  find  symbol  Rest	34	None	add
1013	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remainder  -=  length;  [CE]  cannot  find  symbol  remainder  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remainder  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    remaining  -=  length;  remainder  -=  length;	  	non-compiled	[CE]  cannot  find  symbol  remainder	34	None	add
1014	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remaining  -=  length;  }  [CE]  illegal  start  of  type  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  }	  	non-compiled	[CE]  illegal  start  of  type	34	None	add
1015	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    int  length  =  relativeHeaderOffset.length();	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	34	None	add
1016	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  2;  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  2;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID?    LFH_MUST_HAVE_BOTH_SIZES_MSG    :    relativeHeaderOffset));    remaining    -=    2;    	non-compiled	[CE]  >  expected	23	None	replace
1017	[BUG]  [BUGGY]  relativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  2;  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  2;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID?    LFH_MUST_HAVE_BOTH_SIZES_MSG    :    relativeHeaderOffset));    remaining    -=    2;    	non-compiled	[CE]  >  expected	23	None	replace
1018	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  1;  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset));  remaining  -=  1;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID?    LFH_MUST_HAVE_BOTH_SIZES_MSG    :    relativeHeaderOffset));    remaining    -=    2;    	non-compiled	[CE]  >  expected	23	None	replace
1019	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	16	1	replace
1020	[BUG]  [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	16	1	replace
1021	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	16	1	replace
1022	[BUG]  [BUGGY]  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	16	1	replace
1023	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
1024	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECEMBER;  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECEMBER;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECEMBER;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECEMBER;	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
1025	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECLARATION;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECLARATION;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECLARATION;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECLARATION;	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
1026	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECLINE;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECLINE;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECLINE;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECLINE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECLINE;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECLINE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
1027	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_WORD;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_WORD;	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
1028	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_WORD;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
1029	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_STATE;  [CE]  ';'  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_STATE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  T>  remaining  -=  DEFAULT_DECIMAL_STATE;	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
1030	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  2;  remaining  -=  1;  [CE]  incompatible  types  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    remaining  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  2;  remaining  -=  1;	  	non-compiled	[CE]  incompatible  types	103	None	add
1031	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  2;  remaining  -=  1;  [CE]  incompatible  types  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    remaining  =  new  ZipEightByteInteger(buffer,  offset  +=  DWORD);  remaining  -=  2;  remaining  -=  1;	  	non-compiled	[CE]  incompatible  types	103	None	add
1032	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  2;  remaining  -=  1;  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    remaining  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  2;  remaining  -=  1;	  	non-compiled	[CE]  incompatible  types	103	None	add
1033	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  =  new  ZipEightByteInteger(remaining);  remaining  -=  2;  remaining  -=  1;  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  =  new  ZipEightByteInteger(remaining);  remaining  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    remaining  =  new  ZipEightByteInteger(remaining);  remaining  -=  2;  remaining  -=  1;	  	non-compiled	[CE]  incompatible  types	103	None	add
1034	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  =  new  ZipEightByteInteger(data,  offset);  remaining  -=  2;  remaining  -=  1;  [CE]  cannot  find  symbol  data  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  =  new  ZipEightByteInteger(data,  offset);  remaining  -=  2;  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    remaining  =  new  ZipEightByteInteger(data,  offset);  remaining  -=  2;  remaining  -=  1;	  	non-compiled	[CE]  cannot  find  symbol  data	103	None	add
1035	[BUG]  [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);  [CE]  illegal  start  of  type  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0);	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1036	[BUG]  [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0);  [CE]  illegal  start  of  type  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0);	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1037	[BUG]  [BUGGY]  remaining  -=  relativeHeaderOffset.DEFAULT_DECIMAL;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  relativeHeaderOffset.DEFAULT_DECIMAL;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  relativeHeaderOffset.DEFAULT_DECIMAL;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECIMAL;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL	126	None	replace
1038	[BUG]  [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  relativeHeaderOffset;  [CE]  cannot  find  symbol  RelativeHeaderOffset  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  RelativeHeaderOffset.DEFAULT_DECIMAL  +  relativeHeaderOffset;	  remaining    -=    RelativeHeaderOffset.DEFAULT_DECIMAL;    	non-compiled	[CE]  cannot  find  symbol  RelativeHeaderOffset	126	None	replace
1039	[BUG]  [BUGGY]  RELATIVE_HEADER_Offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [CE]  cannot  find  symbol  RELATIVE_HEADER_Offset  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RELATIVE_HEADER_Offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RELATIVE_HEADER_Offset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_HEADER_Offset	154	None	replace
1040	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1041	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1042	[BUG]  [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  3;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  3;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1043	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	156	None	replace
1044	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  2;  }  [CE]  illegal  start  of  type  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  remaining  -=  2;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    2;    remaining  -=  2;  remaining  -=  2;  }	  	non-compiled	[CE]  illegal  start  of  type	17	None	add
1045	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  while(remaining  >  0)  {  remaining  -=  0;  remaining  -=  0;  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  while(remaining  >  0)  {  remaining  -=  0;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    while(remaining  >  0)  {  remaining  -=  0;  remaining  -=  0;	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
1046	[BUG]  [BUGGY]  timeout  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  while(remaining  >  0)  {  remaining  -=  0;  remaining  -=  0;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        0;        remaining    -=    0;    while(remaining  >  0)  {  remaining  -=  0;  remaining  -=  0;  }	  	compilable	timeout	85	1	add
1047	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  while(remaining  >  0)  {  remaining  -=  0;  remaining  -=  0;  }  timeout  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  while(remaining  >  0)  {  remaining  -=  0;  remaining  -=  0;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    while(remaining  >  0)  {  remaining  -=  0;  remaining  -=  0;  }	  	compilable	timeout	85	1	add
1048	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  remaining  -=  0;  System.arraycopy(buffer,  offset  +  1,  relativeHeaderOffset,  compressedSize);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  remaining  -=  0;  System.arraycopy(buffer,  offset  +  1,  relativeHeaderOffset,  compressedSize);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  System.arraycopy(buffer,  offset  +  1,  relativeHeaderOffset,  compressedSize);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	85	None	add
1049	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  remaining  -=  0;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  length  -  2  *  DWORD);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  remaining  -=  0;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  length  -  2  *  DWORD);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  length  -  2  *  DWORD);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	85	None	add
1050	[BUG]  [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  remaining  -=  0;  System.arraycopy(buffer,  offset  +  1,  relativeHeaderOffset,  compressedSize,  size  -  2  *  DWORD);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  remaining  -=  0;  System.arraycopy(buffer,  offset  +  1,  relativeHeaderOffset,  compressedSize,  size  -  2  *  DWORD);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        0;        remaining    -=    0;    remaining  -=  0;  remaining  -=  0;  System.arraycopy(buffer,  offset  +  1,  relativeHeaderOffset,  compressedSize,  size  -  2  *  DWORD);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	85	None	add
1051	[BUG]  [BUGGY]  remaining  -=  discStart  +  2;  [CE]  cannot  find  symbol  discStart  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  discStart  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  discStart  +  2;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    2;    	non-compiled	[CE]  cannot  find  symbol  discStart	79	None	replace
1052	[BUG]  [BUGGY]  remaining  -=  width  +  2;  [CE]  cannot  find  symbol  width  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  width  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  width  +  2;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    2;    	non-compiled	[CE]  cannot  find  symbol  width	79	None	replace
1053	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  +  1  *  DWORD;	  remaining    -=    length    +    1;    	compilable	  [FE]  ZipException  	62	1	replace
1054	[BUG]  [BUGGY]  remaining  -=  length  +  1  *  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  +  1  *  DWORD;	  remaining    -=    length    +    1;    	compilable	  [FE]  ZipException  	62	1	replace
1055	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ')+    1;    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	37	None	replace
1056	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  remaining  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;  }  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  remaining  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  remaining  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ')+    1;    remaining    -=    length;    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1057	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  remaining  =  relativeHeaderOffset.indexOf('  ')+  1;  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  remaining  =  relativeHeaderOffset.indexOf('  ')+  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  remaining  =  relativeHeaderOffset.indexOf('  ')+  1;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ')+    1;    remaining    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
1058	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  remaining  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  remaining  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  remaining  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ')+    1;    remaining    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
1059	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf('  ')+  1;  remaining  -=  length  +  1;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ')+    1;    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	37	None	replace
1060	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ')+  2;  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ')+  2;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf('  ')+  2;  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ')+    1;    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	37	None	replace
1061	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	164	None	replace
1062	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	164	None	replace
1063	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  length;  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  length;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
1064	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  READER_ID;  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  READER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID>  remaining  -=  READER_ID;	  remaining    -=    WORD;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	70	None	replace
1065	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  }  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	36	None	replace
1066	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.length();  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	36	None	replace
1067	[BUG]  [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    remaining    -=    length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	36	None	replace
1068	[BUG]  [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  [CE]  illegal  start  of  expression  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    remaining    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1069	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    remaining    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1070	[BUG]  [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    remaining    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1071	[BUG]  [BUGGY]  remaining  -=  1;  rest  -=  2;  [CE]  cannot  find  symbol  rest  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  rest  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  rest  -=  2;	  remaining    -=    2;    rest    -=    2;    	non-compiled	[CE]  cannot  find  symbol  rest	97	None	replace
1072	[BUG]  [BUGGY]  remaining  -=  width  +  1;  [CE]  cannot  find  symbol  width  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  width  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  width  +  1;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    1;    	non-compiled	[CE]  cannot  find  symbol  width	78	None	replace
1073	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  cannot  find  symbol  referHeaderOffset  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  referHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  	non-compiled	[CE]  cannot  find  symbol  referHeaderOffset	5	None	add
1074	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    	non-compiled	[CE]  ')'  expected	14	None	replace
1075	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  HEADER_ID;  remaining  -=  WORD;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  HEADER_ID;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  HEADER_ID;  remaining  -=  WORD;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	67	None	add
1076	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  BORD;  remaining  -=  WORD;  [CE]  cannot  find  symbol  BORD  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  BORD;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  BORD;  remaining  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  BORD	67	None	add
1077	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remaining  -=  WORD;  }  [CE]  illegal  start  of  type  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remaining  -=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  }	  	non-compiled	[CE]  illegal  start  of  type	67	None	add
1078	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remainder  -=  WORD;  [CE]  cannot  find  symbol  remainder  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  WORD;  remainder  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  WORD;  remainder  -=  WORD;	  	non-compiled	[CE]  cannot  find  symbol  remainder	67	None	add
1079	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  length;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  length;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	67	1	add
1080	[BUG]  [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  length;  remaining  -=  WORD;  [FE]  ZipException  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    WORD;    remaining  -=  WORD;  remaining  -=  length;  remaining  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        WORD;        remaining    -=    WORD;    remaining  -=  length;  remaining  -=  WORD;	  	compilable	  [FE]  ZipException  	67	1	add
1081	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    remaining    >    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	166	None	replace
1082	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    remaining    >    LFH_MUST_HAVE_BOTH_SIZES_MSG;    	non-compiled	[CE]  >  expected	166	None	replace
1083	[BUG]  [BUGGY]  remaining  -=  DWORD;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DWORD;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DWORD;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1084	[BUG]  [BUGGY]  remaining  -=  buffer.length  +  relativeHeaderOffset;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  buffer.length  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  buffer.length  +  relativeHeaderOffset;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    relativeHeaderOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	128	None	replace
1085	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf('  ');  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ');    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	41	None	replace
1086	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ',  remaining  -=  length);  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ',  remaining  -=  length);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf('  ',  remaining  -=  length);	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ');    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	41	None	replace
1087	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ',  remaining);  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ',  remaining);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf('  ',  remaining);	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ');    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	41	None	replace
1088	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ',  remaining);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf('  ',  remaining);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf('  ',  remaining);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ');    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	41	None	replace
1089	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	while(remaining  >  0)  {  remaining  -=  length;  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ');    remaining    -=    length;    	compilable	  [FE]  ZipException  	41	1	replace
1090	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  remaining  -=  length;  }  [FE]  ZipException  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf('    ');    remaining    -=    length;    	compilable	  [FE]  ZipException  	41	1	replace
1091	[BUG]  [BUGGY]  remaining  -=  0;  remainder  -=  0;  [CE]  cannot  find  symbol  remainder  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  remainder  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  remainder  -=  0;	  remaining    -=    WORD;    remainder    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  remainder	133	None	replace
1092	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  <  0)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	109	None	replace
1093	[BUG]  [BUGGY]  if(relativeHeaderOffset  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  >=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	109	None	replace
1094	[BUG]  [BUGGY]  while(relativeHeaderOffset  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(relativeHeaderOffset  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(relativeHeaderOffset  <  length)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	109	None	replace
1095	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	while(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	109	1	replace
1096	[BUG]  [BUGGY]  while(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	109	1	replace
1097	[BUG]  [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [CE]  illegal  start  of  type  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  >  0;	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1098	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2  *  DWORD;  [CE]  >  expected  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2  *  DWORD;	  	non-compiled	[CE]  >  expected	59	None	add
1099	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  >  expected  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  	non-compiled	[CE]  >  expected	59	None	add
1100	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2  *  DWORD;  [CE]  >  expected  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2  *  DWORD;	  	non-compiled	[CE]  >  expected	59	None	add
1101	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  2  *  DWORD;  [CE]  >  expected  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  2  *  DWORD;	  	non-compiled	[CE]  >  expected	59	None	add
1102	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  >  expected  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  ==  LFH_MUST_HAVE_BOTH_SIZES_MSG;	  	non-compiled	[CE]  >  expected	59	None	add
1103	[BUG]  [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2  *  DWORD;  [CE]  >  expected  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  *  DWORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    2    *    DWORD;    RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset!=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  2  *  DWORD;	  	non-compiled	[CE]  >  expected	59	None	add
1104	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	while(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
1105	[BUG]  [BUGGY]  while(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
1106	[BUG]  [BUGGY]  while(relativeHeaderOffset  <  length)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(relativeHeaderOffset  <  length)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(relativeHeaderOffset  <  length)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	6	None	replace
1107	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  [CE]  not  a  statement  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
1108	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	110	None	replace
1109	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  ';')  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  ';')  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  ';')  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	110	None	replace
1110	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	110	None	replace
1111	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	110	None	replace
1112	[BUG]  [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInt  [CE]  '('  or  '['  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(length  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInt  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(length  >  0)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInt	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  '('  or  '['  expected	159	None	replace
1113	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInt  [CE]  '('  or  '['  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  DWORD)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInt  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  DWORD)  {  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInt	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  '('  or  '['  expected	159	None	replace
1114	[BUG]  [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  0,  length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  0,  length);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  0,  length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	48	None	add
1115	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  this.diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    offset;    remaining  -=  offset;  this.diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;	  	compilable	  [FE]  ZipException  	48	1	add
1116	[BUG]  [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  this.diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  this.diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    remaining  -=  offset;  this.diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;	  	compilable	  [FE]  ZipException  	48	1	add
1117	[BUG]  [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  this.diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  HEADER_ID;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  this.diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  HEADER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    remaining  -=  offset;  this.diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  HEADER_ID;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	48	None	add
1118	[BUG]  [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  length);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	48	None	add
1119	[BUG]  [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  length  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  length  -  1);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  length  -  1);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	48	None	add
1120	[BUG]  [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  buffer.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  buffer.length);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  buffer.length);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	48	None	add
1121	[BUG]  [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  rest);  [CE]  cannot  find  symbol  rest  [FE]                ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset;  remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  rest);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    offset;    remaining  -=  offset;  System.arraycopy(buffer,  offset,  compressedSize,  relativeHeaderOffset,  rest);	  	non-compiled	[CE]  cannot  find  symbol  rest	48	None	add
1122	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset	  	non-compiled	[CE]  ')'  expected	15	None	add
1123	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);  [CE]  >  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG,  remaining);	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG,    relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  >  expected	56	None	replace
1124	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID?  LFH_MUST_HAVE_BOTH_SIZES_MSG  :  relativeHeaderOffset);	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID?    LFH_MUST_HAVE_BOTH_SIZES_MSG    :    relativeHeaderOffset);    remaining    -=    2;    	non-compiled	[CE]  >  expected	25	None	replace
1125	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	153	None	replace
1126	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_  [CE]  >  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE_	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE_    	non-compiled	[CE]  >  expected	58	None	replace
1127	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  remaining  -=  length;  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  N>  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  N>  remaining  -=  length;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
1128	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  remaining  -=  READER_ID;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  N>  remaining  -=  READER_ID;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  N>  remaining  -=  READER_ID;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
1129	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  remaining  -=  ';';  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  N>  remaining  -=  ';';  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  N>  remaining  -=  ';';	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
1130	[BUG]  [BUGGY]  RelativeHeaderOffset  <  N>  remaining  -=  2;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  N>  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  N>  remaining  -=  2;	  remaining    -=    WORD;    RelativeHeaderOffset    <    N>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	72	None	replace
1131	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  >  0);  [CE]  illegal  start  of  type  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  >  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  0  ||  compressedSize  >  0);	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
1132	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [CE]  cannot  find  symbol  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  DWORD);	  remaining    -=    0;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset    +    DWORD);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
1133	[BUG]  [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [CE]  illegal  start  of  type  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  0  ||  relativeHeaderOffset  ==  0;	  remaining    -=    0;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
1134	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  2;  remaining  -=  3;  }  [CE]  illegal  start  of  type  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  3;  remaining  -=  2;  remaining  -=  3;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    3;    remaining  -=  2;  remaining  -=  3;  }	  	non-compiled	[CE]  illegal  start  of  type	101	None	add
1135	[BUG]  [BUGGY]  remaining  -=  length  -  2;  -=  length  -  2;  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  2;  -=  length  -  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    -    2;    -=  length  -  2;	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
1136	[BUG]  [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >>  LFH_MUST_HAVE  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >>  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >>  LFH_MUST_HAVE	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	167	None	replace
1137	[BUG]  [BUGGY]  remaining  -=  SHORT_SIZE;  [CE]  cannot  find  symbol  SHORT_SIZE  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  SHORT_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  SHORT_SIZE;	  remaining    -=    compressionHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  SHORT_SIZE	129	None	replace
1138	[BUG]  [BUGGY]  remaining  -=  SHORT_WORD;  [CE]  cannot  find  symbol  SHORT_WORD  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  SHORT_WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  SHORT_WORD;	  remaining    -=    compressionHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  SHORT_WORD	129	None	replace
1139	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.computeLength(buffer,  offset);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeLength(buffer,    offset);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	141	None	replace
1140	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset  +  1);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset  +  1);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.computeLength(buffer,  offset  +  1);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeLength(buffer,    offset);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	141	None	replace
1141	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset  +  2);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset  +  2);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.computeLength(buffer,  offset  +  2);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeLength(buffer,    offset);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	141	None	replace
1142	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeLength(buffer,    offset);    remaining    -=    length;    	compilable	  [FE]  ZipException  	141	1	replace
1143	[BUG]  [BUGGY]  while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeLength(buffer,    offset);    remaining    -=    length;    	compilable	  [FE]  ZipException  	141	1	replace
1144	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_HEADER  +  1;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_HEADER  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_HEADER  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_HEADER  +  1;	  remaining    -=    DEFAULT_DECIMAL_HEADER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_HEADER	131	None	replace
1145	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_STANDARD;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_STANDARD  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_STANDARD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_STANDARD;	  remaining    -=    DEFAULT_DECIMAL_HEADER;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_STANDARD	131	None	replace
1146	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	52	None	replace
1147	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  <  LFH_MUST_HAVE  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  <  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  <  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	52	None	replace
1148	[BUG]  [BUGGY]  remaining  -=  compressedSize  +  length;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  compressedSize  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  compressedSize  +  length;	  remaining    -=    compressedSize;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	44	None	replace
1149	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1150	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  }  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	42	None	replace
1151	[BUG]  [BUGGY]  long  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  [CE]  ';'  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  long  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	long  remaining  -=  length;  int  length  =  relativeHeaderOffset.length();	  remaining    -=    length;    int    length    =    relativeHeaderOffset.length();    	non-compiled	[CE]  ';'  expected	42	None	replace
1152	[BUG]  [BUGGY]  remaining  -=  width  *  2;  [CE]  cannot  find  symbol  width  [FE]                            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  width  *  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  width  *  2;	  remaining    -=    DEFAULT_DECEMBER_SIZE    *    2;    	non-compiled	[CE]  cannot  find  symbol  width	81	None	replace
1153	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset  *  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  offset  *  2;	  remaining    -=    DEFAULT_DECEMBER_SIZE    *    2;    	compilable	  [FE]  ZipException  	81	1	replace
1154	[BUG]  [BUGGY]  remaining  -=  offset  *  2;  [FE]  ZipException  [FE]                              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  offset  *  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  offset  *  2;	  remaining    -=    DEFAULT_DECEMBER_SIZE    *    2;    	compilable	  [FE]  ZipException  	81	1	replace
1155	[BUG]  [BUGGY]  remaining  -=  long  *  2;  [CE]  '.class'  expected  [FE]                                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  long  *  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  long  *  2;	  remaining    -=    DEFAULT_DECEMBER_SIZE    *    2;    	non-compiled	[CE]  '.class'  expected	81	None	replace
1156	[BUG]  [BUGGY]  remainder  -=  length  *  2;  [CE]  cannot  find  symbol  remainder  [FE]                                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remainder  -=  length  *  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remainder  -=  length  *  2;	  remaining    -=    DEFAULT_DECEMBER_SIZE    *    2;    	non-compiled	[CE]  cannot  find  symbol  remainder	81	None	replace
1157	[BUG]  [BUGGY]  remaining  -=  length  +  2;  other  -=  length  +  2;  [CE]  cannot  find  symbol  other  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  2;  other  -=  length  +  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    2;    other  -=  length  +  2;	  	non-compiled	[CE]  cannot  find  symbol  other	65	None	add
1158	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  2  *  DWORD;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE  +  2  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE  +  2  *  DWORD;	  remaining    -=    DEFAULT_DECIMAL_SIZE    +    2;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZE	31	None	replace
1159	[BUG]  [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2;  RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1160	[BUG]  [BUGGY]  RelativeHeaderOffset  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  discStart  =  new  ZipLong(buffer,  offset);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    diskStart    =    new    ZipLong(buffer,    offset);    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
1161	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
1162	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        length;        remaining    -=    length;    while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  }	  	compilable	  [FE]  ZipException  	34	1	add
1163	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    while(remaining  >  DWORD)  {  remaining  -=  length;  remaining  -=  length;  }	  	compilable	  [FE]  ZipException  	34	1	add
1164	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remaining  -=  length;  System.arraycopy(buffer,  offset  +  1,  relativeHeaderOffset,  compressedSize);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remaining  -=  length;  System.arraycopy(buffer,  offset  +  1,  relativeHeaderOffset,  compressedSize);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  System.arraycopy(buffer,  offset  +  1,  relativeHeaderOffset,  compressedSize);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	34	None	add
1165	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remaining  -=  length;  System.arraycopy(buffer,  offset,  compressedSize,  buffer,  offset  +  2  *  DWORD);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remaining  -=  length;  System.arraycopy(buffer,  offset,  compressedSize,  buffer,  offset  +  2  *  DWORD);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  System.arraycopy(buffer,  offset,  compressedSize,  buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	34	None	add
1166	[BUG]  [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remaining  -=  length;  System.arraycopy(buffer,  offset  +  1,  compressedSize,  buffer,  offset  +  2  *  DWORD);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  remaining  -=  length;  System.arraycopy(buffer,  offset  +  1,  compressedSize,  buffer,  offset  +  2  *  DWORD);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        length;        remaining    -=    length;    remaining  -=  length;  remaining  -=  length;  System.arraycopy(buffer,  offset  +  1,  compressedSize,  buffer,  offset  +  2  *  DWORD);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	34	None	add
1167	[BUG]  [BUGGY]  reportHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  +=  DWORD;  [CE]  cannot  find  symbol  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  reportHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  +=  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	reportHeaderOffset(new  ZipEightByteInteger(buffer,  offset));  offset  +=  DWORD;	  if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
1168	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  0)  {  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  0)  {  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=  0)  {  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	168	None	replace
1169	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	168	None	replace
1170	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	          if(relativeHeaderOffset!=    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	168	None	replace
1171	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	53	None	replace
1172	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  DWORD)  {  remaining  -=  2;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	while(remaining  >  DWORD)  {  remaining  -=  2;  }	  remaining    -=    2;    while    remaining    -=    2;    	compilable	  [FE]  ZipException  	100	1	replace
1173	[BUG]  [BUGGY]  while(remaining  >  DWORD)  {  remaining  -=  2;  }  [FE]  ZipException  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  DWORD)  {  remaining  -=  2;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  DWORD)  {  remaining  -=  2;  }	  remaining    -=    2;    while    remaining    -=    2;    	compilable	  [FE]  ZipException  	100	1	replace
1174	[BUG]  [BUGGY]  remaining  -=  length;  }  [CE]  illegal  start  of  type  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length;  }	  remaining    -=    WORD;    remaining    -=    WORD;    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
1175	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  2;  remaining  -=  1);  [CE]  ';'  expected  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  2;  remaining  -=  1);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    remaining  -=  2;  remaining  -=  1);	  	non-compiled	[CE]  ';'  expected	103	None	add
1176	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining        -=        2;        remaining    -=    1;    remaining  -=  2;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	103	1	add
1177	[BUG]  [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  2;  remaining  -=  3;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    2;    remaining  -=  1;  remaining  -=  2;  remaining  -=  3;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        2;        remaining    -=    1;    remaining  -=  2;  remaining  -=  3;	  	compilable	  [FE]  ZipException  	103	1	add
1178	[BUG]  [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  1;  remaining  -=  1;  }  [CE]  illegal  start  of  type  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining    -=    1;    remaining  -=  1;  remaining  -=  1;  remaining  -=  1;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining        -=        1;        remaining    -=    1;    remaining  -=  1;  remaining  -=  1;  }	  	non-compiled	[CE]  illegal  start  of  type	50	None	add
1179	[BUG]  [BUGGY]  relativeHeaderOffset  <  HEADER_ID>  remaining  -=  0;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  relativeHeaderOffset  <  HEADER_ID>  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	relativeHeaderOffset  <  HEADER_ID>  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    HEADER_ID>    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	91	None	replace
1180	[BUG]  [BUGGY]  if(remaining  >  DWORD)  {  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >  DWORD)  {  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >  DWORD)  {  remaining  -=  2;  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  >  expected	21	None	replace
1181	[BUG]  [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  1;  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  HEADER_ID?  (RelativeHeaderOffset  <  HEADER_ID>)relativeHeaderOffset  :  new  ZipEightByteInteger(buffer,  offset);  offset  +=  1;	  remaining    -=    2;    RelativeHeaderOffset    <    HEADER_ID?    (RelativeHeaderOffset    <    HEADER_ID>)relativeHeaderOffset    :    new    ZipEightByteInteger(buffer,    offset);    offset    +=    2;    	non-compiled	[CE]  >  expected	21	None	replace
1182	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  *  DWORD;	  remaining    -=    length    -    2;    	compilable	  [FE]  ZipException  	172	1	replace
1183	[BUG]  [BUGGY]  remaining  -=  length  *  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  *  DWORD;	  remaining    -=    length    -    2;    	compilable	  [FE]  ZipException  	172	1	replace
1184	[BUG]  [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  ';';  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  T>  remaining  -=  ';';  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  T>  remaining  -=  ';';	  remaining    -=    WORD;    RelativeHeaderOffset    <    T>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	71	None	replace
1185	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  [CE]  ')'  expected  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset	  	non-compiled	[CE]  ')'  expected	12	None	add
1186	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length  +  1;	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
1187	[BUG]  [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset  +  1).computeLength();  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  +  1;  int  length  =  relativeHeaderOffset.computeLength(buffer,  offset  +  1).computeLength();  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    length    +    1;    int  length  =  relativeHeaderOffset.computeLength(buffer,  offset  +  1).computeLength();	  	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	61	None	add
1188	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.compute(buffer,  offset);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.compute(buffer,  offset);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.compute(buffer,  offset);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.compute(buffer,    offset);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	142	None	replace
1189	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.compute(buffer,  offset  +  1);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.compute(buffer,  offset  +  1);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.compute(buffer,  offset  +  1);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.compute(buffer,    offset);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	142	None	replace
1190	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.compute(buffer,  offset  +  2);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.compute(buffer,  offset  +  2);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.compute(buffer,  offset  +  2);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.compute(buffer,    offset);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	142	None	replace
1191	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf(':');  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf(':');  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf(':');  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf(':');    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	40	None	replace
1192	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf(':',  remaining  -=  length);  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf(':',  remaining  -=  length);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf(':',  remaining  -=  length);	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf(':');    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	40	None	replace
1193	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf(':')-  1;  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf(':')-  1;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf(':')-  1;  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf(':');    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	40	None	replace
1194	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf(':')+  1;  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf(':');    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	40	None	replace
1195	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.indexOf(':');  remaining  -=  length  +  1;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.indexOf(':');  remaining  -=  length  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.indexOf(':');  remaining  -=  length  +  1;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.indexOf(':');    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	40	None	replace
1196	[BUG]  [BUGGY]  int  diskStart  =  relativeHeaderOffset.length();  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  diskStart  =  relativeHeaderOffset.length();  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  diskStart  =  relativeHeaderOffset.length();  remaining  -=  0;	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
1197	[BUG]  [BUGGY]  remaining  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remainder  -=  0;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remainder  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  int  diskStart  =  relativeHeaderOffset.length();  remainder  -=  0;	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
1198	[BUG]  [BUGGY]  remaining  -=  0;  int  diskStart  =  compressedSize.length();  remaining  -=  0;  [CE]  cannot  find  symbol  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  0;  int  diskStart  =  compressedSize.length();  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  0;  int  diskStart  =  compressedSize.length();  remaining  -=  0;	  remaining    -=    0;    int    diskStart    =    relativeHeaderOffset.length();    remaining    -=    0;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
1199	[BUG]  [BUGGY]  while(relativeHeaderOffset  <  length)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  'else'  without  'if'  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(relativeHeaderOffset  <  length)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(relativeHeaderOffset  <  length)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
1200	[BUG]  [BUGGY]  while(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  'else'  without  'if'  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
1201	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	13	1	replace
1202	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	13	1	replace
1203	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  0)  {  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  0)  {  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  0)  {  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	158	None	replace
1204	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [CE]  ')'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  <  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset    	non-compiled	[CE]  ')'  expected	158	None	replace
1205	[BUG]  [BUGGY]  RelativeHeaderOffset  <  EMPTY>  remaining  -=  length;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  EMPTY>  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  EMPTY>  remaining  -=  length;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
1206	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_STATEMENT;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_STATEMENT;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_STATEMENT;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
1207	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_MSG;  [CE]  ';'  expected  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_MSG;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
1208	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_STANDARD;  [CE]  ';'  expected  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_STANDARD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_STANDARD;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
1209	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG;  [CE]  ';'  expected  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZE;  RelativeHeaderOffset  <  EMPTY>  remaining  -=  DEFAULT_DECIMAL_SIZES_MSG;	  remaining    -=    WORD;    RelativeHeaderOffset    <    EMPTY>    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	73	None	replace
1210	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  compressedSize  ==  0);  [CE]  illegal  start  of  type  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  compressedSize  ==  0);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  <  0  ||  compressedSize  ==  0);	  remaining    -=    WORD;    RelativeHeaderOffset    <    0    ||    relativeHeaderOffset    ==    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
1211	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  2  +  length;	  remaining    -=    2;    remaining    -=    1;    	compilable	  [FE]  ZipException  	104	1	replace
1212	[BUG]  [BUGGY]  remaining  -=  2  +  length;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  2  +  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  2  +  length;	  remaining    -=    2;    remaining    -=    1;    	compilable	  [FE]  ZipException  	104	1	replace
1213	[BUG]  [BUGGY]  Resting  -=  1;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;  [CE]  cannot  find  symbol  Resting  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  Resting  -=  1;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	Resting  -=  1;  RelativeHeaderOffset  exception  =  relativeHeaderOffset.equals(remaining);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    exception    =    relativeHeaderOffset.equals(relativeHeaderOffset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol  Resting	116	None	replace
1214	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.getLength();    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	143	None	replace
1215	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  }  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.getLength();    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	143	None	replace
1216	[BUG]  [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.getLength();    remaining    -=    length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	143	None	replace
1217	[BUG]  [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  [CE]  illegal  start  of  expression  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.getLength();    remaining    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1218	[BUG]  [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.getLength();    remaining    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1219	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.getLength();  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.getLength();    remaining    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1220	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_BORD;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_BORD  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_BORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_BORD;	  remaining    -=    DEFAULT_DECIMAL_WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_BORD	160	None	replace
1221	[BUG]  [BUGGY]  remaining  -=  diskStart,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  diskStart,  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  diskStart,  relativeHeaderOffset;	  remaining    -=    diskStart;    	non-compiled	[CE]  ';'  expected	47	None	replace
1222	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	157	None	replace
1223	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipLong(buffer,  offset);  offset  +=  DWORD;  }	  if(relativeHeaderOffset    ==    0)    {    relativeHeaderOffset    =    new    ZipLong(buffer,    offset);    offset    +=    DWORD;    }    	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	157	None	replace
1224	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  1  *  DWORD;	  remaining    -=    2    *    DWORD;    	compilable	  [FE]  ZipException  	60	1	replace
1225	[BUG]  [BUGGY]  remaining  -=  1  *  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1  *  DWORD;	  remaining    -=    2    *    DWORD;    	compilable	  [FE]  ZipException  	60	1	replace
1226	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;  [CE]  >  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES_MSG);  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  >  expected	162	None	replace
1227	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES  [CE]  >  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >  LFH_MUST_HAVE_BOTH_SIZES	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH_SIZES_MSG);    remaining    -=    0;    	non-compiled	[CE]  >  expected	162	None	replace
1228	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [CE]  >  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  RelativeHeaderOffset  >=  LFH_MUST_HAVE	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    RelativeHeaderOffset    >=    LFH_MUST_HAVE    	non-compiled	[CE]  >  expected	54	None	replace
1229	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >>  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [CE]  >  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >>  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >>  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  0;	  remaining    -=    0;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset!=    LFH_MUST_HAVE_BOTH_SIZES_MSG;    remaining    -=    0;    	non-compiled	[CE]  >  expected	165	None	replace
1230	[BUG]  [BUGGY]  remaining  -=  compressionHeaderOffset.length;  [CE]  cannot  find  symbol  compressionHeaderOffset  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  compressionHeaderOffset.length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  compressionHeaderOffset.length;	  remaining    -=    relativeHeaderOffset.length;    	non-compiled	[CE]  cannot  find  symbol  compressionHeaderOffset	96	None	replace
1231	[BUG]  [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [CE]  >  expected  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  <  LFH_MUST_HAVE_BOTH_SIZES_MSG  ||  relativeHeaderOffset  >=  LFH_MUST_HAVE_BOTH	  remaining    -=    1;    RelativeHeaderOffset    <    LFH_MUST_HAVE_BOTH_SIZES_MSG    ||    relativeHeaderOffset    >=    LFH_MUST_HAVE_BOTH    	non-compiled	[CE]  >  expected	57	None	replace
1232	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL;	  remaining    -=    DEFAULT_WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL	4	None	replace
1233	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DISCONTINUATION;  [CE]  cannot  find  symbol  DEFAULT_DISCONTINUATION  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DISCONTINUATION;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DISCONTINUATION;	  remaining    -=    DEFAULT_WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DISCONTINUATION	4	None	replace
1234	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DEFAULT;  [CE]  cannot  find  symbol  DEFAULT_DEFAULT  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DEFAULT;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DEFAULT;	  remaining    -=    DEFAULT_WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DEFAULT	4	None	replace
1235	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.computeValue(buffer,  offset);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeValue(buffer,    offset);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	169	None	replace
1236	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset  +  1);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset  +  1);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.computeValue(buffer,  offset  +  1);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeValue(buffer,    offset);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	169	None	replace
1237	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset,  remaining);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.computeValue(buffer,  offset,  remaining);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.computeValue(buffer,  offset,  remaining);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeValue(buffer,    offset);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	169	None	replace
1238	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  -=  1;  [CE]  ';'  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  -=  1;	  remaining    -=    0;    RelativeHeaderOffset    remaining    -=    0;    	non-compiled	[CE]  ';'  expected	87	None	replace
1239	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  DWORD)  {  remaining  -=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	while(remaining  >  DWORD)  {  remaining  -=  WORD;  }	  remaining    -=    WORD;    while    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	134	1	replace
1240	[BUG]  [BUGGY]  while(remaining  >  DWORD)  {  remaining  -=  WORD;  }  [FE]  ZipException  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  DWORD)  {  remaining  -=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  DWORD)  {  remaining  -=  WORD;  }	  remaining    -=    WORD;    while    remaining    -=    WORD;    	compilable	  [FE]  ZipException  	134	1	replace
1241	[BUG]  [BUGGY]  while(remaining  -=  0)  {  remaining  -=  0;  }  [CE]  incompatible  types  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  -=  0)  {  remaining  -=  0;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  -=  0)  {  remaining  -=  0;  }	  remaining    -=    WORD;    while    remaining    -=    WORD;    	non-compiled	[CE]  incompatible  types	134	None	replace
1242	[BUG]  [BUGGY]  remaining  -=  buffer.length,  relativeHeaderOffset;  [CE]  ';'  expected  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  buffer.length,  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  buffer.length,  relativeHeaderOffset;	  remaining    -=    size,    relativeHeaderOffset;    	non-compiled	[CE]  ';'  expected	46	None	replace
1243	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [CE]  ';'  expected  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  ';'  expected	123	None	replace
1244	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [CE]  ';'  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  ';'  expected	123	None	replace
1245	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  ';'  expected	123	None	replace
1246	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  ';'  expected	123	None	replace
1247	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  ';')  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [CE]  ';'  expected  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  ';')  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  ';')  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DW	          if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DW    	non-compiled	[CE]  ';'  expected	123	None	replace
1248	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [CE]  cannot  find  symbol  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1249	[BUG]  [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [CE]  cannot  find  symbol  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  1;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  1;  RelativeHeaderOffset  offset  =  new  ZipEightByteInteger(buffer,  offset);  remainder  -=  1;	  remaining    -=    1;    RelativeHeaderOffset    offset    =    new    ZipEightByteInteger(buffer,    offset);    remaining    -=    1;    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1250	[BUG]  [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +  [CE]  illegal  start  of  expression  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
1251	[BUG]  [BUGGY]  RelativeHeaderOffset  remaining  -=  length;  [CE]  ';'  expected  [FE]          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  RelativeHeaderOffset  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	RelativeHeaderOffset  remaining  -=  length;	  remaining    -=    WORD;    RelativeHeaderOffset    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	69	None	replace
1252	[BUG]  [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  remaining  -=  length;  [CE]  ';'  expected  [FE]            ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  RelativeHeaderOffset  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  RelativeHeaderOffset  remaining  -=  length;	  remaining    -=    WORD;    RelativeHeaderOffset    remaining    -=    WORD;    	non-compiled	[CE]  ';'  expected	69	None	replace
1253	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining    -=    4;    remaining  -=  2;	  	compilable	  [FE]  ZipException  	76	1	add
1254	[BUG]  [BUGGY]  remaining  -=  4;  remaining  -=  2;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  4;  remaining  -=  2;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining    -=    4;    remaining  -=  2;	  	compilable	  [FE]  ZipException  	76	1	add
1255	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.equals(remaining);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.equals(remaining);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.equals(remaining);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.equals(remaining);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	144	None	replace
1256	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.equals(buffer);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.equals(buffer);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.equals(buffer);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.equals(remaining);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	144	None	replace
1257	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.equals(buffer,  remaining);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.equals(buffer,  remaining);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.equals(buffer,  remaining);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.equals(remaining);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	144	None	replace
1258	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.equals(backing);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.equals(backing);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.equals(backing);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.equals(remaining);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	144	None	replace
1259	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.equals(packageName);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.equals(packageName);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.equals(packageName);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.equals(remaining);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	144	None	replace
1260	[BUG]  [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  <  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	16	None	replace
1261	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	16	1	replace
1262	[BUG]  [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(relativeHeaderOffset  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }  else  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  }	  if(relativeHeaderOffset    ==    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    }    else    {    diskStart    =    new    ZipLong(buffer,    offset);    offset    +=    WORD;    }    	compilable	  [FE]  ZipException  	16	1	replace
1263	[BUG]  [BUGGY]  remaining  -=  WORD;  relativeHeaderOffset  -=  WORD;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  WORD;  relativeHeaderOffset  -=  WORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  WORD;  relativeHeaderOffset  -=  WORD;	  remaining    -=    WORD;    second    -=    WORD;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	137	None	replace
1264	[BUG]  [BUGGY]  remaining  -=  discStart  +  relativeHeaderOffset;  [CE]  cannot  find  symbol  discStart  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  discStart  +  relativeHeaderOffset;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  discStart  +  relativeHeaderOffset;	  remaining    -=    DEFAULT_DECEMBER_SIZE    +    relativeHeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  discStart	94	None	replace
1265	[BUG]  [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [CE]  ';'  expected  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	if(remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD	  if(relativeHeaderOffset!=    null)    {    relativeHeaderOffset    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD;    compressedSize    =    new    ZipEightByteInteger(buffer,    offset);    offset    +=    DWORD    	non-compiled	[CE]  ';'  expected	11	None	replace
1266	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  -  1  *  DWORD;	  remaining    -=    length    -    1;    	compilable	  [FE]  ZipException  	64	1	replace
1267	[BUG]  [BUGGY]  remaining  -=  length  -  1  *  DWORD;  [FE]  ZipException  [FE]    ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1  *  DWORD;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  -  1  *  DWORD;	  remaining    -=    length    -    1;    	compilable	  [FE]  ZipException  	64	1	replace
1268	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	remaining  -=  length  -  1  +  1;	  remaining    -=    length    -    1;    	compilable	  [FE]  ZipException  	64	1	replace
1269	[BUG]  [BUGGY]  remaining  -=  length  -  1  +  1;  [FE]  ZipException  [FE]      ZipException    [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  length  -  1  +  1;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  length  -  1  +  1;	  remaining    -=    length    -    1;    	compilable	  [FE]  ZipException  	64	1	replace
1270	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_STANDARD;  remaining  -=  DEFAULT_DECIMAL_SIZE;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_STANDARD  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_STANDARD;  remaining  -=  DEFAULT_DECIMAL_SIZE;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_STANDARD;  remaining  -=  DEFAULT_DECIMAL_SIZE;	  remaining    -=    WORD;    other    -=    WORD;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_STANDARD	136	None	replace
1271	[BUG]  [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES;  [CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  DEFAULT_DECIMAL_SIZES;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  DEFAULT_DECIMAL_SIZES;	  remaining    -=    DEFAULT_DECIMAL_HeaderOffset;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DECIMAL_SIZES	130	None	replace
1272	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.charAt(remaining);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.charAt(remaining);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	39	None	replace
1273	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining  +  1);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining  +  1);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.charAt(remaining  +  1);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.charAt(remaining);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	39	None	replace
1274	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining  -  1);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining  -  1);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.charAt(remaining  -  1);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.charAt(remaining);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	39	None	replace
1275	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining)-  1;  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining)-  1;  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.charAt(remaining)-  1;  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.charAt(remaining);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	39	None	replace
1276	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining  +  3);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining  +  3);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.charAt(remaining  +  3);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.charAt(remaining);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	39	None	replace
1277	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining  +  2);  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                          ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.charAt(remaining  +  2);  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.charAt(remaining  +  2);  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.charAt(remaining);    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	39	None	replace
1278	[BUG]  [BUGGY]  remaining  -=  HEADER_ID,  relativeHeaderOffset);  [CE]  ';'  expected  [FE]        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  remaining  -=  HEADER_ID,  relativeHeaderOffset);  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	remaining  -=  HEADER_ID,  relativeHeaderOffset);	  remaining    -=    HEADER_ID;    	non-compiled	[CE]  ';'  expected	26	None	replace
1279	[BUG]  [BUGGY]  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]              ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeLength();    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	38	None	replace
1280	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  }  [CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)  [FE]                ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeLength();    remaining    -=    length;    	non-compiled	[CE]  variable  length  is  already  defined  in  method  parseFromLocalFileData(byte[],int,int)	38	None	replace
1281	[BUG]  [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeLength();    remaining    -=    length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	38	None	replace
1282	[BUG]  [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  [CE]  illegal  start  of  expression  [FE]                    ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  LFH_MUST_HAVE_BOTH_SIZES_MSG)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeLength();    remaining    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1283	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  [CE]  illegal  start  of  expression  [FE]                      ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  int  length  =  relativeHeaderOffset.computeLength();  remaining  -=  length;	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeLength();    remaining    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1284	[BUG]  [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  remainder  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  }  [CE]  cannot  find  symbol  remainder  [FE]                        ZipException      [CONTEXT]      throw  new  ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);  }  size  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;      [BUGGY]  while(remaining  >  0)  {  remaining  -=  length;  remainder  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  }  [BUGGY]      }  if  (remaining  >=  WORD)  {  diskStart  =  new  ZipLong(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	while(remaining  >  0)  {  remaining  -=  length;  remainder  =  relativeHeaderOffset.computeLength();  remaining  -=  length;  }	  remaining    -=    length;    int    length    =    relativeHeaderOffset.computeLength();    remaining    -=    length;    	non-compiled	[CE]  cannot  find  symbol  remainder	38	None	replace
