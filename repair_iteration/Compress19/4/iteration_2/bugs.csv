bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    3);    diskStart  =  new  ZipLong(buffer,  offset  +  3);	  	compilable	  [FE]  ZipException  	11	1	add
2	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    diskStart  =  new  ZipLong(buffer,  offset  +  3);	  	compilable	  [FE]  ZipException  	11	1	add
3	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
4	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
5	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DiskStart  =  new  ZipLong(buffer,  offset  +  3);  [CE]  cannot  find  symbol  DiskStart  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DiskStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    DiskStart  =  new  ZipLong(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol  DiskStart	11	None	add
6	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DispatcherOffset  <  ZipLong>  offset  =  new  ZipLong(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DispatcherOffset  <  ZipLong>  offset  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    DispatcherOffset  <  ZipLong>  offset  =  new  ZipLong(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
7	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DispatcherStart  =  new  ZipLong(buffer,  offset  +  3);  [CE]  cannot  find  symbol  DispatcherStart  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DispatcherStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    DispatcherStart  =  new  ZipLong(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol  DispatcherStart	11	None	add
8	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  discStart  =  new  ZipLong(buffer,  offset  +  3);  [CE]  cannot  find  symbol  discStart  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  discStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    discStart  =  new  ZipLong(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol  discStart	11	None	add
9	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  int  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [CE]  incompatible  types  [FE]                  ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  int  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    int  diskStart  =  new  ZipLong(buffer,  offset  +  3);	  	non-compiled	[CE]  incompatible  types	11	None	add
10	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  remaining  +  1);	  diskStart    =    new    ZipLong(buffer,    offset    +    1);    	compilable	  [FE]  ZipException  	2	1	replace
11	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  remaining  +  1);	  diskStart    =    new    ZipLong(buffer,    offset    +    1);    	compilable	  [FE]  ZipException  	2	1	replace
12	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2,  remaining);  [CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  2,  remaining);	  diskStart    =    new    ZipLong(buffer,    offset    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)	2	None	replace
13	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  length  -  1);	  diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	4	1	replace
14	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length  -  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  length  -  1);	  diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	4	1	replace
15	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length  -  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  length  -  2);	  diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	4	1	replace
16	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length  -  2);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length  -  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  length  -  2);	  diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	4	1	replace
17	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  DWORD);	  diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	4	1	replace
18	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  DWORD);  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  DWORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  DWORD);	  diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	4	1	replace
19	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  remaining  -  1);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
20	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  -  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  remaining  -  1);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
21	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  -  2);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
22	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  2);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  -  2);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
23	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  rest  -  1);  [CE]  cannot  find  symbol  rest  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  rest  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  rest  -  1);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	non-compiled	[CE]  cannot  find  symbol  rest	18	None	replace
24	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  -  WORD);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
25	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  WORD);  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  -  WORD);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
26	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remainder  -  1);  [CE]  cannot  find  symbol  remainder  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remainder  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  remainder  -  1);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	non-compiled	[CE]  cannot  find  symbol  remainder	18	None	replace
27	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    1);    diskStart  =  new  ZipLong(buffer,  offset  +  1);	  	compilable	  [FE]  ZipException  	1	1	add
28	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    diskStart  =  new  ZipLong(buffer,  offset  +  1);	  	compilable	  [FE]  ZipException  	1	1	add
29	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
30	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
31	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  DiskStart  =  new  ZipLong(buffer,  offset  +  1);  [CE]  cannot  find  symbol  DiskStart  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  DiskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    DiskStart  =  new  ZipLong(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol  DiskStart	1	None	add
32	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  int  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [CE]  incompatible  types  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  int  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    int  diskStart  =  new  ZipLong(buffer,  offset  +  1);	  	non-compiled	[CE]  incompatible  types	1	None	add
33	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  DispatcherOffset  <  ZipLong>  offset  =  new  ZipLong(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  DispatcherOffset  <  ZipLong>  offset  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    DispatcherOffset  <  ZipLong>  offset  =  new  ZipLong(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
34	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  DispatcherStart  =  new  ZipLong(buffer,  offset  +  1);  [CE]  cannot  find  symbol  DispatcherStart  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  DispatcherStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    DispatcherStart  =  new  ZipLong(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol  DispatcherStart	1	None	add
35	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  discStart  =  new  ZipLong(buffer,  offset  +  1);  [CE]  cannot  find  symbol  discStart  [FE]                  ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  discStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    discStart  =  new  ZipLong(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol  discStart	1	None	add
36	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  diskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    remaining);    diskStart  =  new  ZipLong(buffer,  remaining);	  	compilable	  [FE]  ZipException  	7	1	add
37	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  diskStart  =  new  ZipLong(buffer,  remaining);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  diskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    diskStart  =  new  ZipLong(buffer,  remaining);	  	compilable	  [FE]  ZipException  	7	1	add
38	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
39	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
40	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DiskStart  =  new  ZipLong(buffer,  remaining);  [CE]  cannot  find  symbol  DiskStart  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DiskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    DiskStart  =  new  ZipLong(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol  DiskStart	7	None	add
41	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DispatcherOffset  diskStart  =  new  ZipLong(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DispatcherOffset  diskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    DispatcherOffset  diskStart  =  new  ZipLong(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
42	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DispatcherStart  =  new  ZipLong(buffer,  remaining);  [CE]  cannot  find  symbol  DispatcherStart  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DispatcherStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    DispatcherStart  =  new  ZipLong(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol  DispatcherStart	7	None	add
43	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DiscardStart  =  new  ZipLong(buffer,  remaining);  [CE]  cannot  find  symbol  DiscardStart  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  DiscardStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    DiscardStart  =  new  ZipLong(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol  DiscardStart	7	None	add
44	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  discStart  =  new  ZipLong(buffer,  remaining);  [CE]  cannot  find  symbol  discStart  [FE]                  ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  discStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    discStart  =  new  ZipLong(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol  discStart	7	None	add
45	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  remaining);	  diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    	compilable	  [FE]  ZipException  	14	1	replace
46	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  remaining);	  diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    	compilable	  [FE]  ZipException  	14	1	replace
47	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  -  remaining  +  1);	  diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    	compilable	  [FE]  ZipException  	14	1	replace
48	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining  +  1);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  -  remaining  +  1);	  diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    	compilable	  [FE]  ZipException  	14	1	replace
49	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  -  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  remaining  -  length);	  diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
50	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  -  length);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  -  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  remaining  -  length);	  diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
51	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    length);    diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	compilable	  [FE]  ZipException  	3	1	add
52	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	compilable	  [FE]  ZipException  	3	1	add
53	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
54	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
55	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DiskStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  cannot  find  symbol  DiskStart  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DiskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    DiskStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol  DiskStart	3	None	add
56	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DispatcherStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  cannot  find  symbol  DispatcherStart  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DispatcherStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    DispatcherStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol  DispatcherStart	3	None	add
57	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    length);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	compilable	  [FE]  ZipException  	3	1	add
58	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	compilable	  [FE]  ZipException  	3	1	add
59	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  int  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  incompatible  types  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  int  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    int  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  incompatible  types	3	None	add
60	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  discStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  cannot  find  symbol  discStart  [FE]                  ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  discStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    discStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol  discStart	3	None	add
61	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD,  remaining);  [CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  WORD,  remaining);	  diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)	10	None	replace
62	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD,  relativeHeaderOffset);  [CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,ZipEightByteInteger)  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD,  relativeHeaderOffset);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  WORD,  relativeHeaderOffset);	  diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,ZipEightByteInteger)	10	None	replace
63	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  WORD  +  1);	  diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    	compilable	  [FE]  ZipException  	10	1	replace
64	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  +  1);  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  WORD  +  1);	  diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    	compilable	  [FE]  ZipException  	10	1	replace
65	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  WORD  -  remaining);	  diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    	compilable	  [FE]  ZipException  	10	1	replace
66	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  -  remaining);  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  WORD  -  remaining);	  diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    	compilable	  [FE]  ZipException  	10	1	replace
67	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  inconvertible  types  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	      	non-compiled	[CE]  inconvertible  types	16	None	replace
68	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  [CE]  inconvertible  types  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;	      	non-compiled	[CE]  inconvertible  types	16	None	replace
69	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  inconvertible  types  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	      	non-compiled	[CE]  inconvertible  types	16	None	replace
70	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LBH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  inconvertible  types  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LBH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LBH_MUST_HAVE_BOTH_SIZES_MSG;	      	non-compiled	[CE]  inconvertible  types	16	None	replace
71	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  inconvertible  types  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  =  new  ZipEightByteInteger(buffer,  offset);	      	non-compiled	[CE]  inconvertible  types	16	None	replace
72	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  inconvertible  types  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	      	non-compiled	[CE]  inconvertible  types	16	None	replace
73	[BUG]  [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [CE]  inconvertible  types  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;	      	non-compiled	[CE]  inconvertible  types	16	None	replace
74	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  DWORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  2  *  DWORD);	  diskStart    =    new    ZipLong(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	6	1	replace
75	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  DWORD);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  DWORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  2  *  DWORD);	  diskStart    =    new    ZipLong(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	6	1	replace
76	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  2  *  remaining);	  diskStart    =    new    ZipLong(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	6	1	replace
77	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  remaining);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  2  *  remaining);	  diskStart    =    new    ZipLong(buffer,    offset    +    2);    	compilable	  [FE]  ZipException  	6	1	replace
78	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    2);    diskStart  =  new  ZipLong(buffer,  offset  +  2);	  	compilable	  [FE]  ZipException  	5	1	add
79	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    diskStart  =  new  ZipLong(buffer,  offset  +  2);	  	compilable	  [FE]  ZipException  	5	1	add
80	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
81	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
82	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DiskStart  =  new  ZipLong(buffer,  offset  +  2);  [CE]  cannot  find  symbol  DiskStart  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DiskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    DiskStart  =  new  ZipLong(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol  DiskStart	5	None	add
83	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DispatcherStart  =  new  ZipLong(buffer,  offset  +  2);  [CE]  cannot  find  symbol  DispatcherStart  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DispatcherStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    DispatcherStart  =  new  ZipLong(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol  DispatcherStart	5	None	add
84	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DispatcherOffset  <  ZipLong>  offset  =  new  ZipLong(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DispatcherOffset  <  ZipLong>  offset  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    DispatcherOffset  <  ZipLong>  offset  =  new  ZipLong(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
85	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  discStart  =  new  ZipLong(buffer,  offset  +  2);  [CE]  cannot  find  symbol  discStart  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  discStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    discStart  =  new  ZipLong(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol  discStart	5	None	add
86	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  int  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [CE]  incompatible  types  [FE]                  ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  int  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    int  diskStart  =  new  ZipLong(buffer,  offset  +  2);	  	non-compiled	[CE]  incompatible  types	5	None	add
87	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  remaining  +  2);	  diskStart    =    new    ZipLong(buffer,    remaining);    	compilable	  [FE]  ZipException  	8	1	replace
88	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  2);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  remaining  +  2);	  diskStart    =    new    ZipLong(buffer,    remaining);    	compilable	  [FE]  ZipException  	8	1	replace
89	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  remaining  +  length);	  diskStart    =    new    ZipLong(buffer,    remaining);    	compilable	  [FE]  ZipException  	8	1	replace
90	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  length);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  remaining  +  length);	  diskStart    =    new    ZipLong(buffer,    remaining);    	compilable	  [FE]  ZipException  	8	1	replace
91	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(data,  remaining);  [CE]  cannot  find  symbol  data  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(data,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(data,  remaining);	  diskStart    =    new    ZipLong(buffer,    remaining);    	non-compiled	[CE]  cannot  find  symbol  data	8	None	replace
92	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  remaining  +  3);	  diskStart    =    new    ZipLong(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	12	1	replace
93	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  3);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  remaining  +  3);	  diskStart    =    new    ZipLong(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	12	1	replace
94	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    -    1);    diskStart  =  new  ZipLong(buffer,  offset  -  1);	  	compilable	  [FE]  ZipException  	17	1	add
95	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    diskStart  =  new  ZipLong(buffer,  offset  -  1);	  	compilable	  [FE]  ZipException  	17	1	add
96	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  -  1);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
97	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  DiskStart  =  new  ZipLong(buffer,  offset  -  1);  [CE]  cannot  find  symbol  DiskStart  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  DiskStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    DiskStart  =  new  ZipLong(buffer,  offset  -  1);	  	non-compiled	[CE]  cannot  find  symbol  DiskStart	17	None	add
98	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  int  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  int  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    int  diskStart  =  new  ZipLong(buffer,  offset  -  1);	  	non-compiled	[CE]  incompatible  types	17	None	add
99	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  discStart  =  new  ZipLong(buffer,  offset  -  1);  [CE]  cannot  find  symbol  discStart  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  discStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    discStart  =  new  ZipLong(buffer,  offset  -  1);	  	non-compiled	[CE]  cannot  find  symbol  discStart	17	None	add
100	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  DispatcherStart  =  new  ZipLong(buffer,  offset  -  1);  [CE]  cannot  find  symbol  DispatcherStart  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  DispatcherStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    DispatcherStart  =  new  ZipLong(buffer,  offset  -  1);	  	non-compiled	[CE]  cannot  find  symbol  DispatcherStart	17	None	add
101	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  DispatcherOffset  <  Z>  offset  =  new  ZipLong(buffer,  offset  -  1);  [CE]  cannot  find  symbol  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  DispatcherOffset  <  Z>  offset  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    DispatcherOffset  <  Z>  offset  =  new  ZipLong(buffer,  offset  -  1);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
102	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  offset  +=  WORD;  remaining  -=  WORD;  [CE]  class,  interface,  or  enum  expected  [FE]                  ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  offset  +=  WORD;  remaining  -=  WORD;  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  offset  +=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	add
103	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    diskStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	compilable	  [FE]  ZipException  	13	1	add
104	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    diskStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	compilable	  [FE]  ZipException  	13	1	add
105	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
106	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
107	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DiskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  DiskStart  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DiskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    DiskStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	non-compiled	[CE]  cannot  find  symbol  DiskStart	13	None	add
108	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DispatcherStart  =  new  ZipLong(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  DispatcherStart  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DispatcherStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    DispatcherStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	non-compiled	[CE]  cannot  find  symbol  DispatcherStart	13	None	add
109	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DiscardStart  =  new  ZipLong(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  DiscardStart  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DiscardStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    DiscardStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	non-compiled	[CE]  cannot  find  symbol  DiscardStart	13	None	add
110	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  discStart  =  new  ZipLong(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  discStart  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  discStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    discStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	non-compiled	[CE]  cannot  find  symbol  discStart	13	None	add
111	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  }  offset  +=  WORD;  remaining  -=  WORD;  [CE]  class,  interface,  or  enum  expected  [FE]                  ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  }  offset  +=  WORD;  remaining  -=  WORD;  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  }  offset  +=  WORD;  remaining  -=  WORD;	  	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	add
112	[BUG]  [BUGGY]      offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG  [CE]  ';'  expected  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	        offset  +=  LFH_MUST_HAVE_BOTH_SIZES_MSG;  remaining  -=  LFH_MUST_HAVE_BOTH_SIZES_MSG	  	non-compiled	[CE]  ';'  expected	15	None	add
113	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(data,  remaining,  buffer);  [CE]  cannot  find  symbol  data  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(data,  remaining,  buffer);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(data,  remaining,  buffer);	  diskStart    =    new    ZipLong(remaining,    buffer);    	non-compiled	[CE]  cannot  find  symbol  data	19	None	replace
114	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(remaining,  buffer,  offset);  [CE]  no  suitable  constructor  found  for  ZipLong(int,byte[],int)  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(remaining,  buffer,  offset);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(remaining,  buffer,  offset);	  diskStart    =    new    ZipLong(remaining,    buffer);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(int,byte[],int)	19	None	replace
115	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(data,  buffer);  [CE]  cannot  find  symbol  data  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(data,  buffer);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(data,  buffer);	  diskStart    =    new    ZipLong(remaining,    buffer);    	non-compiled	[CE]  cannot  find  symbol  data	19	None	replace
116	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remainder);  [CE]  cannot  find  symbol  remainder  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remainder);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  remainder);	  diskStart    =    new    ZipLong(remaining,    buffer);    	non-compiled	[CE]  cannot  find  symbol  remainder	19	None	replace
117	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(remaining,  buffer,  length);  [CE]  no  suitable  constructor  found  for  ZipLong(int,byte[],int)  [FE]                  ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(remaining,  buffer,  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(remaining,  buffer,  length);	  diskStart    =    new    ZipLong(remaining,    buffer);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(int,byte[],int)	19	None	replace
118	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(length,  buffer);  [CE]  no  suitable  constructor  found  for  ZipLong(int,byte[])  [FE]                    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(length,  buffer);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(length,  buffer);	  diskStart    =    new    ZipLong(remaining,    buffer);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(int,byte[])	19	None	replace
119	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    diskStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	compilable	  [FE]  ZipException  	9	1	add
120	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    diskStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	compilable	  [FE]  ZipException  	9	1	add
121	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    DispatcherOffset  <  ZipLong>  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
122	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    DispatcherOffset  <  Z>  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
123	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DispatcherStart  =  new  ZipLong(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  DispatcherStart  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DispatcherStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    DispatcherStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol  DispatcherStart	9	None	add
124	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DiskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  DiskStart  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DiskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    DiskStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol  DiskStart	9	None	add
125	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DispatcherOffset  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DispatcherOffset  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    DispatcherOffset  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
126	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  discStart  =  new  ZipLong(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  discStart  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  discStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    discStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol  discStart	9	None	add
127	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DiscardStart  =  new  ZipLong(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  DiscardStart  [FE]                  ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  DiscardStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    DiscardStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol  DiscardStart	9	None	add
128	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	compilable	  [FE]  ZipException  	13	1	add
129	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	compilable	  [FE]  ZipException  	13	1	add
130	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    Debugger  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
131	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  int  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  int  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    int  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	non-compiled	[CE]  incompatible  types	13	None	add
132	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DispatcherOffset  =  new  ZipLong(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  DispatcherOffset  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  DispatcherOffset  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    DispatcherOffset  =  new  ZipLong(buffer,  offset  -  remaining);	  	non-compiled	[CE]  cannot  find  symbol  DispatcherOffset	13	None	add
133	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  4);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  4);	  diskStart    =    new    ZipLong(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	12	1	replace
134	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  4);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  4);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  4);	  diskStart    =    new    ZipLong(buffer,    offset    +    3);    	compilable	  [FE]  ZipException  	12	1	replace
135	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	        if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
136	[BUG]  [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	        if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
137	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	        if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
138	[BUG]  [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	        if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
139	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	        if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
140	[BUG]  [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	        if(relativeHeaderOffset  ==  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
141	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	        if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
142	[BUG]  [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	        if(relativeHeaderOffset!=  null)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
143	[BUG]  [BUGGY]      RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [CE]  cannot  find  symbol  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	        RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
144	[BUG]  [BUGGY]      RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [CE]  cannot  find  symbol  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	        RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
145	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	        if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
146	[BUG]  [BUGGY]      if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [FE]  ZipException  [FE]                ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	        if(remaining  >  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	compilable	  [FE]  ZipException  	15	1	add
147	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    3);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  3);	  	compilable	  [FE]  ZipException  	11	1	add
148	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  3);	  	compilable	  [FE]  ZipException  	11	1	add
149	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
150	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DiscardStart  =  new  ZipLong(buffer,  offset  +  3);  [CE]  cannot  find  symbol  DiscardStart  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  DiscardStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    DiscardStart  =  new  ZipLong(buffer,  offset  +  3);	  	non-compiled	[CE]  cannot  find  symbol  DiscardStart	11	None	add
151	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  ZipLong  diskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    remaining);    ZipLong  diskStart  =  new  ZipLong(buffer,  remaining);	  	compilable	  [FE]  ZipException  	7	1	add
152	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  ZipLong  diskStart  =  new  ZipLong(buffer,  remaining);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  ZipLong  diskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    ZipLong  diskStart  =  new  ZipLong(buffer,  remaining);	  	compilable	  [FE]  ZipException  	7	1	add
153	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  Debugger  diskStart  =  new  ZipLong(buffer,  remaining);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  Debugger  diskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    Debugger  diskStart  =  new  ZipLong(buffer,  remaining);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
154	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  int  diskStart  =  new  ZipLong(buffer,  remaining);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  int  diskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    int  diskStart  =  new  ZipLong(buffer,  remaining);	  	non-compiled	[CE]  incompatible  types	7	None	add
155	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  ref);  [CE]  cannot  find  symbol  ref  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  ref);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  ref);	  diskStart    =    new    ZipLong(remaining,    buffer);    	non-compiled	[CE]  cannot  find  symbol  ref	19	None	replace
156	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  rest);  [CE]  cannot  find  symbol  rest  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  rest);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  rest);	  diskStart    =    new    ZipLong(remaining,    buffer);    	non-compiled	[CE]  cannot  find  symbol  rest	19	None	replace
157	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    1);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  1);	  	compilable	  [FE]  ZipException  	1	1	add
158	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  1);	  	compilable	  [FE]  ZipException  	1	1	add
159	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
160	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  fileStart  =  new  ZipLong(buffer,  offset  +  1);  [CE]  cannot  find  symbol  fileStart  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  fileStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    fileStart  =  new  ZipLong(buffer,  offset  +  1);	  	non-compiled	[CE]  cannot  find  symbol  fileStart	1	None	add
161	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    -    1);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  -  1);	  	compilable	  [FE]  ZipException  	17	1	add
162	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  -  1);	  	compilable	  [FE]  ZipException  	17	1	add
163	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    Debugger  diskStart  =  new  ZipLong(buffer,  offset  -  1);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
164	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  fileStart  =  new  ZipLong(buffer,  offset  -  1);  [CE]  cannot  find  symbol  fileStart  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  fileStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    fileStart  =  new  ZipLong(buffer,  offset  -  1);	  	non-compiled	[CE]  cannot  find  symbol  fileStart	17	None	add
165	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  offset  =  new  ZipLong(buffer,  offset  -  1);  [CE]  incompatible  types  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  offset  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    offset  =  new  ZipLong(buffer,  offset  -  1);	  	non-compiled	[CE]  incompatible  types	17	None	add
166	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	compilable	  [FE]  ZipException  	9	1	add
167	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	compilable	  [FE]  ZipException  	9	1	add
168	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
169	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  int  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [CE]  incompatible  types  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  int  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    int  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);	  	non-compiled	[CE]  incompatible  types	9	None	add
170	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(length,  remaining);  [CE]  no  suitable  constructor  found  for  ZipLong(int,int)  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(length,  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(length,  remaining);	  diskStart    =    new    ZipLong(buffer,    remaining);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(int,int)	8	None	replace
171	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  length);	  diskStart    =    new    ZipLong(buffer,    remaining);    	compilable	  [FE]  ZipException  	8	1	replace
172	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  length);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  length);	  diskStart    =    new    ZipLong(buffer,    remaining);    	compilable	  [FE]  ZipException  	8	1	replace
173	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  -  length);	  diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	4	1	replace
174	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  length);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  -  length);	  diskStart    =    new    ZipLong(buffer,    offset    +    length);    	compilable	  [FE]  ZipException  	4	1	replace
175	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    2);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  2);	  	compilable	  [FE]  ZipException  	5	1	add
176	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    ZipLong  diskStart  =  new  ZipLong(buffer,  offset  +  2);	  	compilable	  [FE]  ZipException  	5	1	add
177	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
178	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DiscardStart  =  new  ZipLong(buffer,  offset  +  2);  [CE]  cannot  find  symbol  DiscardStart  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  DiscardStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    DiscardStart  =  new  ZipLong(buffer,  offset  +  2);	  	non-compiled	[CE]  cannot  find  symbol  DiscardStart	5	None	add
179	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(remaining,  offset  -  remaining);  [CE]  no  suitable  constructor  found  for  ZipLong(int,int)  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(remaining,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(remaining,  offset  -  remaining);	  diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(int,int)	14	None	replace
180	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  WORD  -  1);	  diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    	compilable	  [FE]  ZipException  	10	1	replace
181	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  -  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  WORD  -  1);	  diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    	compilable	  [FE]  ZipException  	10	1	replace
182	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  WORD  +  2);	  diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    	compilable	  [FE]  ZipException  	10	1	replace
183	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  +  2);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD  +  2);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  WORD  +  2);	  diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    	compilable	  [FE]  ZipException  	10	1	replace
184	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    Debugger  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
185	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DispatcherOffset  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  cannot  find  symbol  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DispatcherOffset  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    DispatcherOffset  diskStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
186	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DiscardStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  cannot  find  symbol  DiscardStart  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  DiscardStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    DiscardStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol  DiscardStart	3	None	add
187	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  -  1  +  length);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
188	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1  +  length);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  -  1  +  length);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
189	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  -  3);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
190	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  3);  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  3);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  -  3);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
191	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [CE]  cannot  find  symbol  discStart  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	3	None	add
192	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    length);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  	compilable	  [FE]  ZipException  	3	1	add
193	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  length);  }	  	compilable	  [FE]  ZipException  	3	1	add
194	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  zipStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  cannot  find  symbol  zipStart  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  zipStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    zipStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol  zipStart	3	None	add
195	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  fileStart  =  new  ZipLong(buffer,  offset  +  length);  [CE]  cannot  find  symbol  fileStart  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  fileStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    length);    fileStart  =  new  ZipLong(buffer,  offset  +  length);	  	non-compiled	[CE]  cannot  find  symbol  fileStart	3	None	add
196	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG);  [CE]  no  suitable  constructor  found  for  ZipLong(byte[],String)  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  LFH_MUST_HAVE_BOTH_SIZES_MSG);	  diskStart    =    new    ZipLong(buffer,    offset    +    length);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(byte[],String)	4	None	replace
197	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  LFH_MUST_SIZES_MSG);  [CE]  cannot  find  symbol  LFH_MUST_SIZES_MSG  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  LFH_MUST_SIZES_MSG);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  LFH_MUST_SIZES_MSG);	  diskStart    =    new    ZipLong(buffer,    offset    +    length);    	non-compiled	[CE]  cannot  find  symbol  LFH_MUST_SIZES_MSG	4	None	replace
198	[BUG]  [BUGGY]      if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	        if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  WORD;  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	15	None	add
199	[BUG]  [BUGGY]      if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [CE]  incomparable  types:  ZipEightByteInteger  and  int  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	        if(relativeHeaderOffset  ==  0)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }	  	non-compiled	[CE]  incomparable  types:  ZipEightByteInteger  and  int	15	None	add
200	[BUG]  [BUGGY]      RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;  [CE]  cannot  find  symbol  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]      RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	        RelativeHeaderOffset  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  remaining  -=  DWORD;	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
201	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    3);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }	  	compilable	  [FE]  ZipException  	11	1	add
202	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }	  	compilable	  [FE]  ZipException  	11	1	add
203	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    3);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  	compilable	  [FE]  ZipException  	11	1	add
204	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  3);  }	  	compilable	  [FE]  ZipException  	11	1	add
205	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    3);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }	  	compilable	  [FE]  ZipException  	11	1	add
206	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }	  	compilable	  [FE]  ZipException  	11	1	add
207	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    3);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	compilable	  [FE]  ZipException  	11	1	add
208	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	compilable	  [FE]  ZipException  	11	1	add
209	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    3);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);  }	  	compilable	  [FE]  ZipException  	11	1	add
210	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  4);  }	  	compilable	  [FE]  ZipException  	11	1	add
211	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  +  3);  }  [CE]  cannot  find  symbol  discStart  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  +  3);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    3);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  3);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  +  3);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	11	None	add
212	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  2  *  length);	  diskStart    =    new    ZipLong(buffer,    offset    +    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
213	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2  *  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  2  *  length);	  diskStart    =    new    ZipLong(buffer,    offset    +    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
214	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  length  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  length  -  1);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
215	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  length  -  1);  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  length  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  length  -  1);	  diskStart    =    new    ZipLong(buffer,    offset    -    1);    	compilable	  [FE]  ZipException  	18	1	replace
216	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  zipStart  =  new  ZipLong(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  zipStart  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  zipStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    zipStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	non-compiled	[CE]  cannot  find  symbol  zipStart	13	None	add
217	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  fileStart  =  new  ZipLong(buffer,  offset  -  remaining);  [CE]  cannot  find  symbol  fileStart  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  fileStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    remaining);    fileStart  =  new  ZipLong(buffer,  offset  -  remaining);	  	non-compiled	[CE]  cannot  find  symbol  fileStart	13	None	add
218	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	1	1	add
219	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	1	1	add
220	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [CE]  cannot  find  symbol  discStart  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	1	None	add
221	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	1	1	add
222	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	1	1	add
223	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	1	1	add
224	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	1	1	add
225	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	compilable	  [FE]  ZipException  	1	1	add
226	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	compilable	  [FE]  ZipException  	1	1	add
227	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    2);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }	  	compilable	  [FE]  ZipException  	5	1	add
228	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }	  	compilable	  [FE]  ZipException  	5	1	add
229	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    2);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	compilable	  [FE]  ZipException  	5	1	add
230	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  2);  }	  	compilable	  [FE]  ZipException  	5	1	add
231	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    2);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	5	1	add
232	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	5	1	add
233	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    2);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }	  	compilable	  [FE]  ZipException  	5	1	add
234	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  if(remaining  >  DWORD)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }	  	compilable	  [FE]  ZipException  	5	1	add
235	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    2);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	5	1	add
236	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [FE]  ZipException  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  1);  }	  	compilable	  [FE]  ZipException  	5	1	add
237	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  +  2);  }  [CE]  cannot  find  symbol  discStart  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  +  2);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    2);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  2);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  +  2);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	5	None	add
238	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2,  length);  [CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2,  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  2,  length);	  diskStart    =    new    ZipLong(buffer,    offset    +    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)	2	None	replace
239	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    -    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }	  	compilable	  [FE]  ZipException  	17	1	add
240	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }	  	compilable	  [FE]  ZipException  	17	1	add
241	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    -    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  1);  }	  	compilable	  [FE]  ZipException  	17	1	add
242	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  1);  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  -  1);  }	  	compilable	  [FE]  ZipException  	17	1	add
243	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    -    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }	  	compilable	  [FE]  ZipException  	17	1	add
244	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }	  	compilable	  [FE]  ZipException  	17	1	add
245	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  -  1);  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  -  1);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  -  1);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  -  1);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	17	None	add
246	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  zipStart  =  new  ZipLong(buffer,  offset  -  1);  [CE]  cannot  find  symbol  zipStart  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  zipStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    -    1);    zipStart  =  new  ZipLong(buffer,  offset  -  1);	  	non-compiled	[CE]  cannot  find  symbol  zipStart	17	None	add
247	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  relativeHeaderOffset);  [CE]  no  suitable  constructor  found  for  ZipLong(byte[],ZipEightByteInteger)  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  relativeHeaderOffset);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  relativeHeaderOffset);	  diskStart    =    new    ZipLong(buffer,    remaining);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(byte[],ZipEightByteInteger)	8	None	replace
248	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  buffer.length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  buffer.length);	  diskStart    =    new    ZipLong(buffer,    remaining);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
249	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  buffer.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  buffer.length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  buffer.length);	  diskStart    =    new    ZipLong(buffer,    remaining);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
250	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD,  length);  [CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD,  length);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  WORD,  length);	  diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(byte[],int,int)	10	None	replace
251	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }	  	compilable	  [FE]  ZipException  	9	1	add
252	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }	  	compilable	  [FE]  ZipException  	9	1	add
253	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  [CE]  cannot  find  symbol  discStart  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	9	None	add
254	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }	  	compilable	  [FE]  ZipException  	9	1	add
255	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [FE]  ZipException  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }	  	compilable	  [FE]  ZipException  	9	1	add
256	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [CE]  cannot  find  symbol  discStart  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    if(discStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  WORD);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	9	None	add
257	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  [CE]  cannot  find  symbol  discStart  [FE]            ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  discStart  =  new  ZipLong(buffer,  offset  +  WORD);  }	  	non-compiled	[CE]  cannot  find  symbol  discStart	9	None	add
258	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }	  	compilable	  [FE]  ZipException  	9	1	add
259	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [FE]  ZipException  [FE]              ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    offset    +    WORD);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset  +  length);  }	  	compilable	  [FE]  ZipException  	9	1	add
260	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    remaining);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  diskStart  =  new  ZipLong(buffer,  remaining);  }	  	compilable	  [FE]  ZipException  	7	1	add
261	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  [FE]  ZipException  [FE]    ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  diskStart  =  new  ZipLong(buffer,  remaining);  }	  	compilable	  [FE]  ZipException  	7	1	add
262	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    remaining);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	7	1	add
263	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]      ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  WORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	7	1	add
264	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  offset  +=  WORD;  remaining  -=  WORD;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  offset  +=  WORD;  remaining  -=  WORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  offset  +=  WORD;  remaining  -=  WORD;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	add
265	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  length);  offset  +=  WORD;  remaining  -=  WORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart    =    new    ZipLong(buffer,    remaining);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  length);  offset  +=  WORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	7	1	add
266	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  length);  offset  +=  WORD;  remaining  -=  WORD;  }  [FE]  ZipException  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  length);  offset  +=  WORD;  remaining  -=  WORD;  }  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart    =    new    ZipLong(buffer,    remaining);    if(diskStart  ==  null)  {  diskStart  =  new  ZipLong(buffer,  remaining);  }  else  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  length);  offset  +=  WORD;  remaining  -=  WORD;  }	  	compilable	  [FE]  ZipException  	7	1	add
267	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  resting);  [CE]  cannot  find  symbol  resting  [FE]          ZipException    [CONTEXT]    offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {    [BUGGY]  diskStart  =  new  ZipLong(buffer,  resting);  [BUGGY]    offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  resting);	  diskStart    =    new    ZipLong(remaining,    buffer);    	non-compiled	[CE]  cannot  find  symbol  resting	19	None	replace
