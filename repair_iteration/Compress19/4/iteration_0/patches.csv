bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  1);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
2	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [FE]  ZipException  [FE]    ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  1);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  1);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
3	[BUG]  [BUGGY]  [FE]  ZipException  [FE]      ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  length);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
4	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [FE]  ZipException  [FE]      ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  length);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  length);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
5	[BUG]  [BUGGY]  [FE]  ZipException  [FE]        ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  2);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
6	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [FE]  ZipException  [FE]        ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  2);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  2);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
7	[BUG]  [BUGGY]  [FE]  ZipException  [FE]          ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  remaining);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
8	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  [FE]  ZipException  [FE]          ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  remaining);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  remaining);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
9	[BUG]  [BUGGY]  [FE]  ZipException  [FE]            ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  WORD);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
10	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [FE]  ZipException  [FE]            ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  WORD);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  WORD);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
11	[BUG]  [BUGGY]  [FE]  ZipException  [FE]              ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  +  3);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
12	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [FE]  ZipException  [FE]              ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  +  3);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  +  3);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
13	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  -  remaining);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
14	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [FE]  ZipException  [FE]                ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  remaining);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  -  remaining);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
15	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                  ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]    [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	  	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
16	[BUG]  [BUGGY]    [FE]  ZipException  [FE]                  ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]    [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	  	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
17	[BUG]  [BUGGY]  [FE]  ZipException  [FE]    ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	diskStart  =  new  ZipLong(buffer,  offset  -  1);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
18	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [FE]  ZipException  [FE]    ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(buffer,  offset  -  1);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(buffer,  offset  -  1);	diskStart  =  new  ZipLong(buffer,  offset);  	compilable	  [FE]  ZipException  	7	1	replace
19	[BUG]  [BUGGY]  diskStart  =  new  ZipLong(remaining,  buffer);  [CE]  no  suitable  constructor  found  for  ZipLong(int,byte[])  [FE]      ZipException  [CONTEXT]  offset  +=  DWORD;  compressedSize  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  int  remaining  =  length  -  2  *  DWORD;  if  (remaining  >=  DWORD)  {  relativeHeaderOffset  =  new  ZipEightByteInteger(buffer,  offset);  offset  +=  DWORD;  remaining  -=  DWORD;  }  if  (remaining  >=  WORD)  {  [BUGGY]  diskStart  =  new  ZipLong(remaining,  buffer);  [BUGGY]  offset  +=  WORD;  remaining  -=  WORD;  }  }  [CLASS]  Zip64ExtendedInformationExtraField  [METHOD]  parseFromLocalFileData  [RETURN_TYPE]  void  byte[]  buffer  int  offset  int  length  [VARIABLES]  byte[]  EMPTY  buffer  data  rawCentralDirectoryData  ZipLong  diskStart  ZipShort  HEADER_ID  boolean  String  LFH_MUST_HAVE_BOTH_SIZES_MSG  ZipEightByteInteger  compressedSize  relativeHeaderOffset  size  int  length  offset  remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	diskStart  =  new  ZipLong(remaining,  buffer);	diskStart  =  new  ZipLong(buffer,  offset);  	non-compiled	[CE]  no  suitable  constructor  found  for  ZipLong(int,byte[])	7	None	replace
