bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); [FE] ZipException [CONTEXT] } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { [BUGGY] relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); [BUGGY] offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	replace	
2	[BUG] [BUGGY] [FE] ZipException [CONTEXT] } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { [BUGGY] [BUGGY] relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	202	202	1	add	
3	[BUG] [BUGGY] offset += DWORD; [FE] ZipException [CONTEXT] if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); [BUGGY] offset += DWORD; [BUGGY] remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	replace	
4	[BUG] [BUGGY] [FE] ZipException [CONTEXT] if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); [BUGGY] [BUGGY] offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	203	203	1	add	
5	[BUG] [BUGGY] remaining -= DWORD; [FE] ZipException [CONTEXT] throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; [BUGGY] remaining -= DWORD; [BUGGY] } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	replace	
6	[BUG] [BUGGY] [FE] ZipException [CONTEXT] throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; [BUGGY] [BUGGY] remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	204	204	1	add	
7	[BUG] [BUGGY] diskStart = new ZipLong(buffer, offset); [FE] ZipException [CONTEXT] offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { [BUGGY] diskStart = new ZipLong(buffer, offset); [BUGGY] offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	replace	
8	[BUG] [BUGGY] [FE] ZipException [CONTEXT] offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { [BUGGY] [BUGGY] diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	207	207	1	add	
9	[BUG] [BUGGY] offset += WORD; [FE] ZipException [CONTEXT] compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); [BUGGY] offset += WORD; [BUGGY] remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	replace	
10	[BUG] [BUGGY] [FE] ZipException [CONTEXT] compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); [BUGGY] [BUGGY] offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	208	208	1	add	
11	[BUG] [BUGGY] remaining -= WORD; [FE] ZipException [CONTEXT] offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; [BUGGY] remaining -= WORD; [BUGGY] } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	209	209	1	replace	
12	[BUG] [BUGGY] [FE] ZipException [CONTEXT] offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; [BUGGY] [BUGGY] remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	209	209	1	add	
13	[BUG] [BUGGY] rawCentralDirectoryData = new byte[length]; [FE] ZipException [CONTEXT] public void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) throws ZipException {  [BUGGY] rawCentralDirectoryData = new byte[length]; [BUGGY] System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length);       if (length >= 3 * DWORD + WORD) { parseFromLocalFileData(buffer, offset, length); [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromCentralDirectoryData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	218	218	1	replace	
14	[BUG] [BUGGY] [FE] ZipException [CONTEXT] public void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) throws ZipException {  [BUGGY] [BUGGY] rawCentralDirectoryData = new byte[length]; System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length);       if (length >= 3 * DWORD + WORD) { parseFromLocalFileData(buffer, offset, length); [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromCentralDirectoryData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	218	218	1	add	
15	[BUG] [BUGGY] System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length); [FE] ZipException [CONTEXT] public void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) throws ZipException {  rawCentralDirectoryData = new byte[length]; [BUGGY] System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length); [BUGGY]        if (length >= 3 * DWORD + WORD) { parseFromLocalFileData(buffer, offset, length); } else if (length == 3 * DWORD) { [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromCentralDirectoryData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	219	219	1	replace	
16	[BUG] [BUGGY] [FE] ZipException [CONTEXT] public void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) throws ZipException {  rawCentralDirectoryData = new byte[length]; [BUGGY] [BUGGY] System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length);       if (length >= 3 * DWORD + WORD) { parseFromLocalFileData(buffer, offset, length); } else if (length == 3 * DWORD) { [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromCentralDirectoryData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	219	219	1	add	
17	[BUG] [BUGGY] if (length >= 3 * DWORD + WORD) { [FE] ZipException [CONTEXT]  rawCentralDirectoryData = new byte[length]; System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length);       [BUGGY] if (length >= 3 * DWORD + WORD) { [BUGGY] parseFromLocalFileData(buffer, offset, length); } else if (length == 3 * DWORD) { size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); } else if (length % DWORD == WORD) { diskStart = new ZipLong(buffer, offset + length - WORD); } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromCentralDirectoryData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	227	227	1	replace	
18	[BUG] [BUGGY] [FE] ZipException [CONTEXT]  rawCentralDirectoryData = new byte[length]; System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length);       [BUGGY] [BUGGY] if (length >= 3 * DWORD + WORD) { parseFromLocalFileData(buffer, offset, length); } else if (length == 3 * DWORD) { size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); } else if (length % DWORD == WORD) { diskStart = new ZipLong(buffer, offset + length - WORD); } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromCentralDirectoryData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	227	227	1	add	
19	[BUG] [BUGGY] parseFromLocalFileData(buffer, offset, length); [FE] ZipException [CONTEXT] rawCentralDirectoryData = new byte[length]; System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length);       if (length >= 3 * DWORD + WORD) { [BUGGY] parseFromLocalFileData(buffer, offset, length); [BUGGY] } else if (length == 3 * DWORD) { size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); } else if (length % DWORD == WORD) { diskStart = new ZipLong(buffer, offset + length - WORD); } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromCentralDirectoryData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	228	228	1	replace	
20	[BUG] [BUGGY] [FE] ZipException [CONTEXT] rawCentralDirectoryData = new byte[length]; System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length);       if (length >= 3 * DWORD + WORD) { [BUGGY] [BUGGY] parseFromLocalFileData(buffer, offset, length); } else if (length == 3 * DWORD) { size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); } else if (length % DWORD == WORD) { diskStart = new ZipLong(buffer, offset + length - WORD); } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromCentralDirectoryData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	228	228	1	add	
21	[BUG] [BUGGY] } [FE] ZipException [CONTEXT] parseFromLocalFileData(buffer, offset, length); } else if (length == 3 * DWORD) { size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); } else if (length % DWORD == WORD) { diskStart = new ZipLong(buffer, offset + length - WORD); } [BUGGY] } [BUGGY]  [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromCentralDirectoryData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	238	238	1	replace	
22	[BUG] [BUGGY] [FE] ZipException [CONTEXT] parseFromLocalFileData(buffer, offset, length); } else if (length == 3 * DWORD) { size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); } else if (length % DWORD == WORD) { diskStart = new ZipLong(buffer, offset + length - WORD); } [BUGGY] [BUGGY] } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromCentralDirectoryData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	238	238	1	add	
23	[BUG] [BUGGY] if (rawCentralDirectoryData != null) { [FE] ZipException [CONTEXT] throws ZipException { [BUGGY] if (rawCentralDirectoryData != null) { [BUGGY] int expectedLength = (hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); if (rawCentralDirectoryData.length != expectedLength) { throw new ZipException("central directory zip64 extended" + " information extra field's length" + " doesn't match central directory" + " data.Expected length " + expectedLength + " but is " [CLASS] Zip64ExtendedInformationExtraField [METHOD] reparseCentralDirectoryData [RETURN_TYPE] void  boolean hasUncompressedSize boolean hasCompressedSize boolean hasRelativeHeaderOffset boolean hasDiskStart [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean hasCompressedSize hasDiskStart hasRelativeHeaderOffset hasUncompressedSize String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int expectedLength offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	254	254	1	replace	
24	[BUG] [BUGGY] [FE] ZipException [CONTEXT] throws ZipException { [BUGGY] [BUGGY] if (rawCentralDirectoryData != null) { int expectedLength = (hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); if (rawCentralDirectoryData.length != expectedLength) { throw new ZipException("central directory zip64 extended" + " information extra field's length" + " doesn't match central directory" + " data.Expected length " + expectedLength + " but is " [CLASS] Zip64ExtendedInformationExtraField [METHOD] reparseCentralDirectoryData [RETURN_TYPE] void  boolean hasUncompressedSize boolean hasCompressedSize boolean hasRelativeHeaderOffset boolean hasDiskStart [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean hasCompressedSize hasDiskStart hasRelativeHeaderOffset hasUncompressedSize String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int expectedLength offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	254	254	1	add	
25	[BUG] [BUGGY] int expectedLength = (hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0)  + (hasRelativeHeaderOffset ? DWORD : 0) [FE] ZipException [CONTEXT] throws ZipException { if (rawCentralDirectoryData != null) { [BUGGY] int expectedLength = (hasUncompressedSize ? DWORD : 0)    + (hasCompressedSize ? DWORD : 0)        + (hasRelativeHeaderOffset ? DWORD : 0) [BUGGY] + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); if (rawCentralDirectoryData.length != expectedLength) { throw new ZipException("central directory zip64 extended" + " information extra field's length" + " doesn't match central directory" + " data.Expected length " + expectedLength + " but is " + rawCentralDirectoryData.length); [CLASS] Zip64ExtendedInformationExtraField [METHOD] reparseCentralDirectoryData [RETURN_TYPE] void  boolean hasUncompressedSize boolean hasCompressedSize boolean hasRelativeHeaderOffset boolean hasDiskStart [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean hasCompressedSize hasDiskStart hasRelativeHeaderOffset hasUncompressedSize String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int expectedLength offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	255	257	1	replace	
26	[BUG] [BUGGY] [FE] ZipException [CONTEXT] throws ZipException { if (rawCentralDirectoryData != null) { [BUGGY] [BUGGY] int expectedLength = (hasUncompressedSize ? DWORD : 0)    + (hasCompressedSize ? DWORD : 0)        + (hasRelativeHeaderOffset ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); if (rawCentralDirectoryData.length != expectedLength) { throw new ZipException("central directory zip64 extended" + " information extra field's length" + " doesn't match central directory" + " data.Expected length " + expectedLength + " but is " + rawCentralDirectoryData.length); [CLASS] Zip64ExtendedInformationExtraField [METHOD] reparseCentralDirectoryData [RETURN_TYPE] void  boolean hasUncompressedSize boolean hasCompressedSize boolean hasRelativeHeaderOffset boolean hasDiskStart [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean hasCompressedSize hasDiskStart hasRelativeHeaderOffset hasUncompressedSize String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int expectedLength offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	255	257	1	add	
27	[BUG] [BUGGY] if (rawCentralDirectoryData.length != expectedLength) { [FE] ZipException [CONTEXT] throws ZipException { if (rawCentralDirectoryData != null) { int expectedLength = (hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); [BUGGY] if (rawCentralDirectoryData.length != expectedLength) { [BUGGY] throw new ZipException("central directory zip64 extended" + " information extra field's length" + " doesn't match central directory" + " data.Expected length " + expectedLength + " but is " + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); [CLASS] Zip64ExtendedInformationExtraField [METHOD] reparseCentralDirectoryData [RETURN_TYPE] void  boolean hasUncompressedSize boolean hasCompressedSize boolean hasRelativeHeaderOffset boolean hasDiskStart [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean hasCompressedSize hasDiskStart hasRelativeHeaderOffset hasUncompressedSize String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int expectedLength offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	259	259	1	replace	
28	[BUG] [BUGGY] [FE] ZipException [CONTEXT] throws ZipException { if (rawCentralDirectoryData != null) { int expectedLength = (hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); [BUGGY] [BUGGY] if (rawCentralDirectoryData.length != expectedLength) { throw new ZipException("central directory zip64 extended" + " information extra field's length" + " doesn't match central directory" + " data.Expected length " + expectedLength + " but is " + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); [CLASS] Zip64ExtendedInformationExtraField [METHOD] reparseCentralDirectoryData [RETURN_TYPE] void  boolean hasUncompressedSize boolean hasCompressedSize boolean hasRelativeHeaderOffset boolean hasDiskStart [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean hasCompressedSize hasDiskStart hasRelativeHeaderOffset hasUncompressedSize String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int expectedLength offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	259	259	1	add	
29	[BUG] [BUGGY] throw new ZipException("central directory zip64 extended"   + " information extra field's length"     + " doesn't match central directory" [FE] ZipException [CONTEXT] throws ZipException { if (rawCentralDirectoryData != null) { int expectedLength = (hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); if (rawCentralDirectoryData.length != expectedLength) { [BUGGY] throw new ZipException("central directory zip64 extended"          + " information extra field's length"                    + " doesn't match central directory" [BUGGY] + " information extra field's length" + " doesn't match central directory" + " data.Expected length " + expectedLength + " but is " + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; [CLASS] Zip64ExtendedInformationExtraField [METHOD] reparseCentralDirectoryData [RETURN_TYPE] void  boolean hasUncompressedSize boolean hasCompressedSize boolean hasRelativeHeaderOffset boolean hasDiskStart [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean hasCompressedSize hasDiskStart hasRelativeHeaderOffset hasUncompressedSize String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int expectedLength offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	260	262	1	replace	
30	[BUG] [BUGGY] [FE] ZipException [CONTEXT] throws ZipException { if (rawCentralDirectoryData != null) { int expectedLength = (hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); if (rawCentralDirectoryData.length != expectedLength) { [BUGGY] [BUGGY] throw new ZipException("central directory zip64 extended"          + " information extra field's length"                    + " doesn't match central directory" + " information extra field's length" + " doesn't match central directory" + " data.Expected length " + expectedLength + " but is " + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; [CLASS] Zip64ExtendedInformationExtraField [METHOD] reparseCentralDirectoryData [RETURN_TYPE] void  boolean hasUncompressedSize boolean hasCompressedSize boolean hasRelativeHeaderOffset boolean hasDiskStart [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean hasCompressedSize hasDiskStart hasRelativeHeaderOffset hasUncompressedSize String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int expectedLength offset  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	1.0	260	262	1	add	
31	[BUG] [BUGGY] return new ZipShort(size != null ? 2 * DWORD : 0); [FE] ZipException [CONTEXT] public ZipShort getLocalFileDataLength() { [BUGGY] return new ZipShort(size != null ? 2 * DWORD : 0); [BUGGY] } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataLength [RETURN_TYPE] ZipShort  [VARIABLES] byte[] EMPTY rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	144	144	1	replace	
32	[BUG] [BUGGY] [FE] ZipException [CONTEXT] public ZipShort getLocalFileDataLength() { [BUGGY] [BUGGY] return new ZipShort(size != null ? 2 * DWORD : 0); } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataLength [RETURN_TYPE] ZipShort  [VARIABLES] byte[] EMPTY rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	144	144	1	add	
33	[BUG] [BUGGY] if (size != null || compressedSize != null) { [FE] ZipException [CONTEXT] public byte[] getLocalFileDataData() { [BUGGY] if (size != null || compressedSize != null) { [BUGGY] if (size == null || compressedSize == null) { throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } byte[] data = new byte[2 * DWORD]; addSizes(data); return data; } return EMPTY; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] EMPTY data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	157	157	1	replace	
34	[BUG] [BUGGY] [FE] ZipException [CONTEXT] public byte[] getLocalFileDataData() { [BUGGY] [BUGGY] if (size != null || compressedSize != null) { if (size == null || compressedSize == null) { throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } byte[] data = new byte[2 * DWORD]; addSizes(data); return data; } return EMPTY; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] EMPTY data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	157	157	1	add	
35	[BUG] [BUGGY] if (size == null || compressedSize == null) { [FE] ZipException [CONTEXT] public byte[] getLocalFileDataData() { if (size != null || compressedSize != null) { [BUGGY] if (size == null || compressedSize == null) { [BUGGY] throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } byte[] data = new byte[2 * DWORD]; addSizes(data); return data; } return EMPTY; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] EMPTY data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	158	158	1	replace	
36	[BUG] [BUGGY] [FE] ZipException [CONTEXT] public byte[] getLocalFileDataData() { if (size != null || compressedSize != null) { [BUGGY] [BUGGY] if (size == null || compressedSize == null) { throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } byte[] data = new byte[2 * DWORD]; addSizes(data); return data; } return EMPTY; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] EMPTY data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	158	158	1	add	
37	[BUG] [BUGGY] byte[] data = new byte[2 * DWORD]; [FE] ZipException [CONTEXT] public byte[] getLocalFileDataData() { if (size != null || compressedSize != null) { if (size == null || compressedSize == null) { throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } [BUGGY] byte[] data = new byte[2 * DWORD]; [BUGGY] addSizes(data); return data; } return EMPTY; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] EMPTY data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	161	161	1	replace	
38	[BUG] [BUGGY] [FE] ZipException [CONTEXT] public byte[] getLocalFileDataData() { if (size != null || compressedSize != null) { if (size == null || compressedSize == null) { throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } [BUGGY] [BUGGY] byte[] data = new byte[2 * DWORD]; addSizes(data); return data; } return EMPTY; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] EMPTY data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	161	161	1	add	
39	[BUG] [BUGGY] addSizes(data); [FE] ZipException [CONTEXT] public byte[] getLocalFileDataData() { if (size != null || compressedSize != null) { if (size == null || compressedSize == null) { throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } byte[] data = new byte[2 * DWORD]; [BUGGY] addSizes(data); [BUGGY] return data; } return EMPTY; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] EMPTY data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	162	162	1	replace	
40	[BUG] [BUGGY] [FE] ZipException [CONTEXT] public byte[] getLocalFileDataData() { if (size != null || compressedSize != null) { if (size == null || compressedSize == null) { throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } byte[] data = new byte[2 * DWORD]; [BUGGY] [BUGGY] addSizes(data); return data; } return EMPTY; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] EMPTY data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	162	162	1	add	
41	[BUG] [BUGGY] return data; [FE] ZipException [CONTEXT] public byte[] getLocalFileDataData() { if (size != null || compressedSize != null) { if (size == null || compressedSize == null) { throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } byte[] data = new byte[2 * DWORD]; addSizes(data); [BUGGY] return data; [BUGGY] } return EMPTY; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] EMPTY data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	163	163	1	replace	
42	[BUG] [BUGGY] [FE] ZipException [CONTEXT] public byte[] getLocalFileDataData() { if (size != null || compressedSize != null) { if (size == null || compressedSize == null) { throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } byte[] data = new byte[2 * DWORD]; addSizes(data); [BUGGY] [BUGGY] return data; } return EMPTY; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getLocalFileDataData [RETURN_TYPE] byte[]  [VARIABLES] byte[] EMPTY data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	163	163	1	add	
43	[BUG] [BUGGY] if (length == 0) { [FE] ZipException [CONTEXT] throws ZipException { [BUGGY] if (length == 0) { [BUGGY]     return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	186	186	1	replace	
44	[BUG] [BUGGY] [FE] ZipException [CONTEXT] throws ZipException { [BUGGY] [BUGGY] if (length == 0) {     return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	186	186	1	add	
45	[BUG] [BUGGY] if (length < 2 * DWORD) { [FE] ZipException [CONTEXT] throws ZipException { if (length == 0) {     return; } [BUGGY] if (length < 2 * DWORD) { [BUGGY] throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	193	193	1	replace	
46	[BUG] [BUGGY] [FE] ZipException [CONTEXT] throws ZipException { if (length == 0) {     return; } [BUGGY] [BUGGY] if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	193	193	1	add	
47	[BUG] [BUGGY] size = new ZipEightByteInteger(buffer, offset); [FE] ZipException [CONTEXT] if (length == 0) {     return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } [BUGGY] size = new ZipEightByteInteger(buffer, offset); [BUGGY] offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	196	196	1	replace	
48	[BUG] [BUGGY] [FE] ZipException [CONTEXT] if (length == 0) {     return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } [BUGGY] [BUGGY] size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	196	196	1	add	
49	[BUG] [BUGGY] offset += DWORD; [FE] ZipException [CONTEXT]     return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); [BUGGY] offset += DWORD; [BUGGY] compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	197	197	1	replace	
50	[BUG] [BUGGY] [FE] ZipException [CONTEXT]     return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); [BUGGY] [BUGGY] offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	197	197	1	add	
51	[BUG] [BUGGY] compressedSize = new ZipEightByteInteger(buffer, offset); [FE] ZipException [CONTEXT]    return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; [BUGGY] compressedSize = new ZipEightByteInteger(buffer, offset); [BUGGY] offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	198	198	1	replace	
52	[BUG] [BUGGY] [FE] ZipException [CONTEXT]    return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; [BUGGY] [BUGGY] compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	198	198	1	add	
53	[BUG] [BUGGY] offset += DWORD; [FE] ZipException [CONTEXT]   return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); [BUGGY] offset += DWORD; [BUGGY] int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	199	199	1	replace	
54	[BUG] [BUGGY] [FE] ZipException [CONTEXT]   return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); [BUGGY] [BUGGY] offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	199	199	1	add	
55	[BUG] [BUGGY] int remaining = length - 2 * DWORD; [FE] ZipException [CONTEXT]  return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; [BUGGY] int remaining = length - 2 * DWORD; [BUGGY] if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	200	200	1	replace	
56	[BUG] [BUGGY] [FE] ZipException [CONTEXT]  return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; [BUGGY] [BUGGY] int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	200	200	1	add	
57	[BUG] [BUGGY] if (remaining >= DWORD) { [FE] ZipException [CONTEXT] return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; [BUGGY] if (remaining >= DWORD) { [BUGGY] relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	201	201	1	replace	
58	[BUG] [BUGGY] [FE] ZipException [CONTEXT] return; } if (length < 2 * DWORD) { throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG); } size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; [BUGGY] [BUGGY] if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	201	201	1	add	
59	[BUG] [BUGGY] if (remaining >= WORD) { [FE] ZipException [CONTEXT] size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } [BUGGY] if (remaining >= WORD) { [BUGGY] diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	206	206	1	replace	
60	[BUG] [BUGGY] [FE] ZipException [CONTEXT] size = new ZipEightByteInteger(buffer, offset); offset += DWORD; compressedSize = new ZipEightByteInteger(buffer, offset); offset += DWORD; int remaining = length - 2 * DWORD; if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } [BUGGY] [BUGGY] if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	206	206	1	add	
61	[BUG] [BUGGY] } [FE] ZipException [CONTEXT] if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } [BUGGY] } [BUGGY]  [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	211	211	1	replace	
62	[BUG] [BUGGY] [FE] ZipException [CONTEXT] if (remaining >= DWORD) { relativeHeaderOffset = new ZipEightByteInteger(buffer, offset); offset += DWORD; remaining -= DWORD; } if (remaining >= WORD) { diskStart = new ZipLong(buffer, offset); offset += WORD; remaining -= WORD; } [BUGGY] [BUGGY] } [CLASS] Zip64ExtendedInformationExtraField [METHOD] parseFromLocalFileData [RETURN_TYPE] void  byte[] buffer int offset int length [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset size int length offset remaining  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	211	211	1	add	
63	[BUG] [BUGGY] int off = 0; [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { [BUGGY] int off = 0; [BUGGY] if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	346	346	1	replace	
64	[BUG] [BUGGY] [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { [BUGGY] [BUGGY] int off = 0; if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	346	346	1	add	
65	[BUG] [BUGGY] if (size != null) { [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; [BUGGY] if (size != null) { [BUGGY] System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	347	347	1	replace	
66	[BUG] [BUGGY] [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; [BUGGY] [BUGGY] if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	347	347	1	add	
67	[BUG] [BUGGY] System.arraycopy(size.getBytes(), 0, data, 0, DWORD); [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { [BUGGY] System.arraycopy(size.getBytes(), 0, data, 0, DWORD); [BUGGY] off += DWORD; } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	348	348	1	replace	
68	[BUG] [BUGGY] [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { [BUGGY] [BUGGY] System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	348	348	1	add	
69	[BUG] [BUGGY] off += DWORD; [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); [BUGGY] off += DWORD; [BUGGY] } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	349	349	1	replace	
70	[BUG] [BUGGY] [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); [BUGGY] [BUGGY] off += DWORD; } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	349	349	1	add	
71	[BUG] [BUGGY] if (compressedSize != null) { [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } [BUGGY] if (compressedSize != null) { [BUGGY] System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	351	351	1	replace	
72	[BUG] [BUGGY] [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } [BUGGY] [BUGGY] if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	351	351	1	add	
73	[BUG] [BUGGY] System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } if (compressedSize != null) { [BUGGY] System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); [BUGGY] off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	352	352	1	replace	
74	[BUG] [BUGGY] [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } if (compressedSize != null) { [BUGGY] [BUGGY] System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	352	352	1	add	
75	[BUG] [BUGGY] off += DWORD; [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); [BUGGY] off += DWORD; [BUGGY] } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	353	353	1	replace	
76	[BUG] [BUGGY] [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); [BUGGY] [BUGGY] off += DWORD; } return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	353	353	1	add	
77	[BUG] [BUGGY] return off; [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } [BUGGY] return off; [BUGGY] } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	355	355	1	replace	
78	[BUG] [BUGGY] [FE] ZipException [CONTEXT] private int addSizes(byte[] data) { int off = 0; if (size != null) { System.arraycopy(size.getBytes(), 0, data, 0, DWORD); off += DWORD; } if (compressedSize != null) { System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD); off += DWORD; } [BUGGY] [BUGGY] return off; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] addSizes [RETURN_TYPE] int  byte[] data [VARIABLES] byte[] EMPTY buffer data rawCentralDirectoryData ZipLong diskStart ds ZipShort HEADER_ID boolean String LFH_MUST_HAVE_BOTH_SIZES_MSG ZipEightByteInteger compressedSize relativeHeaderOffset rho size int off  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.7071067811865475	355	355	1	add	
80	[BUG] [BUGGY] static final ZipShort HEADER_ID = new ZipShort(0x0001); [FE] ZipException [CONTEXT] [BUGGY] static final ZipShort HEADER_ID = new ZipShort(0x0001); [BUGGY]  [CLASS] Zip64ExtendedInformationExtraField  [VARIABLES] 	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.3333333333333333	78	78	1	replace	
81	[BUG] [BUGGY] [FE] ZipException [CONTEXT] [BUGGY] [BUGGY] static final ZipShort HEADER_ID = new ZipShort(0x0001); [CLASS] Zip64ExtendedInformationExtraField  [VARIABLES] 	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.3333333333333333	78	78	1	add	
82	[BUG] [BUGGY] private static final byte[] EMPTY = new byte[0]; [FE] ZipException [CONTEXT] [BUGGY] private static final byte[] EMPTY = new byte[0]; [BUGGY]  [CLASS] Zip64ExtendedInformationExtraField  [VARIABLES] 	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.3333333333333333	83	83	1	replace	
83	[BUG] [BUGGY] [FE] ZipException [CONTEXT] [BUGGY] [BUGGY] private static final byte[] EMPTY = new byte[0]; [CLASS] Zip64ExtendedInformationExtraField  [VARIABLES] 	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.3333333333333333	83	83	1	add	
84	[BUG] [BUGGY] return HEADER_ID; [FE] ZipException [CONTEXT] public ZipShort getHeaderId() { [BUGGY] return HEADER_ID; [BUGGY] } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getHeaderId [RETURN_TYPE] ZipShort  [VARIABLES] byte[] EMPTY rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.3333333333333333	139	139	1	replace	
85	[BUG] [BUGGY] [FE] ZipException [CONTEXT] public ZipShort getHeaderId() { [BUGGY] [BUGGY] return HEADER_ID; } [CLASS] Zip64ExtendedInformationExtraField [METHOD] getHeaderId [RETURN_TYPE] ZipShort  [VARIABLES] byte[] EMPTY rawCentralDirectoryData ZipLong diskStart ZipShort HEADER_ID String LFH_MUST_HAVE_BOTH_SIZES_MSG boolean ZipEightByteInteger compressedSize relativeHeaderOffset size  	projects/Compress19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java	0.3333333333333333	139	139	1	add	
