bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  currentEvent.stepAccepted(eventT,  yDot);  [CE]  illegal  start  of  expression  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	currentEvent.stepAccepted(eventT,  yDot);	      System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);  [CE]  illegal  start  of  expression  [FE]      NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yEnd);	      System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [BUGGY]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(event,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(event,  0,  y,  0,  y.length);  }  [BUGGY]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(event,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  y  =  handler.getY();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  y  =  handler.getY();  [BUGGY]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	y  =  handler.getY();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  y  =  handler.getParent();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  y  =  handler.getParent();  [BUGGY]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	y  =  handler.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  System.arraycopy(eventY,  0,  yDot,  0,  y.length);  [BUGGY]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventY,  0,  yDot,  0,  y.length);	  System.arraycopy(eventY,    0,    y,    0,    y.length);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(y.length  >  0)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(y.length  >  0)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  if(y.length  >  0)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	      for(final    EventState    y    :    eventsInitialized)    {    if(y.length    >    0)    {    System.arraycopy(y,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
9	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	      for(final    EventState    y    :    eventsInitialized)    {    if(y.length    >    0)    {    System.arraycopy(y,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
10	[BUG]  [BUGGY]  final  EventState  y  =  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  final  EventState  y  =  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	final  EventState  y  =  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	      for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(y,    0,    y,    0,    y.length);    	non-compiled	[CE]  ';'  expected	14	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);	  	compilable	  [FE]  AssertionError  	4	1	add
12	[BUG]  [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [FE]  AssertionError  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);	  	compilable	  [FE]  AssertionError  	4	1	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);	  	compilable	  [FE]  AssertionError  	4	1	add
14	[BUG]  [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  [FE]  AssertionError  [FE]      NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  yDot.length);  currentEvent.stepAccepted(eventT,  yDot);	  	compilable	  [FE]  AssertionError  	4	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);	  	compilable	  [FE]  AssertionError  	6	1	add
16	[BUG]  [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [FE]  AssertionError  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);	  	compilable	  [FE]  AssertionError  	6	1	add
17	[BUG]  [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  eventY);  [CE]  double  cannot  be  dereferenced  [FE]      NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  eventY);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  eventY);	  	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	add
18	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arra    	non-compiled	[CE]  not  a  statement	10	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arra    	non-compiled	[CE]  not  a  statement	10	None	replace
20	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	      for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  currentEvent.stepAccepted(eventT,  eventY);  [CE]  illegal  start  of  expression  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	currentEvent.stepAccepted(eventT,  eventY);	      System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  yDot);  [CE]  double  cannot  be  dereferenced  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  yDot);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  previousT.stepAccepted(eventT,  yDot);	  	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	add
26	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  handler.length);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  handler.length);  [BUGGY]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventY,  0,  y,  0,  handler.length);	  System.arraycopy(eventY,    0,    y,    0,    y.length);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
27	[BUG]  [BUGGY]  System.arraycopy(y,  0,  other,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [CE]  illegal  start  of  expression  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  System.arraycopy(y,  0,  other,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(y,  0,  other,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);	      System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventX,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventX,  0,  y,  0,  y.length);  }  [BUGGY]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventX,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
29	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
30	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isFirstStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isFirstStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  if(isFirstStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	      for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(y,    0,    y,    0,    y.length);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
31	[BUG]  [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(x,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [CE]  cannot  find  symbol  x  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  System.arraycopy(x,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    System.arraycopy(x,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);	  	non-compiled	[CE]  cannot  find  symbol  x	6	None	add
32	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [CE]  illegal  start  of  expression  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventY,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);	      System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.values().iterator();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.values().iterator();  [BUGGY]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	Iterator  <  EventState>  iterator  =  eventsInitialized.values().iterator();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
34	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.entities().iterator();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.entities().iterator();  [BUGGY]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	Iterator  <  EventState>  iterator  =  eventsInitialized.entities().iterator();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  }  [BUGGY]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  }	  for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
36	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(y.length  >  1)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(y.length  >  1)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  if(y.length  >  1)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	      for(final    EventState    y    :    eventsInitialized)    {    if(y.length    >    0)    {    System.arraycopy(y,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
37	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  }  [CE]  illegal  start  of  expression  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  }	      System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  y.length);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  System.arraycopy(y,  0,  yDot,  0,  y.length);  [BUGGY]      if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(y,  0,  yDot,  0,  y.length);	  System.arraycopy(y,    0,    y,    0,    y.length);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
40	[BUG]  [BUGGY]  final  EventState  y  =  eventsInitialized.getEventState();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  final  EventState  y  =  eventsInitialized.getEventState();  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	final  EventState  y  =  eventsInitialized.getEventState();	      for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(y,    0,    y,    0,    y.length);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
41	[BUG]  [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  previousEvent.stepAccepted(eventT,  yDot);  [CE]  cannot  find  symbol  previousEvent  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]      System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  System.arraycopy(y,  0,  y,  0,  y.length);  previousEvent.stepAccepted(eventT,  yDot);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	        System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    System.arraycopy(y,  0,  y,  0,  y.length);  previousEvent.stepAccepted(eventT,  yDot);	  	non-compiled	[CE]  cannot  find  symbol  previousEvent	4	None	add
42	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arra    	non-compiled	[CE]  not  a  statement	10	None	replace
43	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  currentEvent.stepAccepted(eventT,  tEnd);  [CE]  illegal  start  of  expression  [FE]    NoBracketingException    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  currentEvent.stepAccepted(eventT,  tEnd);  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	currentEvent.stepAccepted(eventT,  tEnd);	      System.arraycopy(y,    0,    y,    0,    y.length);    currentEvent.stepAccepted(eventT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
45	[BUG]  [BUGGY]  for(final  EventState  y  :  eventState.getEvents())  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);    [BUGGY]  for(final  EventState  y  :  eventState.getEvents())  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]    }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventState.getEvents())  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }	      for(final    EventState    y    :    eventsInitialized)    {    if(isLastStep)    {    System.arraycopy(y,    0,    y,    0,    y.length);    for(final    EventState    y    :    eventsInitialized)    {    System.arraycopy(y,    0,    y,    0,    y.length);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
