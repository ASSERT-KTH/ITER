bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(y,  0,  y,  0,  y.length);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(y,  0,  y,  0,  y.length);	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  [BUGGY]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	System.arraycopy(eventY,  0,  y,  0,  y.length);	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    [BUGGY]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  [FE]  NoBracketingException  [FE]    AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]  }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);		compilable	  [FE]  NoBracketingException  	4	2	add
5	[BUG]  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [FE]  NoBracketingException  [FE]    AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);  [BUGGY]  }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  yDot);		compilable	  [FE]  NoBracketingException  	4	2	add
6	[BUG]  [BUGGY]  [FE]  NoBracketingException  [FE]      AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]  }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);		compilable	  [FE]  NoBracketingException  	4	2	add
7	[BUG]  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [FE]  NoBracketingException  [FE]      AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]  }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	    System.arraycopy(y,  0,  y,  0,  y.length);  currentEvent.stepAccepted(eventT,  eventY);		compilable	  [FE]  NoBracketingException  	4	2	add
8	[BUG]  [BUGGY]    if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  [BUGGY]  }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	    if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {		non-compiled	[CE]  illegal  start  of  expression	4	None	add
9	[BUG]  [BUGGY]    if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [BUGGY]  }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	    if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
10	[BUG]  [BUGGY]    if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra  [BUGGY]  }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	    if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arra		non-compiled	[CE]  not  a  statement	4	None	add
11	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  [BUGGY]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]  for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }  [BUGGY]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  }	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]    for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]  }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	    for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
14	[BUG]  [BUGGY]    for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);  [BUGGY]  }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	    for(final  EventState  y  :  eventsInitialized)  {  if(isLastStep)  {  System.arraycopy(y,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
15	[BUG]  [BUGGY]    for(final  EventState  y  :  eventsInitialized)  {  if(y.length  >  0)  {  System.arraycopy(y,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  for  (final  StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    for(final  EventState  y  :  eventsInitialized)  {  if(y.length  >  0)  {  System.arraycopy(y,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }  [BUGGY]  }  if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	    for(final  EventState  y  :  eventsInitialized)  {  if(y.length  >  0)  {  System.arraycopy(y,  0,  y,  0,  y.length);  for(final  EventState  y  :  eventsInitialized)  {  System.arraycopy(y,  0,  y,  0,  y.length);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
