bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]    AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  -  1;  [BUGGY]  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	add	final  double  eventT  =  currentEvent.getEventTime()  -  1;	final  double  eventT  =  currentEvent.getEventTime();  	compilable	timeout	43	1	replace
2	[BUG]  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  -  1;  timeout  [FE]    AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  -  1;  [BUGGY]  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double  eventT  =  currentEvent.getEventTime()  -  1;	final  double  eventT  =  currentEvent.getEventTime();  	compilable	timeout	43	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  +  1;  [BUGGY]  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	add	final  double  eventT  =  currentEvent.getEventTime()  +  1;	final  double  eventT  =  currentEvent.getEventTime();  	compilable	  [FE]  AssertionError  	43	3	replace
4	[BUG]  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  +  1;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]  final  double  eventT  =  currentEvent.getEventTime()  +  1;  [BUGGY]  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	final  double  eventT  =  currentEvent.getEventTime()  +  1;	final  double  eventT  =  currentEvent.getEventTime();  	compilable	  [FE]  AssertionError  	43	3	replace
5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  eventT  [FE]        AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]    [BUGGY]  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	  	final  double  eventT  =  currentEvent.getEventTime();  	non-compiled	[CE]  cannot  find  symbol  eventT	43	None	replace
6	[BUG]  [BUGGY]    Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]    Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	    Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();		non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	44	None	add
7	[BUG]  [BUGGY]    Iterator  <  EventState>  iterator  =  events.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]    Iterator  <  EventState>  iterator  =  events.iterator();  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	    Iterator  <  EventState>  iterator  =  events.iterator();		non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	44	None	add
8	[BUG]  [BUGGY]    Iterator  <  EventState>  iterator  =  eventsInitializedSet.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]    Iterator  <  EventState>  iterator  =  eventsInitializedSet.iterator();  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	    Iterator  <  EventState>  iterator  =  eventsInitializedSet.iterator();		non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	44	None	add
9	[BUG]  [BUGGY]    Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]    Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	    Iterator  <  EventState>  iterator  =  eventsStates.iterator();		non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	44	None	add
10	[BUG]  [BUGGY]    final  double[]  previousT  =  currentEvent.getPrevious();  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]    final  double[]  previousT  =  currentEvent.getPrevious();  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	    final  double[]  previousT  =  currentEvent.getPrevious();		non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	44	None	add
11	[BUG]  [BUGGY]    final  double[]  previousT  =  currentEvent.getReturnTime();  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]    final  double[]  previousT  =  currentEvent.getReturnTime();  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	    final  double[]  previousT  =  currentEvent.getReturnTime();		non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	44	None	add
12	[BUG]  [BUGGY]    final  double[]  previousT  =  currentEvent.getRemaining();  [CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError  [CONTEXT]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();    [BUGGY]    final  double[]  previousT  =  currentEvent.getRemaining();  [BUGGY]  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  final  double[]  eventY  =  interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT,  eventY);  isLastStep  =  currentEvent.stop();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	    final  double[]  previousT  =  currentEvent.getRemaining();		non-compiled	[CE]  variable  previousT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	44	None	add
