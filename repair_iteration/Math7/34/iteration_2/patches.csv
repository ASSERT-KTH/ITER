bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]          state.stepAccepted(currentT,  currentY);  state.stepAccepted(currentT,  currentY);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	add	                state.stepAccepted(currentT,    currentY);    state.stepAccepted(currentT,  currentY);	  	compilable	  [FE]  AssertionError  	18	1	add
2	[BUG]  [BUGGY]          state.stepAccepted(currentT,  currentY);  state.stepAccepted(currentT,  currentY);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]          state.stepAccepted(currentT,  currentY);  state.stepAccepted(currentT,  currentY);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	                state.stepAccepted(currentT,    currentY);    state.stepAccepted(currentT,  currentY);	  	compilable	  [FE]  AssertionError  	18	1	add
3	[BUG]  [BUGGY]          state.stepAccepted(currentT,  currentY);  State  state  =  stepAccepted(currentT,  currentY);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]          state.stepAccepted(currentT,  currentY);  State  state  =  stepAccepted(currentT,  currentY);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	                state.stepAccepted(currentT,    currentY);    State  state  =  stepAccepted(currentT,  currentY);	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
4	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  orderingSign);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  orderingSign);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  orderingSign);	  state.stepAccepted(currentT,    tEnd,    yDot);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	29	None	replace
5	[BUG]  [BUGGY]  cast(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  2);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  cast(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  2);  }  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	cast(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  2);  }	          if(eventsInitialized)    {    for(final    EventEvent    eventT    :    eventsInitialized)    {    state.stepAccepted(currentT,    tEnd,    2);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
6	[BUG]  [BUGGY]  hopState(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  2);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  hopState(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  2);  }  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	hopState(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  2);  }	          if(eventsInitialized)    {    for(final    EventEvent    eventT    :    eventsInitialized)    {    state.stepAccepted(currentT,    tEnd,    2);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
7	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot  +  1);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	tEnd  =  state.stepAccepted(currentT,  yDot  +  1);	          tEnd    =    state.stepAccepted(currentT,    y    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	23	None	replace
8	[BUG]  [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot,  currentY);  [CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot,  currentY);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	int  tEnd  =  state.stepAccepted(currentT,  yDot,  currentY);	  int    tEnd    =    state.stepAccepted(currentT,    yDot,    tEnd);    	non-compiled	[CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	31	None	replace
9	[BUG]  [BUGGY]  isLastStep  =  isLastStep  ||  state.stepAccepted(currentT,  tEnd,  1,  0);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep  =  isLastStep  ||  state.stepAccepted(currentT,  tEnd,  1,  0);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep  =  isLastStep  ||  state.stepAccepted(currentT,  tEnd,  1,  0);	  isLastStep    =    isLastStep    ||    state.stepAccepted(currentT,    tEnd,    0);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	12	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	add	isLastStep        =        isLastStep        &&        state.stop();        isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();	  	compilable	  [FE]  AssertionError  	5	1	add
11	[BUG]  [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep        =        isLastStep        &&        state.stop();        isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();	  	compilable	  [FE]  AssertionError  	5	1	add
12	[BUG]  [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd);  isLastStep  =  isLastStep  &&  state.stop();  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd);  isLastStep  =  isLastStep  &&  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep        =        isLastStep        &&        state.stop();        isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd);  isLastStep  =  isLastStep  &&  state.stop();	  	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	5	None	add
13	[BUG]  [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  &&  state.stop();  [CE]  'void'  type  not  allowed  here  [FE]        AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  &&  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep        =        isLastStep        &&        state.stop();        isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  &&  state.stop();	  	non-compiled	[CE]  'void'  type  not  allowed  here	5	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  ||  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	add	isLastStep        =        isLastStep        &&        state.stop();        isLastStep    =    isLastStep    ||    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  ||  state.stop();	  	compilable	  [FE]  AssertionError  	20	1	add
15	[BUG]  [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  ||  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  ||  state.stop();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  ||  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep        =        isLastStep        &&        state.stop();        isLastStep    =    isLastStep    ||    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  ||  state.stop();	  	compilable	  [FE]  AssertionError  	20	1	add
16	[BUG]  [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  ||  state.stop();  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  ||  state.stop();  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep        =        isLastStep        &&        state.stop();        isLastStep    =    isLastStep    ||    state.stop();    isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();	  	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	20	None	add
17	[BUG]  [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  ||  state.stop();  isFirstStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  ||  state.stop();  [CE]  cannot  find  symbol  isFirstStep  [FE]        AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  ||  state.stop();  isFirstStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep        =        isLastStep        &&        state.stop();        isLastStep    =    isLastStep    ||    state.stop();    isFirstStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  ||  state.stop();	  	non-compiled	[CE]  cannot  find  symbol  isFirstStep	20	None	add
18	[BUG]  [BUGGY]  state.stepAccepted(y,  currentT,  tEnd);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(y,  currentT,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	state.stepAccepted(y,  currentT,  tEnd);	  state.stepAccepted(t0,    currentT,    tEnd);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	10	None	replace
19	[BUG]  [BUGGY]  state.stepAccepted(currentT,  y,  tEnd);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(currentT,  y,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	state.stepAccepted(currentT,  y,  tEnd);	  state.stepAccepted(currentT,    t0,    tEnd);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	9	None	replace
20	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  tEnd);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(currentT,  tEnd,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	state.stepAccepted(currentT,  tEnd,  tEnd);	  state.stepAccepted(currentT,    t0,    tEnd);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	9	None	replace
21	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  2);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  2);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  2);	  state.stepAccepted(currentT,    tEnd,    yDot,    1);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	28	None	replace
22	[BUG]  [BUGGY]  isFirstStep  =  isLastStep  &&  state.stop();  [CE]  cannot  find  symbol  isFirstStep  [FE]          AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isFirstStep  =  isLastStep  &&  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isFirstStep  =  isLastStep  &&  state.stop();	  isLastStep    =    isLastStep    &&    state.stop();    isFirstStep    =    isLastStep    &&    state.stop();    	non-compiled	[CE]  cannot  find  symbol  isFirstStep	7	None	replace
23	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tStart);  [CE]  cannot  find  symbol  tStart  [FE]            AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tStart);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	tEnd  =  state.stepAccepted(currentT,  yDot,  tStart);	  tEnd    =    state.stepAccepted(currentT,    yDot);    	non-compiled	[CE]  cannot  find  symbol  tStart	3	None	replace
24	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  t0,  yDot,  tEnd);  [CE]  cannot  find  symbol  t0  [FE]              AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  t0,  yDot,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	tEnd  =  state.stepAccepted(currentT,  t0,  yDot,  tEnd);	  tEnd    =    state.stepAccepted(currentT,    yDot,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	4	None	replace
25	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  t1,  yDot,  tEnd);  [CE]  cannot  find  symbol  t1  [FE]                AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  t1,  yDot,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	tEnd  =  state.stepAccepted(currentT,  t1,  yDot,  tEnd);	  tEnd    =    state.stepAccepted(currentT,    yDot,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t1	4	None	replace
26	[BUG]  [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot  +  1);  [CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot  +  1);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	int  tEnd  =  state.stepAccepted(currentT,  yDot  +  1);	  int    tEnd    =    state.stepAccepted(currentT,    y    +    1);    	non-compiled	[CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	2	None	replace
27	[BUG]  [BUGGY]  currentT.add(eventT);  [CE]  cannot  find  symbol  eventT  [FE]          AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  currentT.add(eventT);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	currentT.add(eventT);	          if(eventsInitialized)    {    for(final    EventEvent    eventT    :    eventsInitialized)    {    currentT.add(eventT);    }    	non-compiled	[CE]  cannot  find  symbol  eventT	26	None	replace
28	[BUG]  [BUGGY]  cast(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  1);  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  cast(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  1);  }  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	cast(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  1);  }	          if(eventsInitialized)    {    for(final    EventEvent    eventT    :    eventsInitialized)    {    state.stepAccepted(currentT,    tEnd,    1);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
29	[BUG]  [BUGGY]  hopState(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  1);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  hopState(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  1);  }  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	hopState(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  1);  }	          if(eventsInitialized)    {    for(final    EventEvent    eventT    :    eventsInitialized)    {    state.stepAccepted(currentT,    tEnd,    1);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
30	[BUG]  [BUGGY]  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd,  2);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd,  2);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd,  2);	  isLastStep    =    isLastStep    &&    state.stepAccepted(currentT,    tEnd,    1);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	17	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(currentT,  y);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	add	state.stepAccepted(currentT,  y);	          state.stepAccepted(currentT,    currentY);    	compilable	  [FE]  AssertionError  	19	1	replace
32	[BUG]  [BUGGY]  state.stepAccepted(currentT,  y);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(currentT,  y);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	state.stepAccepted(currentT,  y);	          state.stepAccepted(currentT,    currentY);    	compilable	  [FE]  AssertionError  	19	1	replace
33	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y,  tEnd);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	tEnd  =  state.stepAccepted(currentT,  y,  tEnd);	  tEnd    =    state.stepAccepted(currentT,    t0,    tEnd);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	8	None	replace
34	[BUG]  [BUGGY]  luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  1);  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  1);  }  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  1);  }	          if(eventsInitialized)    {    for(final    EventEvent    eventT    :    eventsInitialized)    {    state.stepAccepted(currentT,    tEnd,    1);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
35	[BUG]  [BUGGY]  luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  2);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  2);  }  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  2);  }	          if(eventsInitialized)    {    for(final    EventEvent    eventT    :    eventsInitialized)    {    state.stepAccepted(currentT,    tEnd,    1);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
36	[BUG]  [BUGGY]  state.stepAccepted(currentT,  yDot,  tEnd);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(currentT,  yDot,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	state.stepAccepted(currentT,  yDot,  tEnd);	  state.stepAccepted(currentT,    t0,    tEnd);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	9	None	replace
37	[BUG]  [BUGGY]          state.stepAccepted(currentT,  currentY);  State  state  =  state.stepAccepted(currentT,  currentY);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]          state.stepAccepted(currentT,  currentY);  State  state  =  state.stepAccepted(currentT,  currentY);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	                state.stepAccepted(currentT,    currentY);    State  state  =  state.stepAccepted(currentT,  currentY);	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
38	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  orderingSign);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  orderingSign);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	tEnd  =  state.stepAccepted(currentT,  yDot,  orderingSign);	  tEnd    =    state.stepAccepted(currentT,    yDot);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	3	None	replace
39	[BUG]  [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isFirstStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  [CE]  cannot  find  symbol  isFirstStep  [FE]    AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isFirstStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep        =        isLastStep        &&        state.stop();        isLastStep    =    isLastStep    &&    state.stop();    isFirstStep  =  isLastStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();	  	non-compiled	[CE]  cannot  find  symbol  isFirstStep	5	None	add
40	[BUG]  [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isFirstStep  =  isFirstStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  [CE]  cannot  find  symbol  isFirstStep  [FE]      AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  &&  state.stop();  isFirstStep  =  isFirstStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep        =        isLastStep        &&        state.stop();        isLastStep    =    isLastStep    &&    state.stop();    isFirstStep  =  isFirstStep  &&  state.stop();  isLastStep  =  isLastStep  &&  state.stop();	  	non-compiled	[CE]  cannot  find  symbol  isFirstStep	5	None	add
41	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  remaining);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  remaining);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  remaining);	  state.stepAccepted(currentT,    tEnd,    yDot);    	non-compiled	[CE]  cannot  find  symbol  remaining	29	None	replace
42	[BUG]  [BUGGY]  luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  currentT.add(eventT);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  currentT.add(eventT);  }  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  currentT.add(eventT);  }	          if(eventsInitialized)    {    for(final    EventEvent    eventT    :    eventsInitialized)    {    currentT.add(eventT);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
43	[BUG]  [BUGGY]  luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  currentT)  {  currentT.add(eventT);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  currentT)  {  currentT.add(eventT);  }  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  currentT)  {  currentT.add(eventT);  }	          if(eventsInitialized)    {    for(final    EventEvent    eventT    :    eventsInitialized)    {    currentT.add(eventT);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
44	[BUG]  [BUGGY]  luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  3);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  3);  }  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	luate(eventsInitialized)  {  for(final  EventEvent  eventT  :  eventsInitialized)  {  state.stepAccepted(currentT,  tEnd,  3);  }	          if(eventsInitialized)    {    for(final    EventEvent    eventT    :    eventsInitialized)    {    state.stepAccepted(currentT,    tEnd,    2);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
45	[BUG]  [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  ||  state.stop();  isFirstStep  =  isFirstStep  &&  state.stop();  isLastStep  =  isLastStep  ||  state.stop();  [CE]  cannot  find  symbol  isFirstStep  [FE]    AssertionError    [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep    =    isLastStep    &&    state.stop();    isLastStep  =  isLastStep  ||  state.stop();  isFirstStep  =  isFirstStep  &&  state.stop();  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep        =        isLastStep        &&        state.stop();        isLastStep    =    isLastStep    ||    state.stop();    isFirstStep  =  isFirstStep  &&  state.stop();  isLastStep  =  isLastStep  ||  state.stop();	  	non-compiled	[CE]  cannot  find  symbol  isFirstStep	20	None	add
46	[BUG]  [BUGGY]  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd,  0);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd,  0);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tEnd,  0);	  isLastStep    =    isLastStep    ||    state.stepAccepted(currentT,    tEnd,    0);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	12	None	replace
47	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd,  orderingSign);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd,  orderingSign);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd,  orderingSign);	  tEnd    =    state.stepAccepted(currentT,    yDot,    tEnd);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	4	None	replace
48	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd,  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd,  remaining);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd,  remaining);	  tEnd    =    state.stepAccepted(currentT,    yDot,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  remaining	4	None	replace
49	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  0);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  0);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  0);	  state.stepAccepted(currentT,    tEnd,    0);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	15	None	replace
50	[BUG]  [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot,  tStart);  [CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot,  tStart);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	int  tEnd  =  state.stepAccepted(currentT,  yDot,  tStart);	  int    tEnd    =    state.stepAccepted(currentT,    yDot);    	non-compiled	[CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	1	None	replace
51	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd,  observations);  [CE]  cannot  find  symbol  observations  [FE]              AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd,  observations);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd,  observations);	  tEnd    =    state.stepAccepted(currentT,    yDot,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  observations	4	None	replace
52	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  currentY);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  currentY);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  currentY);	  state.stepAccepted(currentT,    tEnd,    yDot);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	29	None	replace
53	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  tEnd);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  tEnd);	  state.stepAccepted(currentT,    tEnd,    yDot);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	29	None	replace
54	[BUG]  [BUGGY]  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tStart,  tEnd,  1);  [CE]  cannot  find  symbol  tStart  [FE]        AssertionError      [CONTEXT]      occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);      [BUGGY]  isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tStart,  tEnd,  1);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	isLastStep  =  isLastStep  &&  state.stepAccepted(currentT,  tStart,  tEnd,  1);	  isLastStep    =    isLastStep    &&    state.stepAccepted(currentT,    tEnd,    1);    	non-compiled	[CE]  cannot  find  symbol  tStart	17	None	replace
