bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  state.stepAccepted(tStart,  yDot,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(tStart,  yDot,  1);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(tStart,  yDot,  1);	  state.stepAccepted(currentT,    yDot,    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2	[BUG]  [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot  +  1);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	int  tEnd  =  state.stepAccepted(currentT,  yDot  +  1);	  int    tEnd    =    state.stepAccepted(currentT,    y    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y,  tStart);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y,  tStart);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	tEnd  =  state.stepAccepted(currentT,  y,  tStart);	  tEnd    =    state.stepAccepted(currentT,    yDot,    tStart);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tStart,  orderingSign);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tStart,  orderingSign);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	tEnd  =  state.stepAccepted(currentT,  yDot,  tStart,  orderingSign);	  tEnd    =    state.stepAccepted(currentT,    yDot,    tStart);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  state.stepAccepted(tStart,  currentT);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(tStart,  currentT);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(tStart,  currentT);	  state.stepAccepted(currentT,    tStart);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
6	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tStart,  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(currentT,  tStart,  2);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(currentT,  tStart,  2);	  state.stepAccepted(currentT,    tStart,    1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y,  tEnd);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y,  tEnd);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	tEnd  =  state.stepAccepted(currentT,  y,  tEnd);	  tEnd    =    state.stepAccepted(currentT,    yDot,    tEnd);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y  +  1,  tDot);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y  +  1,  tDot);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	tEnd  =  state.stepAccepted(currentT,  y  +  1,  tDot);	  tEnd    =    state.stepAccepted(currentT,    y    +    1,    tEnd);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
9	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y  +  1,  currentY);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y  +  1,  currentY);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	tEnd  =  state.stepAccepted(currentT,  y  +  1,  currentY);	  tEnd    =    state.stepAccepted(currentT,    y    +    1,    tEnd);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
10	[BUG]  [BUGGY]  Iterator  iterator  =  eventsInitialized.iterator();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  Iterator  iterator  =  eventsInitialized.iterator();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	Iterator  iterator  =  eventsInitialized.iterator();	  Iterator    iterator    =    state.eventsInitialized.iterator();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  state.stepAccepted(t0,  currentT);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(t0,  currentT);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(t0,  currentT);	  state.stepAccepted(currentT,    t0);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot,  t0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot,  t0);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	int  tEnd  =  state.stepAccepted(currentT,  yDot,  t0);	  int    tEnd    =    state.stepAccepted(currentT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  Iterator  iterator  =  this.stepHandlers.iterator();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  Iterator  iterator  =  this.stepHandlers.iterator();  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	Iterator  iterator  =  this.stepHandlers.iterator();	  Iterator    iterator    =    state.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
14	[BUG]  [BUGGY]  state.stepAccepted(t0,  tEnd,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(t0,  tEnd,  1);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(t0,  tEnd,  1);	  state.stepAccepted(t0,    tEnd);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  state.stepAccepted(t0,  currentT,  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(t0,  currentT,  1);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(t0,  currentT,  1);	  state.stepAccepted(currentT,    t0,    1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  state.stepAccepted(y,  t0,  tEnd);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(y,  t0,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(y,  t0,  tEnd);	  state.stepAccepted(t0,    tEnd);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
17	[BUG]  [BUGGY]  state.stepAccepted(currentT,  yStart);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(currentT,  yStart);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(currentT,  yStart);	  state.stepAccepted(currentT,    tStart);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  y  +  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  y  +  2);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	int  tEnd  =  state.stepAccepted(currentT,  y  +  2);	  int    tEnd    =    state.stepAccepted(currentT,    y    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
19	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tStart,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(currentT,  tStart,  0);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(currentT,  tStart,  0);	  state.stepAccepted(currentT,    tStart,    1);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
20	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y  +  1,  tStart);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  y  +  1,  tStart);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	tEnd  =  state.stepAccepted(currentT,  y  +  1,  tStart);	  tEnd    =    state.stepAccepted(currentT,    y    +    1,    tEnd);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  state.stepAccepted(tEnd,  yDot,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(tEnd,  yDot,  1);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(tEnd,  yDot,  1);	  state.stepAccepted(currentT,    yDot,    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
22	[BUG]  [BUGGY]  int  tEnd  =  state.stepAccepted(currentY,  yDot);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  int  tEnd  =  state.stepAccepted(currentY,  yDot);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	int  tEnd  =  state.stepAccepted(currentY,  yDot);	  int    tEnd    =    state.stepAccepted(currentT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
23	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  3);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(currentT,  tEnd,  3);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(currentT,  tEnd,  3);	  state.stepAccepted(currentT,    tEnd,    2);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tStart  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot,  tStart  +  1);  [BUGGY]      }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	tEnd  =  state.stepAccepted(currentT,  yDot,  tStart  +  1);	  tEnd    =    state.stepAccepted(currentT,    yDot,    tStart);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
25	[BUG]  [BUGGY]  state.stepAccepted(currentT,  y);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(currentT,  y);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(currentT,  y);	  state.stepAccepted(currentT,    t0);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  state.stepAccepted(currentT,  yDot,  tEnd);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  state.stepAccepted(currentT,  yDot,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	state.stepAccepted(currentT,  yDot,  tEnd);	  state.stepAccepted(currentT,    yDot,    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
27	[BUG]  [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();      [BUGGY]  int  tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	int  tEnd  =  state.stepAccepted(currentT,  yDot,  tEnd);	  int    tEnd    =    state.stepAccepted(currentT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
