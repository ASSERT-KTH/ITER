bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i,  state);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
2	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i);  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  eventsStates.size();  i++)  {  occuringEvents.add(i);  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
4	[BUG]  [BUGGY]    if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }  [BUGGY]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	    if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	36	None	add
5	[BUG]  [BUGGY]    if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  [BUGGY]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	    if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	36	None	add
6	[BUG]  [BUGGY]    if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }  [BUGGY]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	    if(!isLastStep)  {  for(int  i  =  0;  i  <  eventsInitialized.length;  i++)  {  if(!ignoredEvents[i])  {  break;  }  }		non-compiled	[CE]  illegal  start  of  expression	36	None	add
7	[BUG]  [BUGGY]    if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [BUGGY]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	    if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }		non-compiled	[CE]  illegal  start  of  expression	36	None	add
8	[BUG]  [BUGGY]    if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }  [BUGGY]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	    if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  return  remaining  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  }		non-compiled	[CE]  illegal  start  of  expression	36	None	add
9	[BUG]  [BUGGY]    if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  occuringEvents.add(remaining);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  occuringEvents.add(remaining);  }  [BUGGY]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	    if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  occuringEvents.add(remaining);  }		non-compiled	[CE]  illegal  start  of  expression	36	None	add
10	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime();  }  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	if(isLastStep)  {  for(final  EventState  remaining  :  eventsStates)  {  if(remainingEvents.contains(interpolator))  {  eventT  =  remaining.getEventTime();  }	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
11	[BUG]  [BUGGY]    if(isLastStep)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    if(isLastStep)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue  [BUGGY]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	    if(isLastStep)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.get(i)!=  eventT)  {  continue		non-compiled	[CE]  ';'  expected	36	None	add
12	[BUG]  [BUGGY]    if(isLastStep)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    if(isLastStep)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue  [BUGGY]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	    if(isLastStep)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(interpolator);  if(remainingEvents.contains(es1))  {  continue		non-compiled	[CE]  ';'  expected	36	None	add
13	[BUG]  [BUGGY]    if(isLastStep)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(remainingEvents[i]);  if(remaining  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    if(isLastStep)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(remainingEvents[i]);  if(remaining  [BUGGY]  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	    if(isLastStep)  {  for(int  i  =  0;  i  <  orderingSign.size();  i++)  {  EventState  remaining  =  state.evaluateStep(remainingEvents[i]);  if(remaining		non-compiled	[CE]  ')'  expected	36	None	add
14	[BUG]  [BUGGY]  int  stepStart  =  es0.getStep();  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]  int  stepStart  =  es0.getStep();  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepStart  =  es0.getStep();	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
15	[BUG]  [BUGGY]  int  stepStart  =  es1.getStep();  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]  int  stepStart  =  es1.getStep();  [BUGGY]    while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	int  stepStart  =  es1.getStep();	}  	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
