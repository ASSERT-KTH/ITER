bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  eventT  =  remaining.stepAccepted(remaining,  tEnd);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  remaining.stepAccepted(remaining,  tEnd);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.stepAccepted(remaining,  tEnd);	  eventT    =    event.stepAccepted(remaining,    yDot);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	29	None	replace
2	[BUG]  [BUGGY]  return  t0;  [CE]  cannot  find  symbol  t0  [FE]    AssertionError    [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  t0;  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  t0;	  return    tEnd;    	non-compiled	[CE]  cannot  find  symbol  t0	22	None	replace
3	[BUG]  [BUGGY]  eventT  =  remaining.stepAccepted(t0,  tEnd);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  remaining.stepAccepted(t0,  tEnd);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.stepAccepted(t0,  tEnd);	  eventT    =    event.stepAccepted(remaining,    tEnd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	27	None	replace
4	[BUG]  [BUGGY]  eventT  =  remaining;  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]                AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  remaining;  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining;	  eventT    =    eventT;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	23	None	replace
5	[BUG]  [BUGGY]  eventT  =  remaining.stepSize;  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]                  AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  remaining.stepSize;  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.stepSize;	  eventT    =    eventT;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	23	None	replace
6	[BUG]  [BUGGY]  final  EventState  eventT  =  remaining.getEvents(),  state);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  final  EventState  eventT  =  remaining.getEvents(),  state);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	final  EventState  eventT  =  remaining.getEvents(),  state);	  final    EventState    eventT    =    remaining.getEvents();    	non-compiled	[CE]  ';'  expected	9	None	replace
7	[BUG]  [BUGGY]  eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  :  remaining.eventsInitialized)  {  eventT  =  eventT;  }	  final    EventState    eventT    :    remaining.eventsInitialized)    {    eventT    =    eventT;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
8	[BUG]  [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  tEnd  +  2);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  tEnd  +  2);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.stepAccepted(eventT,  tEnd  +  2);	  eventT    =    remaining.stepAccepted(eventT,    tEnd    +    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	4	None	replace
9	[BUG]  [BUGGY]  for(final  EventState  eventT  :  remaining.stepsInitialized)  {  eventT  =  eventT;  }  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  for(final  EventState  eventT  :  remaining.stepsInitialized)  {  eventT  =  eventT;  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	for(final  EventState  eventT  :  remaining.stepsInitialized)  {  eventT  =  eventT;  }	  for(final    EventState    eventT    :    remaining.eventsInitialized)    {    eventT    =    eventT;    }    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	1	None	replace
10	[BUG]  [BUGGY]  yDot  =  state.stepAccepted(eventT,  eventY);  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  yDot  =  state.stepAccepted(eventT,  eventY);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	yDot  =  state.stepAccepted(eventT,  eventY);	  yDot    =    remaining.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  cannot  find  symbol  state	7	None	replace
11	[BUG]  [BUGGY]  yDot  =  currentEvent.stepAccepted(eventT,  eventY);  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  yDot  =  currentEvent.stepAccepted(eventT,  eventY);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	yDot  =  currentEvent.stepAccepted(eventT,  eventY);	  yDot    =    remaining.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  incompatible  types	7	None	replace
12	[BUG]  [BUGGY]  ger  remaining.stepAccepted(eventT,  tEnd))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  ger  remaining.stepAccepted(eventT,  tEnd))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	ger  remaining.stepAccepted(eventT,  tEnd))  {  throw  new  IllegalStateException( " ");  }	  if(remaining.stepAccepted(eventT,    tEnd))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
13	[BUG]  [BUGGY]  eventT  :  remaining.getEvents())  {  eventT  =  eventT;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  :  remaining.getEvents())  {  eventT  =  eventT;  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  :  remaining.getEvents())  {  eventT  =  eventT;  }	  final    EventState    eventT    :    remaining.getEvents())    {    eventT    =    eventT;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
14	[BUG]  [BUGGY]  eventT  :  remaining.getEvents());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  :  remaining.getEvents());  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  :  remaining.getEvents());	  final    EventState    eventT    :    remaining.getEvents())    {    eventT    =    eventT;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
15	[BUG]  [BUGGY]  yDot  =  other.stepAccepted(eventT,  tEnd);  [CE]  cannot  find  symbol  other  [FE]                AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  yDot  =  other.stepAccepted(eventT,  tEnd);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	yDot  =  other.stepAccepted(eventT,  tEnd);	  yDot    =    remaining.stepAccepted(eventT,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  other	6	None	replace
16	[BUG]  [BUGGY]  return  previousT.stepSize  -  1;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  previousT.stepSize  -  1;  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  previousT.stepSize  -  1;	  return    remaining.stepSize    -    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
17	[BUG]  [BUGGY]  for(final  EventState  eventT  :  other.getEvents())  {  eventT  =  eventT;  }  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  for(final  EventState  eventT  :  other.getEvents())  {  eventT  =  eventT;  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	for(final  EventState  eventT  :  other.getEvents())  {  eventT  =  eventT;  }	  for(final    EventState    eventT    :    remaining.getEvents())    {    eventT    =    eventT;    }    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	8	None	replace
18	[BUG]  [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  y);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  y);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.stepAccepted(eventT,  y);	  eventT    =    remaining.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	15	None	replace
19	[BUG]  [BUGGY]  eventT  :  remaining.getState())  {  eventT  =  eventT;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  :  remaining.getState())  {  eventT  =  eventT;  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  :  remaining.getState())  {  eventT  =  eventT;  }	  final    EventState    eventT    :    remaining.getState())    {    eventT    =    eventT;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
20	[BUG]  [BUGGY]  eventT  :  remaining.getState());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  :  remaining.getState());  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  :  remaining.getState());	  final    EventState    eventT    :    remaining.getState())    {    eventT    =    eventT;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
21	[BUG]  [BUGGY]  return  tEnd;  tEnd  =  remaining.stepAccepted(eventT,  tEnd);  [CE]  cannot  find  symbol  remaining  [FE]    AssertionError    [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  tEnd;  tEnd  =  remaining.stepAccepted(eventT,  tEnd);  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return    tEnd;    tEnd  =  remaining.stepAccepted(eventT,  tEnd);	  	non-compiled	[CE]  cannot  find  symbol  remaining	21	None	add
22	[BUG]  [BUGGY]  return  tEnd;  tEnd  =  remaining.stepAccepted(eventT,  yDot);  [CE]  cannot  find  symbol  remaining  [FE]      AssertionError    [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  tEnd;  tEnd  =  remaining.stepAccepted(eventT,  yDot);  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return    tEnd;    tEnd  =  remaining.stepAccepted(eventT,  yDot);	  	non-compiled	[CE]  cannot  find  symbol  remaining	21	None	add
23	[BUG]  [BUGGY]  return  tEnd;  tEnd  =  remaining.stepAccepted(eventT,  t);  [CE]  cannot  find  symbol  t  [FE]        AssertionError    [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  tEnd;  tEnd  =  remaining.stepAccepted(eventT,  t);  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return    tEnd;    tEnd  =  remaining.stepAccepted(eventT,  t);	  	non-compiled	[CE]  cannot  find  symbol  t	21	None	add
24	[BUG]  [BUGGY]  if(remaining.stepAccepted(eventT,  yDot))  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  remaining  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  if(remaining.stepAccepted(eventT,  yDot))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	if(remaining.stepAccepted(eventT,  yDot))  {  throw  new  IllegalStateException( " ");  }	  if(remaining.stepAccepted(eventT,    y))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  remaining	11	None	replace
25	[BUG]  [BUGGY]  return  previousT.stepSize  -  remaining.stepSize;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  previousT.stepSize  -  remaining.stepSize;  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  previousT.stepSize  -  remaining.stepSize;	  return    previousT.stepSize;    	non-compiled	[CE]  double  cannot  be  dereferenced	10	None	replace
26	[BUG]  [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  tStart);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  remaining.stepAccepted(eventT,  tStart);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.stepAccepted(eventT,  tStart);	  eventT    =    remaining.stepAccepted(eventT,    yEnd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	5	None	replace
27	[BUG]  [BUGGY]  for(final  EventState  eventT  :  other.getState())  {  eventT  =  eventT;  }  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  for(final  EventState  eventT  :  other.getState())  {  eventT  =  eventT;  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	for(final  EventState  eventT  :  other.getState())  {  eventT  =  eventT;  }	  for(final    EventState    eventT    :    remaining.getState())    {    eventT    =    eventT;    }    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	13	None	replace
28	[BUG]  [BUGGY]  return  remaining.resetOccurred;  [CE]  cannot  find  symbol  remaining  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  remaining.resetOccurred;  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  remaining.resetOccurred;	  return    state;    	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	replace
29	[BUG]  [BUGGY]  eventT  =  event.stepAccepted(eventT,  yDot);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  event.stepAccepted(eventT,  yDot);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  event.stepAccepted(eventT,  yDot);	  eventT    =    event.stepAccepted(remaining,    yDot);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	29	None	replace
30	[BUG]  [BUGGY]  final  EventState  eventT  =  other.getEvents();  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                  AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  final  EventState  eventT  =  other.getEvents();  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	final  EventState  eventT  =  other.getEvents();	  final    EventState    eventT    =    remaining.getEvents();    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	9	None	replace
31	[BUG]  [BUGGY]  return  previousT.stepSize  -  remaining.stepStart;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  previousT.stepSize  -  remaining.stepStart;  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  previousT.stepSize  -  remaining.stepStart;	  return    previousT.stepSize;    	non-compiled	[CE]  double  cannot  be  dereferenced	10	None	replace
32	[BUG]  [BUGGY]  return  remaining.nextStep;  [CE]  cannot  find  symbol  remaining  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  remaining.nextStep;  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  remaining.nextStep;	  return    eventState;    	non-compiled	[CE]  cannot  find  symbol  remaining	25	None	replace
33	[BUG]  [BUGGY]  eventT  =  remaining.stepAccepted(remaining,  yDot);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]                AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  remaining.stepAccepted(remaining,  yDot);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.stepAccepted(remaining,  yDot);	  eventT    =    eventT.stepAccepted(remaining,    yDot);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	30	None	replace
34	[BUG]  [BUGGY]  if(remaining.stepAccepted(eventT,  t))  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  t  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  if(remaining.stepAccepted(eventT,  t))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	if(remaining.stepAccepted(eventT,  t))  {  throw  new  IllegalStateException( " ");  }	  if(remaining.stepAccepted(eventT,    eventEnd))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  t	28	None	replace
35	[BUG]  [BUGGY]  return  remaining.stepSize  -  2;  [CE]  cannot  find  symbol  remaining  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  remaining.stepSize  -  2;  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  remaining.stepSize  -  2;	  return    remaining.stepSize    -    1;    	non-compiled	[CE]  cannot  find  symbol  remaining	16	None	replace
36	[BUG]  [BUGGY]  eventT  =  event.stepAccepted(remaining,  eventY);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  event.stepAccepted(remaining,  eventY);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  event.stepAccepted(remaining,  eventY);	  eventT    =    remaining.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	15	None	replace
37	[BUG]  [BUGGY]  For(final  EventState  eventT  :  remaining.getEventState())  {  eventT  =  eventT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  For(final  EventState  eventT  :  remaining.getEventState())  {  eventT  =  eventT;  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	For(final  EventState  eventT  :  remaining.getEventState())  {  eventT  =  eventT;  }	  For(final    EventState    eventT    :    remaining.getState())    {    eventT    =    eventT;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
38	[BUG]  [BUGGY]  eventT  =  remaining.stepAccepted(t,  tEnd);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  remaining.stepAccepted(t,  tEnd);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.stepAccepted(t,  tEnd);	  eventT    =    event.stepAccepted(remaining,    tEnd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	27	None	replace
39	[BUG]  [BUGGY]  eventT  =  remaining.nextStep;  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]                AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  remaining.nextStep;  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  remaining.nextStep;	  eventT    =    eventT;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	23	None	replace
40	[BUG]  [BUGGY]  eventT  =  event.stepAccepted(eventT,  tEnd  +  1);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  event.stepAccepted(eventT,  tEnd  +  1);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  event.stepAccepted(eventT,  tEnd  +  1);	  eventT    =    remaining.stepAccepted(eventT,    tEnd    +    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	4	None	replace
41	[BUG]  [BUGGY]  return  t1;  [CE]  cannot  find  symbol  t1  [FE]    AssertionError    [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  t1;  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  t1;	  return    tEnd;    	non-compiled	[CE]  cannot  find  symbol  t1	22	None	replace
42	[BUG]  [BUGGY]  eventT  :  remaining.eventsInitialized);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  :  remaining.eventsInitialized);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  :  remaining.eventsInitialized);	  final    EventState    eventT    :    remaining.eventsInitialized)    {    eventT    =    eventT;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
43	[BUG]  [BUGGY]  eventT  =  event.stepAccepted(eventT,  tEnd);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]            AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  event.stepAccepted(eventT,  tEnd);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  event.stepAccepted(eventT,  tEnd);	  eventT    =    event.stepAccepted(remaining,    tEnd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	27	None	replace
44	[BUG]  [BUGGY]  For(final  EventState  eventT  :  remaining.stepsInitialized)  {  eventT  =  eventT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  For(final  EventState  eventT  :  remaining.stepsInitialized)  {  eventT  =  eventT;  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	For(final  EventState  eventT  :  remaining.stepsInitialized)  {  eventT  =  eventT;  }	  For(final    EventState    eventT    :    remaining.eventsInitialized)    {    eventT    =    eventT;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  yDot  =  eventY.stepAccepted(eventT,  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  yDot  =  eventY.stepAccepted(eventT,  remaining);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	yDot  =  eventY.stepAccepted(eventT,  remaining);	  yDot    =    remaining.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  cannot  find  symbol  remaining	7	None	replace
46	[BUG]  [BUGGY]  yDot  =  eventT.stepAccepted(eventT,  yEnd);  [CE]  cannot  find  symbol  yEnd  [FE]                    AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  yDot  =  eventT.stepAccepted(eventT,  yEnd);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	yDot  =  eventT.stepAccepted(eventT,  yEnd);	  yDot    =    remaining.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  cannot  find  symbol  yEnd	7	None	replace
47	[BUG]  [BUGGY]  eventT  :  remaining.getState())  {  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  :  remaining.getState())  {  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  :  remaining.getState())  {  }	  final    EventState    eventT    :    remaining.getState())    {    eventT    =    eventT;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
48	[BUG]  [BUGGY]  if(remaining.stepAccepted(eventT,  eventY))  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  remaining  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  if(remaining.stepAccepted(eventT,  eventY))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	if(remaining.stepAccepted(eventT,  eventY))  {  throw  new  IllegalStateException( " ");  }	  if(remaining.stepAccepted(eventT,    yEnd))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  remaining	12	None	replace
49	[BUG]  [BUGGY]  return  currentT.stepSize  -  1;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  currentT.stepSize  -  1;  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return  currentT.stepSize  -  1;	  return    remaining.stepSize    -    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
50	[BUG]  [BUGGY]  eventT  =  other.stepSize;  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]                AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  other.stepSize;  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  other.stepSize;	  eventT    =    eventT;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	23	None	replace
51	[BUG]  [BUGGY]  return  tEnd;  tEnd  =  remaining.stepAccepted(eventT,  t0);  [CE]  cannot  find  symbol  t0  [FE]    AssertionError    [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  return  tEnd;  tEnd  =  remaining.stepAccepted(eventT,  t0);  [BUGGY]      }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	return    tEnd;    tEnd  =  remaining.stepAccepted(eventT,  t0);	  	non-compiled	[CE]  cannot  find  symbol  t0	21	None	add
52	[BUG]  [BUGGY]  eventT  =  eventT.stepAccepted(remaining,  tEnd);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]                AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  eventT.stepAccepted(remaining,  tEnd);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  eventT.stepAccepted(remaining,  tEnd);	  eventT    =    eventT.stepAccepted(remaining,    yDot);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	30	None	replace
53	[BUG]  [BUGGY]  eventT  =  event.stepAccepted(eventT,  remaining);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  event.stepAccepted(eventT,  remaining);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  event.stepAccepted(eventT,  remaining);	  eventT    =    remaining.stepAccepted(eventT,    eventY);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	15	None	replace
54	[BUG]  [BUGGY]  eventT  :  remaining.getEvents();  [CE]  cannot  find  symbol  remaining  [FE]                AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  :  remaining.getEvents();  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  :  remaining.getEvents();	  final    EventState    eventT    :    remaining.getEvents())    {    eventT    =    eventT;    }    	non-compiled	[CE]  cannot  find  symbol  remaining	19	None	replace
55	[BUG]  [BUGGY]  final  EventState  eventT  =  remaining.stepAccepted(eventT,  remaining.getEvents());  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                  AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  final  EventState  eventT  =  remaining.stepAccepted(eventT,  remaining.getEvents());  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	final  EventState  eventT  =  remaining.stepAccepted(eventT,  remaining.getEvents());	  final    EventState    eventT    =    remaining.getEvents();    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	9	None	replace
56	[BUG]  [BUGGY]  eventT  =  event.stepAccepted(remaining,  yEnd);  [CE]  cannot  assign  a  value  to  final  variable  eventT  [FE]              AssertionError      [CONTEXT]      boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }      [BUGGY]  eventT  =  event.stepAccepted(remaining,  yEnd);  [BUGGY]      return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  if  (currentEvent.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	eventT  =  event.stepAccepted(remaining,  yEnd);	  eventT    =    remaining.stepAccepted(eventT,    yEnd);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  eventT	5	None	replace
