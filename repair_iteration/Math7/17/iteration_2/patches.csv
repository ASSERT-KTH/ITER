bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  State  state  =  interfaces.evaluateStep(interpolator);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interfaces.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	State  state  =  interfaces.evaluateStep(interpolator);	  State    state    =    interfaces.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
2	[BUG]  [BUGGY]  occuringEvents.add(es0);  [CE]  cannot  find  symbol  es0  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(es0);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	occuringEvents.add(es0);	  occuringEvents.add(es1);    	non-compiled	[CE]  cannot  find  symbol  es0	28	None	replace
3	[BUG]  [BUGGY]  luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  not  a  statement	25	None	replace
4	[BUG]  [BUGGY]  luateStep(state))  {  return  0;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(state))  {  return  0;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	luateStep(state))  {  return  0;	  luateStep(interpolator))    {    return    0;    	non-compiled	[CE]  ';'  expected	26	None	replace
5	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	add	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	14	1	add
6	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	14	1	add
7	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluate  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluate  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluate	  timeout    	non-compiled	[CE]  ')'  expected	14	None	add
8	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator	  timeout    	non-compiled	[CE]  ')'  expected	14	None	add
9	[BUG]  [BUGGY]  State  state  =  interface.evaluateStep(currentEvent);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interface.evaluateStep(currentEvent);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	State  state  =  interface.evaluateStep(currentEvent);	  State    state    =    interface.evaluateStep(state);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
10	[BUG]  [BUGGY]  allowReturn(state))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowReturn(state))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	allowReturn(state))  {  throw  new  IllegalStateException( " ");  }	  allowReturn(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  State  state  =  state.evaluate(eventsInitialized);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  state.evaluate(eventsInitialized);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	State  state  =  state.evaluate(eventsInitialized);	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
12	[BUG]  [BUGGY]  State  state  =  state.evaluate(remainingEvents);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  state.evaluate(remainingEvents);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	State  state  =  state.evaluate(remainingEvents);	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
13	[BUG]  [BUGGY]  state.evaluate();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate();  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	state.evaluate();	          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
14	[BUG]  [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  safely().evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely().evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	safely().evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  State.evaluateStep(interpolator);  [CE]  cannot  find  symbol  State  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	State.evaluateStep(interpolator);	          state.evaluateStep(interpolator);    State.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  State	18	None	replace
17	[BUG]  [BUGGY]  luateStep(state))  {  return  0;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(state))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	luateStep(state))  {  return  0;  }	  luateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
18	[BUG]  [BUGGY]  occuringEvents.add(interpolator,  event);  [CE]  cannot  find  symbol  event  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(interpolator,  event);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	occuringEvents.add(interpolator,  event);	  occuringEvents.add(eventsInitialized,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  event	9	None	replace
19	[BUG]  [BUGGY]  State  state  =  getStep(interpolator);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  getStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	State  state  =  getStep(interpolator);	          state.evaluateStep(interpolator);    State    state    =    getStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
20	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  tEnd);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  tEnd);	  int    stepStart    =    state.evaluateStep(interpolator,    remaining);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	19	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	add	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);	  	compilable	  [FE]  AssertionError  	16	1	add
22	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);	  	compilable	  [FE]  AssertionError  	16	1	add
23	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  State  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    State.evaluateStep(interpolator);  state.evaluateStep(interpolator);	  	non-compiled	[CE]  cannot  find  symbol  State	16	None	add
24	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State  state  =  getStep(interpolator);  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State  state  =  getStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    State  state  =  getStep(interpolator);  state.evaluateStep(interpolator);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
25	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	add	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	7	4	add
26	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	7	4	add
27	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]      IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	7	None	add
28	[BUG]  [BUGGY]  allowReset(state);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowReset(state);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	allowReset(state);	  allowReset(interpolator);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
29	[BUG]  [BUGGY]  allowReset(eventsInitialized);  [CE]  cannot  find  symbol  eventsInitialized  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowReset(eventsInitialized);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	allowReset(eventsInitialized);	  allowReset(interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	12	None	replace
30	[BUG]  [BUGGY]  occuringEvents.add(state,  interpolator);  [CE]  no  suitable  method  found  for  add(EventState,AbstractStepInterpolator)  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(state,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	occuringEvents.add(state,  interpolator);	  occuringEvents.add(interpolator,    state);    	non-compiled	[CE]  no  suitable  method  found  for  add(EventState,AbstractStepInterpolator)	10	None	replace
31	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  interpolator,  state);  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventsInitialized,  interpolator,  state);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	occuringEvents.add(eventsInitialized,  interpolator,  state);	  occuringEvents.add(interpolator,    state);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	10	None	replace
32	[BUG]  [BUGGY]  allowResetOccurred(state))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowResetOccurred(state))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	allowResetOccurred(state))  {  throw  new  IllegalStateException( " ");  }	  allowResetOccurred(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
33	[BUG]  [BUGGY]  allowResetOccurred(state.evaluateStep(interpolator)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowResetOccurred(state.evaluateStep(interpolator)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	allowResetOccurred(state.evaluateStep(interpolator)))  {  throw  new  IllegalStateException( " ");  }	  allowResetOccurred(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
34	[BUG]  [BUGGY]  state.evaluate(eventsInitialized))  {  return  0;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate(eventsInitialized))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	state.evaluate(eventsInitialized))  {  return  0;  }	  state.evaluate(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
35	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign,  tEnd);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  orderingSign,  tEnd);	  int    stepStart    =    state.evaluateStep(interpolator,    orderingSign);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	2	None	replace
36	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	add	if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	24	1	add
37	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	24	1	add
38	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  yDot,  tEnd);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator,  yDot,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	state.evaluateStep(interpolator,  yDot,  tEnd);	  state.evaluateStep(interpolator,    yDot);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	31	None	replace
39	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  tEnd,  yDot);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator,  tEnd,  yDot);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	state.evaluateStep(interpolator,  tEnd,  yDot);	  state.evaluateStep(interpolator,    yDot);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	31	None	replace
40	[BUG]  [BUGGY]  luateStep(interpolator))  {  return  1;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(interpolator))  {  return  1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	luateStep(interpolator))  {  return  1;  }	  luateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
41	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  state);  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventsInitialized,  state);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	occuringEvents.add(eventsInitialized,  state);	  occuringEvents.add(interpolator,    state);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	10	None	replace
42	[BUG]  [BUGGY]  state.evaluateStep(yDot,  interpolator);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(yDot,  interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	state.evaluateStep(yDot,  interpolator);	  state.evaluateStep(interpolator,    yDot);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	31	None	replace
43	[BUG]  [BUGGY]  state.evaluateStep(remainingSign);  [CE]  cannot  find  symbol  remainingSign  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(remainingSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	state.evaluateStep(remainingSign);	          state.evaluateStep(interpolator);    State    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  remainingSign	21	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	add	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    state.evaluateStep(interpolator);	  	compilable	  [FE]  AssertionError  	16	1	add
45	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    state.evaluateStep(interpolator);	  	compilable	  [FE]  AssertionError  	16	1	add
46	[BUG]  [BUGGY]  State  state  =  interface.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interface.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	State  state  =  interface.evaluateStep(interpolator);	  State    state    =    interface.evaluateStep(state);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(!isLastStep);  [CE]  cannot  find  symbol  Preconditions  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!isLastStep);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	Preconditions.checkState(!isLastStep);	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	8	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(isLastStep);  [CE]  cannot  find  symbol  Preconditions  [FE]      IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(isLastStep);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	Preconditions.checkState(isLastStep);	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	8	None	replace
49	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	add	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	14	1	add
50	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	14	1	add
51	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	14	None	add
52	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  yDot);  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventsInitialized,  yDot);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	occuringEvents.add(eventsInitialized,  yDot);	  occuringEvents.add(eventsInitialized,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	9	None	replace
53	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot,  orderingSign);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot,  orderingSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  yDot,  orderingSign);	  int    stepStart    =    state.evaluateStep(interpolator,    orderingSign);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	2	None	replace
54	[BUG]  [BUGGY]  luateStep(interpolator))  {  return  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(interpolator))  {  return  1;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	luateStep(interpolator))  {  return  1;	  luateStep(interpolator))    {    return    0;    	non-compiled	[CE]  ';'  expected	26	None	replace
55	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderSign);  [CE]  cannot  find  symbol  orderSign  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  orderSign);	  int    stepStart    =    state.evaluateStep(interpolator,    remaining);    	non-compiled	[CE]  cannot  find  symbol  orderSign	19	None	replace
56	[BUG]  [BUGGY]  state  =  state.evaluateStep(interpolator);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state  =  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	state  =  state.evaluateStep(interpolator);	  State    state    =    interface.evaluateStep(state);    	non-compiled	[CE]  incompatible  types	30	None	replace
57	[BUG]  [BUGGY]  allowReset(remainingEvents);  [CE]  cannot  find  symbol  remainingEvents  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowReset(remainingEvents);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	allowReset(remainingEvents);	  allowReset(interpolator);    	non-compiled	[CE]  cannot  find  symbol  remainingEvents	12	None	replace
58	[BUG]  [BUGGY]  occuringEvents.add(interpolator,  eventInitialized);  [CE]  cannot  find  symbol  eventInitialized  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(interpolator,  eventInitialized);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	occuringEvents.add(interpolator,  eventInitialized);	  occuringEvents.add(eventsInitialized,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventInitialized	9	None	replace
59	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	add	if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    timeout    	compilable	timeout	25	1	replace
60	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    timeout    	compilable	timeout	25	1	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	add	}  else  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	compilable	  [FE]  AssertionError  	8	2	replace
62	[BUG]  [BUGGY]  }  else  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionError  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	}  else  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	compilable	  [FE]  AssertionError  	8	2	replace
63	[BUG]  [BUGGY]  state.evaluate(y,  es1);  [CE]  cannot  find  symbol  es1  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate(y,  es1);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	state.evaluate(y,  es1);	          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  es1	17	None	replace
64	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  yDot);	  int    stepStart    =    state.evaluateStep(interpolator,    remaining);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	19	None	replace
65	[BUG]  [BUGGY]  occuringEvents.add(currentEvent,  state);  [CE]  cannot  find  symbol  currentEvent  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(currentEvent,  state);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	occuringEvents.add(currentEvent,  state);	  occuringEvents.add(interpolator,    state);    	non-compiled	[CE]  cannot  find  symbol  currentEvent	10	None	replace
66	[BUG]  [BUGGY]  state.evaluate(stepStart))  {  return  0;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate(stepStart))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	state.evaluate(stepStart))  {  return  0;  }	  state.evaluate(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
67	[BUG]  [BUGGY]  previousT  <  =  state.evaluateStep(interpolator))  {  return  0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  previousT  <  =  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	previousT  <  =  state.evaluateStep(interpolator))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
68	[BUG]  [BUGGY]  previousT  =  state.evaluateStep(interpolator);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  previousT  =  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	previousT  =  state.evaluateStep(interpolator);	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  incompatible  types	15	None	replace
69	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State  state  =  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State  state  =  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    State  state  =  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
