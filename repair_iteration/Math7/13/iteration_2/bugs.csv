bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }	      if(state.getState()!=    state.getState())    {    for(final    Incrementor    stepHandler    :    stepHandlers)    {    handler.init(t0,    y0,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2	[BUG]  [BUGGY]  state.getState()!=  state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  state.getState()!=  state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	state.getState()!=  state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }	      if(state.getState()!=    state.getState())    {    for(final    Incrementor    stepHandler    :    stepHandlers)    {    handler.init(t0,    y0,    t);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
3	[BUG]  [BUGGY]  initState(t0,  y0,  state);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  initState(t0,  y0,  state);  [BUGGY]      for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	initState(t0,  y0,  state);	  initStep(t0,    y0,    state);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
4	[BUG]  [BUGGY]  state.getState().init(t0,  y0,  t);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  state.getState().init(t0,  y0,  t);  [BUGGY]      for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	state.getState().init(t0,  y0,  t);	  state.getEventHandler().init(t0,    y0,    t);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  initStep(t0,  y0,  state.getStep(),  convergence);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  initStep(t0,  y0,  state.getStep(),  convergence);  [BUGGY]      for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	initStep(t0,  y0,  state.getStep(),  convergence);	  initStep(t0,    y0,    state.getStep());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  for(final  Incrementor  stepHandler  :  stepHandlers)  {  stepHandler.init(t0,  y0,  t);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  for(final  Incrementor  stepHandler  :  stepHandlers)  {  stepHandler.init(t0,  y0,  t);  }  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	for(final  Incrementor  stepHandler  :  stepHandlers)  {  stepHandler.init(t0,  y0,  t);  }	      if(state.getState()!=    state.getState())    {    for(final    Incrementor    stepHandler    :    stepHandlers)    {    stepHandler.init(t0,    y0,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  state.getState()!=  state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  stepHandler.init(t0,  y0,  t);  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  state.getState()!=  state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  stepHandler.init(t0,  y0,  t);  }  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	state.getState()!=  state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  stepHandler.init(t0,  y0,  t);  }	      if(state.getState()!=    state.getState())    {    for(final    Incrementor    stepHandler    :    stepHandlers)    {    stepHandler.init(t0,    y0,    t);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
8	[BUG]  [BUGGY]  for(final  Incrementor  stepHandler  :  state.getStepHandlers())  {  StepHandler  stepHandler  =  stepHandlers.get(t0);  setStateInitialized(true);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  for(final  Incrementor  stepHandler  :  state.getStepHandlers())  {  StepHandler  stepHandler  =  stepHandlers.get(t0);  setStateInitialized(true);  }  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	for(final  Incrementor  stepHandler  :  state.getStepHandlers())  {  StepHandler  stepHandler  =  stepHandlers.get(t0);  setStateInitialized(true);  }	      for(final    Incrementor    stepHandler    :    state.getStepHandlers())    {    StepHandler    stepHandler    =    stepHandlers.get(t0);    setStateInitialized(false);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  stepHandlers  =  state.getStepHandlers(t0);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  stepHandlers  =  state.getStepHandlers(t0);  [BUGGY]      for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	stepHandlers  =  state.getStepHandlers(t0);	  stepHandlers    =    state.getStepHandlers();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
10	[BUG]  [BUGGY]  for(final  Incrementor  stepHandler  :  stepHandlers)  {  methodHandler.init(t0,  y0,  t);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  for(final  Incrementor  stepHandler  :  stepHandlers)  {  methodHandler.init(t0,  y0,  t);  }  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	for(final  Incrementor  stepHandler  :  stepHandlers)  {  methodHandler.init(t0,  y0,  t);  }	      if(state.getState()!=    state.getState())    {    for(final    Incrementor    stepHandler    :    stepHandlers)    {    methodHandler.init(t0,    y0,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
11	[BUG]  [BUGGY]  state.getState()!=  state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  methodHandler.init(t0,  y0,  t);  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  state.getState()!=  state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  methodHandler.init(t0,  y0,  t);  }  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	state.getState()!=  state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  methodHandler.init(t0,  y0,  t);  }	      if(state.getState()!=    state.getState())    {    for(final    Incrementor    stepHandler    :    stepHandlers)    {    methodHandler.init(t0,    y0,    t);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
12	[BUG]  [BUGGY]  State  state  =  state.getState();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  State  state  =  state.getState();  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	State  state  =  state.getState();	      if(state.getState()!=    state.getState())    {    for(final    Incrementor    stepHandler    :    stepHandlers)    {    stepHandler.init(t0,    y0,    t);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  State  state  =  state.getEventHandler();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  State  state  =  state.getEventHandler();  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	State  state  =  state.getEventHandler();	      if(state.getEventHandler()!=    null)    {    if(isLastStep)    {    setStateInitialized(false);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  initStep(t0,  y0,  state.getStep(),  expandable);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  initStep(t0,  y0,  state.getStep(),  expandable);  [BUGGY]      for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	initStep(t0,  y0,  state.getStep(),  expandable);	  initStep(t0,    y0,    state.getStep());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  state.getEventHandler()!=  null)  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  state.getEventHandler()!=  null)  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	state.getEventHandler()!=  null)  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }	      if(state.getEventHandler()!=    null)    {    for(final    Incrementor    stepHandler    :    stepHandlers)    {    handler.init(t0,    y0,    t);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
16	[BUG]  [BUGGY]  state.getState()  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  state.getState()  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	state.getState()  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }	      if(state.getState()!=    state.getState())    {    for(final    Incrementor    stepHandler    :    stepHandlers)    {    handler.init(t0,    y0,    t);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
17	[BUG]  [BUGGY]  initStep(t0,  y0,  state.getStepSize());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  initStep(t0,  y0,  state.getStepSize());  [BUGGY]      for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	initStep(t0,  y0,  state.getStepSize());	  initStep(t0,    y0,    state.getStep());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
18	[BUG]  [BUGGY]  state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  stepHandler.init(t0,  y0,  t);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initIntegration(final  double  t0,  final  double[]  y0,  final  double  t)  {  evaluations.resetCount();  for  (final  EventState  state  :  eventsStates)  {  state.getEventHandler().init(t0,  y0,  t);    [BUGGY]  state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  stepHandler.init(t0,  y0,  t);  }  [BUGGY]    }  for  (StepHandler  handler  :  stepHandlers)  {  handler.init(t0,  y0,  t);  }  setStateInitialized(false);  }  [CLASS]  AbstractIntegrator  1  [METHOD]  initIntegration  [RETURN_TYPE]  void  final  double  t0  final  double[]  y0  final  double  t  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  EventState  state  double[]  y0  double  convergence  maxCheckInterval  stepSize  stepStart  t  t0  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	state.getState())  {  for(final  Incrementor  stepHandler  :  stepHandlers)  {  stepHandler.init(t0,  y0,  t);  }	      if(state.getState()!=    state.getState())    {    for(final    Incrementor    stepHandler    :    stepHandlers)    {    stepHandler.init(t0,    y0,    t);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
