bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredEvents);  [CE]  type  EventState  does  not  take  parameters  [FE]          AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredEvents);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredEvents);	      final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	6	None	replace
2	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign,  orderingSign);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign,  orderingSign);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign,  orderingSign);	      final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	6	None	replace
3	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    NoSuchElementException    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]    final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	8	None	add
4	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      NoSuchElementException    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [BUGGY]    final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    final  Iterator  <  EventState>  iterator  =  eventStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	8	None	add
5	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  orderingSign);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  orderingSign);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  orderingSign);	      final    EventState    <    EventState>    eventState    =    eventsStates.get(name);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	12	None	replace
6	[BUG]  [BUGGY]  final  EventState[]  remaining  =  eventStates.toArray(new  EventState[occuringEvents.size()  ]);  [CE]  cannot  find  symbol  eventStates  [FE]        AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState[]  remaining  =  eventStates.toArray(new  EventState[occuringEvents.size()  ]);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  remaining  =  eventStates.toArray(new  EventState[occuringEvents.size()  ]);	      final    EventState[]    remaining    =    eventsStates.toArray(new    EventState[occuringEvents.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  eventStates	5	None	replace
7	[BUG]  [BUGGY]  EventState[]  eventsInitialized  =  currentEvent.getEventsInitialized();  [CE]  cannot  find  symbol  currentEvent  [FE]          AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  EventState[]  eventsInitialized  =  currentEvent.getEventsInitialized();  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	EventState[]  eventsInitialized  =  currentEvent.getEventsInitialized();	      EventState[]    eventsInitialized    =    state.getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  currentEvent	2	None	replace
8	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state);	      final    EventState[]    eventsInitialized    =    getEventsInitialized();    	non-compiled	[CE]  ';'  expected	1	None	replace
9	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate();  [CE]  type  EventState  does  not  take  parameters  [FE]          AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate();  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate();	      final    EventState    <    EventState>    eventState    =    eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	11	None	replace
10	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();  [CE]  cannot  find  symbol  eventsInitialized  [FE]        AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();  [BUGGY]    final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();	  final    Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	4	None	replace
11	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventStates.get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  remaining  =  eventStates.get(0);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventStates.get(0);	      final    EventState    <    EventState>    remaining    =    eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	7	None	replace
12	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(occuringEvents);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(occuringEvents);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized(occuringEvents);	      final    EventState[]    eventsInitialized    =    getEventsInitialized(events);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
13	[BUG]  [BUGGY]  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]    final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	add	final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	compilable	  [FE]  NoSuchElementException  	9	3	replace
14	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [FE]  NoSuchElementException  [FE]    NoSuchElementException    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]    final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	compilable	  [FE]  NoSuchElementException  	9	3	replace
15	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();  [CE]  cannot  find  symbol  eventsInitialized  [FE]      NoSuchElementException    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();  [BUGGY]    final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();	  final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	9	None	replace
16	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(occuringEvents);  [CE]  type  EventState  does  not  take  parameters  [FE]        AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(occuringEvents);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  state.evaluateStep(occuringEvents);	      final    EventState    <    EventState>    remaining    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	10	None	replace
17	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  this);  [CE]  type  EventState  does  not  take  parameters  [FE]        AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  this);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  this);	      final    EventState    <    EventState>    remaining    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	10	None	replace
18	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]          AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0);	      final    EventState    <    EventState>    eventState    =    eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	11	None	replace
19	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(eventsStates.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(eventsStates.size()  -  1);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(eventsStates.size()  -  1);	      final    EventState    <    EventState>    remaining    =    eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	7	None	replace
20	[BUG]  [BUGGY]  EventState[]  eventsInitialized  =  eventState.getEventsInitialized();  [CE]  cannot  find  symbol  eventState  [FE]          AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  EventState[]  eventsInitialized  =  eventState.getEventsInitialized();  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	EventState[]  eventsInitialized  =  eventState.getEventsInitialized();	      EventState[]    eventsInitialized    =    state.getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  eventState	2	None	replace
21	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(occuringSign);  [CE]  type  EventState  does  not  take  parameters  [FE]          AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(occuringSign);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(occuringSign);	      final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	6	None	replace
22	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.events.iterator();  [CE]  cannot  find  symbol  events  [FE]        AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.events.iterator();  [BUGGY]    final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  Iterator  <  EventState>  iterator  =  this.events.iterator();	  final    Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	4	None	replace
23	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  ';'  expected  [FE]    NoSuchElementException    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]    final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Final  Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  ';'  expected	8	None	add
24	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized().getEventsInitialized();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized().getEventsInitialized();  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized().getEventsInitialized();	      final    EventState[]    eventsInitialized    =    getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
25	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name  +  1);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name  +  1);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(name  +  1);	      final    EventState    <    EventState>    eventState    =    eventsStates.get(name);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	12	None	replace
26	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  state.getEventsInitialized();  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState[]  eventsInitialized  =  state.getEventsInitialized();  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState[]  eventsInitialized  =  state.getEventsInitialized();	      final    EventState[]    eventsInitialized    =    getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
27	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  other);  [CE]  type  EventState  does  not  take  parameters  [FE]        AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  other);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  state.evaluateStep(interpolator,  other);	      final    EventState    <    EventState>    remaining    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	10	None	replace
28	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  state);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  state);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(name,  state);	      final    EventState    <    EventState>    eventState    =    eventsStates.get(name);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	12	None	replace
29	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(state);  [CE]  type  EventState  does  not  take  parameters  [FE]          AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(state);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(state);	      final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	6	None	replace
30	[BUG]  [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign  +  1);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError    [CONTEXT]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {      [BUGGY]  final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign  +  1);  [BUGGY]    final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	final  EventState  <  EventState>  remaining  =  eventsStates.get(ignoredSign  +  1);	      final    EventState    <    EventState>    remaining    =    eventsStates.get(ignoredSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	6	None	replace
