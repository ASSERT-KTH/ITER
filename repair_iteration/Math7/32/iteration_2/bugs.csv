bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  yDot  =  currentEvent.getState().equals(tEnd);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  yDot  =  currentEvent.getState().equals(tEnd);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  yDot  =  currentEvent.getState().equals(tEnd);	      boolean    yDot    =    currentEvent.getState().equals(stateInitialized);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
2	[BUG]  [BUGGY]  boolean  yDot  =  stateInitialized.getState().equals(currentEvent);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  yDot  =  stateInitialized.getState().equals(currentEvent);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  yDot  =  stateInitialized.getState().equals(currentEvent);	      boolean    yDot    =    currentEvent.getState().equals(stateInitialized);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
3	[BUG]  [BUGGY]  if(!reset)  {  [CE]  cannot  find  symbol  reset  [FE]    NoBracketingException    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!reset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(!reset)  {	  if(!resetOccurred)    {    	non-compiled	[CE]  cannot  find  symbol  reset	19	None	replace
4	[BUG]  [BUGGY]  yDot  =  state.getY();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  yDot  =  state.getY();  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	yDot  =  state.getY();	      yDot    =    currentEvent.getY();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  if(!needReset)  {  if(!needReset)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!needReset)  {  if(!needReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(!needReset)    {    if(!needReset)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
6	[BUG]  [BUGGY]  if(!needReset)  {  If(!needReset)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!needReset)  {  If(!needReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(!needReset)    {    If(!needReset)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
7	[BUG]  [BUGGY]  if(isLastStep)  {  if(isLastStep  &&  needReset)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(isLastStep)  {  if(isLastStep  &&  needReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(isLastStep)    {    if(isLastStep  &&  needReset)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
8	[BUG]  [BUGGY]  if(isLastStep)  {  if(isLastStep  ||  needReset)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(isLastStep)  {  if(isLastStep  ||  needReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(isLastStep)    {    if(isLastStep  ||  needReset)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
9	[BUG]  [BUGGY]  if(isLastStep)  {  if(needReset)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(isLastStep)  {  if(needReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(isLastStep)    {    if(needReset)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
10	[BUG]  [BUGGY]  if(!resetOccurred)  {  if(!resetOccurred)  {  [CE]  illegal  start  of  expression  [FE]    NoBracketingException    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!resetOccurred)  {  if(!resetOccurred)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(!resetOccurred)    {    if(!resetOccurred)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
11	[BUG]  [BUGGY]  if(!resetOccurred)  {  If(!resetOccurred)  {  [CE]  ';'  expected  [FE]      NoBracketingException    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!resetOccurred)  {  If(!resetOccurred)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(!resetOccurred)    {    If(!resetOccurred)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
12	[BUG]  [BUGGY]  boolean  isLastStep  =  stateInitialized.getState()!=  currentEvent;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  isLastStep  =  stateInitialized.getState()!=  currentEvent;  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  isLastStep  =  stateInitialized.getState()!=  currentEvent;	      boolean    isLastStep    =    currentEvent.getState()!=    stateInitialized;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(isLastStep  &&  needReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	add	if(isLastStep  &&  needReset)  {	  if(!isLastStep)    {    	compilable	  [FE]  AssertionError  	4	2	replace
14	[BUG]  [BUGGY]  if(isLastStep  &&  needReset)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(isLastStep  &&  needReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(isLastStep  &&  needReset)  {	  if(!isLastStep)    {    	compilable	  [FE]  AssertionError  	4	2	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(isLastStep  ||  needReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	add	if(isLastStep  ||  needReset)  {	  if(!isLastStep)    {    	compilable	  [FE]  AssertionError  	4	1	replace
16	[BUG]  [BUGGY]  if(isLastStep  ||  needReset)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(isLastStep  ||  needReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(isLastStep  ||  needReset)  {	  if(!isLastStep)    {    	compilable	  [FE]  AssertionError  	4	1	replace
17	[BUG]  [BUGGY]  boolean  isLastStep  =  state.reset(eventT,  eventY);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  isLastStep  =  state.reset(eventT,  eventY);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  isLastStep  =  state.reset(eventT,  eventY);	      boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
18	[BUG]  [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  y);  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  y);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  isLastStep  =  currentEvent.reset(eventT,  y);	      boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
19	[BUG]  [BUGGY]  if(!isLastStep)  {  if(!isLastStep)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!isLastStep)  {  if(!isLastStep)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(!isLastStep)    {    if(!isLastStep)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
20	[BUG]  [BUGGY]  if(!isLastStep)  {  if(!isFirstStep)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!isLastStep)  {  if(!isFirstStep)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(!isLastStep)    {    if(!isFirstStep)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
21	[BUG]  [BUGGY]  if(!isLastStep)  {  if(!reset)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!isLastStep)  {  if(!reset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(!isLastStep)    {    if(!reset)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
22	[BUG]  [BUGGY]      boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  [CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]      boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	        boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);	  	non-compiled	[CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	9	None	add
23	[BUG]  [BUGGY]      boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isLastStep  =  currentEvent.reset(eventT,  eventX);  [CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]      boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isLastStep  =  currentEvent.reset(eventT,  eventX);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	        boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    boolean  isLastStep  =  currentEvent.reset(eventT,  eventX);	  	non-compiled	[CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	9	None	add
24	[BUG]  [BUGGY]      boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isLastStep  =  currentEvent.reset(eventT,  eventS);  [CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]      boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isLastStep  =  currentEvent.reset(eventT,  eventS);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	        boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    boolean  isLastStep  =  currentEvent.reset(eventT,  eventS);	  	non-compiled	[CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	9	None	add
25	[BUG]  [BUGGY]  boolean  yDot  =  currentEvent.reset(eventT,  yDot);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  yDot  =  currentEvent.reset(eventT,  yDot);  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  yDot  =  currentEvent.reset(eventT,  yDot);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
26	[BUG]  [BUGGY]  boolean  needReset  =  currentEvent.reset(eventT,  y);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  needReset  =  currentEvent.reset(eventT,  y);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  needReset  =  currentEvent.reset(eventT,  y);	      boolean    needReset    =    currentEvent.reset(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  boolean  needReset  =  currentEvent.reset(eventT,  yDot);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  needReset  =  currentEvent.reset(eventT,  yDot);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  needReset  =  currentEvent.reset(eventT,  yDot);	      boolean    needReset    =    currentEvent.reset(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NoBracketingException    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(resetOccurred)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	add	if(resetOccurred)  {	  if(!resetOccurred)    {    	compilable	  [FE]  AssertionError  	19	2	replace
29	[BUG]  [BUGGY]  if(resetOccurred)  {  [FE]  AssertionError  [FE]    NoBracketingException    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(resetOccurred)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(resetOccurred)  {	  if(!resetOccurred)    {    	compilable	  [FE]  AssertionError  	19	2	replace
30	[BUG]  [BUGGY]  boolean  needReset  =  stateInitialized.reset(eventT,  eventY);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  needReset  =  stateInitialized.reset(eventT,  eventY);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  needReset  =  stateInitialized.reset(eventT,  eventY);	      boolean    needReset    =    currentEvent.reset(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  boolean  yDot  =  currentEvent.getState().isDeclared(eventT,  stateInitialized);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  yDot  =  currentEvent.getState().isDeclared(eventT,  stateInitialized);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  yDot  =  currentEvent.getState().isDeclared(eventT,  stateInitialized);	      boolean    yDot    =    currentEvent.getState().isInitialized();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
32	[BUG]  [BUGGY]  boolean  yDot  =  stateInitialized.isInitialized();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  yDot  =  stateInitialized.isInitialized();  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  yDot  =  stateInitialized.isInitialized();	      boolean    yDot    =    currentEvent.isInitialized();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
33	[BUG]  [BUGGY]  boolean  yDot  =  currentEvent.reset(eventT,  eventY);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  yDot  =  currentEvent.reset(eventT,  eventY);  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  yDot  =  currentEvent.reset(eventT,  eventY);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]      boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	add	        boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);	  	compilable	  [FE]  AssertionError  	9	1	add
35	[BUG]  [BUGGY]      boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]      boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	        boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    boolean  isFirstStep  =  currentEvent.reset(eventT,  eventY);	  	compilable	  [FE]  AssertionError  	9	1	add
36	[BUG]  [BUGGY]  boolean  needReset  =  stateInitialized.isInitialized();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  needReset  =  stateInitialized.isInitialized();  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  needReset  =  stateInitialized.isInitialized();	      boolean    needReset    =    currentEvent.isInitialized();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
37	[BUG]  [BUGGY]  boolean  yDot  =  currentEvent.getState().equals(expandableODE);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  yDot  =  currentEvent.getState().equals(expandableODE);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  yDot  =  currentEvent.getState().equals(expandableODE);	      boolean    yDot    =    currentEvent.getState().equals(stateInitialized);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
38	[BUG]  [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  yDot);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  isLastStep  =  currentEvent.reset(eventT,  yDot);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  isLastStep  =  currentEvent.reset(eventT,  yDot);	      boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  boolean  isLastStep  =  stateInitialized.reset(eventT,  eventY);  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  isLastStep  =  stateInitialized.reset(eventT,  eventY);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  isLastStep  =  stateInitialized.reset(eventT,  eventY);	      boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  if(!isLastStep)  {  if(!shouldReset)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!isLastStep)  {  if(!shouldReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(!isLastStep)    {    if(!shouldReset)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
41	[BUG]  [BUGGY]  if(!isLastStep)  {  If(!isLastStep)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!isLastStep)  {  If(!isLastStep)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(!isLastStep)    {    If(!isLastStep)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
42	[BUG]  [BUGGY]  boolean  yDot  =  state.getState().isInitialized();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  boolean  yDot  =  state.getState().isInitialized();  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	boolean  yDot  =  state.getState().isInitialized();	      boolean    yDot    =    currentEvent.getState().isInitialized();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
43	[BUG]  [BUGGY]  yDot  =  stateInitialized.getY();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  yDot  =  stateInitialized.getY();  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	yDot  =  stateInitialized.getY();	      yDot    =    currentEvent.getY();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
44	[BUG]  [BUGGY]      boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  Boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  [CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]      boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  Boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);  [BUGGY]    if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	        boolean    isLastStep    =    currentEvent.reset(eventT,    eventY);    Boolean  isLastStep  =  currentEvent.reset(eventT,  eventY);	  	non-compiled	[CE]  variable  isLastStep  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	9	None	add
45	[BUG]  [BUGGY]  [FE]  NoBracketingException  [FE]    NoBracketingException    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!resetOccurred  &&  needReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	add	if(!resetOccurred  &&  needReset)  {	  if(!resetOccurred)    {    	compilable	  [FE]  NoBracketingException  	19	2	replace
46	[BUG]  [BUGGY]  if(!resetOccurred  &&  needReset)  {  [FE]  NoBracketingException  [FE]    NoBracketingException    [CONTEXT]    if  (isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);    [BUGGY]  if(!resetOccurred  &&  needReset)  {  [BUGGY]      System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	if(!resetOccurred  &&  needReset)  {	  if(!resetOccurred)    {    	compilable	  [FE]  NoBracketingException  	19	2	replace
