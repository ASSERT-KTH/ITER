bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stepSize!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepSize!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepSize!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }	  if(stepSize!=    0)    {    for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	20	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  for(int  i  =  1;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  1;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	10	None	replace
3	[BUG]  [BUGGY]  this.eventsStates.put(name,  handler);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.put(name,  handler);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.put(name,  handler);	          if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
4	[BUG]  [BUGGY]  if(hasErrors())  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(hasErrors())  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(hasErrors())  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }	  if(hasErrors())    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	25	None	replace
5	[BUG]  [BUGGY]  if(hasErrors())  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(hasErrors())  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(hasErrors())  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  if(hasErrors())    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	25	None	replace
6	[BUG]  [BUGGY]  this.eventsStates.add(handler,  isLastStep);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.add(handler,  isLastStep);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(handler,  isLastStep);	  this.eventsStates.add(handler,    expandable);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
7	[BUG]  [BUGGY]  this.eventsStates.add(handler,  expandable,  stepStart);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.add(handler,  expandable,  stepStart);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(handler,  expandable,  stepStart);	  this.eventsStates.add(handler,    expandable);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
8	[BUG]  [BUGGY]  parent.addChildToBack(stepHandlers,  handler);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  parent.addChildToBack(stepHandlers,  handler);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	parent.addChildToBack(stepHandlers,  handler);	  parent.addStepHandler(handler);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
9	[BUG]  [BUGGY]  parent.addChildToFront(stepHandlers);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  parent.addChildToFront(stepHandlers);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	parent.addChildToFront(stepHandlers);	  parent.addStepHandler(handler);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
10	[BUG]  [BUGGY]  addStepHandler(handler);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  addStepHandler(handler);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	addStepHandler(handler);	  if(!stepHandlers.contains(handler))    {    for(int    i    =    0;    i    <    stepSize;    i++)    {    addStepHandler(i,    handler);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
11	[BUG]  [BUGGY]  if(stepStart  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepStart  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepStart  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  if(stepSize    ==    0)    {    for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	21	None	replace
12	[BUG]  [BUGGY]  if(stepStart  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepStart  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepStart  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }	  if(stepSize    ==    0)    {    for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	21	None	replace
13	[BUG]  [BUGGY]  HashSet  <  Integer>  stepHandlers  =  new  HashSet  <  Integer>(stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  HashSet  <  Integer>  stepHandlers  =  new  HashSet  <  Integer>(stepSize);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	HashSet  <  Integer>  stepHandlers  =  new  HashSet  <  Integer>(stepSize);	  if(hasErrors())    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
14	[BUG]  [BUGGY]  HashSet  <  Integer>  stepHandlers  =  new  HashSet  <  Integer>(size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  HashSet  <  Integer>  stepHandlers  =  new  HashSet  <  Integer>(size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	HashSet  <  Integer>  stepHandlers  =  new  HashSet  <  Integer>(size());	  if(hasErrors())    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
15	[BUG]  [BUGGY]  add(new  Integer(0),  stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  add(new  Integer(0),  stepSize);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	add(new  Integer(0),  stepSize);	  add(new    Integer(0));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	add	                if(!stepHandlers.contains(handler))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	18	1	add
17	[BUG]  [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	                if(!stepHandlers.contains(handler))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	18	1	add
18	[BUG]  [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers  [CE]  [FE]      AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	                if(!stepHandlers.contains(handler))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers	  	non-compiled	[CE]  	18	None	add
19	[BUG]  [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	                if(!stepHandlers.contains(handler))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( "   ");  }  if(!stepHandlers.	  	non-compiled	[CE]  <identifier>  expected	18	None	add
20	[BUG]  [BUGGY]  stepHandlers.add(handler,  expandable);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  stepHandlers.add(handler,  expandable);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	stepHandlers.add(handler,  expandable);	  stepHandlers.add(handler);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
21	[BUG]  [BUGGY]  if(stepHandlers!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepHandlers!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepHandlers!=  null)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
22	[BUG]  [BUGGY]  allStepHandlers.add(handler);  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  allStepHandlers.add(handler);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	allStepHandlers.add(handler);	  if(stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
23	[BUG]  [BUGGY]  this.eventsStates.add(handler,  stepSize);  fireInitializingStep();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.add(handler,  stepSize);  fireInitializingStep();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(handler,  stepSize);  fireInitializingStep();	  this.eventsStates.add(handler,    stepStart);    fireInitializingStep();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
24	[BUG]  [BUGGY]  this.eventsStates.add(handler,  isLastStep);  fireInitializingStep();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.add(handler,  isLastStep);  fireInitializingStep();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(handler,  isLastStep);  fireInitializingStep();	  this.eventsStates.add(handler,    stepStart);    fireInitializingStep();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
25	[BUG]  [BUGGY]  Integer  stepSize  =  getStepStart();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  Integer  stepSize  =  getStepStart();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	Integer  stepSize  =  getStepStart();	  Integer    stepSize    =    getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
26	[BUG]  [BUGGY]  int  stepSize  =  getStepSize();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  int  stepSize  =  getStepSize();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	int  stepSize  =  getStepSize();	  Integer    stepSize    =    getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepSize.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  for(int  i  =  0;  i  <  stepSize.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  0;  i  <  stepSize.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	5	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepSize.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  for(int  i  =  0;  i  <  stepSize.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  0;  i  <  stepSize.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.	  for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!handler.    	non-compiled	[CE]  <identifier>  expected	6	None	replace
29	[BUG]  [BUGGY]  this.eventsStates.remove(stepHandler);  fireSeriesChanged();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.remove(stepHandler);  fireSeriesChanged();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.remove(stepHandler);  fireSeriesChanged();	  this.eventsStates.remove(handler);    fireSeriesChanged();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
30	[BUG]  [BUGGY]  this.eventsStates.remove(stepStart);  fireSeriesChanged();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.remove(stepStart);  fireSeriesChanged();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.remove(stepStart);  fireSeriesChanged();	  this.eventsStates.remove(handler);    fireSeriesChanged();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
31	[BUG]  [BUGGY]  this.eventsStates.add(handler,  false);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.add(handler,  false);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(handler,  false);	          if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(       "       ");    }    if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	add	                if(!stepHandlers.contains(handler))        {        throw        new        IllegalStateException(       "       ");        }        if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "       ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	1	1	add
33	[BUG]  [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	                if(!stepHandlers.contains(handler))        {        throw        new        IllegalStateException(       "       ");        }        if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "       ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	1	1	add
34	[BUG]  [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	                if(!stepHandlers.contains(handler))        {        throw        new        IllegalStateException(       "       ");        }        if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "       ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.	  	non-compiled	[CE]  <identifier>  expected	1	None	add
35	[BUG]  [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers  [CE]  [FE]        AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]          if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(     "     ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException(   "     ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	                if(!stepHandlers.contains(handler))        {        throw        new        IllegalStateException(       "       ");        }        if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "       ");    }    if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers.contains(handler))  {  throw  new  IllegalStateException( "   ");  }  if(!stepHandlers	  	non-compiled	[CE]  	1	None	add
36	[BUG]  [BUGGY]  double  stepSize  =  stepHandlers.size();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  double  stepSize  =  stepHandlers.size();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	double  stepSize  =  stepHandlers.size();	  int    stepSize    =    stepHandlers.size();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
37	[BUG]  [BUGGY]  int  stepSize  =  stepHandlers.size()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  int  stepSize  =  stepHandlers.size()  -  1;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	int  stepSize  =  stepHandlers.size()  -  1;	  int    stepSize    =    stepHandlers.size();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!	  for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  if(stepStart!=  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepStart!=  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepStart!=  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!	  if(stepHandlers!=    null)    {    for(int    i    =    stepSize;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
40	[BUG]  [BUGGY]  this.eventsStates.add(new  ExpandableStatefulODE(stepSize,  stepStart));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.add(new  ExpandableStatefulODE(stepSize,  stepStart));  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(new  ExpandableStatefulODE(stepSize,  stepStart));	  this.eventsStates.add(new    ExpandableStatefulODE(stepStart,    stepSize));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
41	[BUG]  [BUGGY]  this.eventsStates.add(new  ExpandableStatefulODE(stepHandler,  stepSize));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.add(new  ExpandableStatefulODE(stepHandler,  stepSize));  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(new  ExpandableStatefulODE(stepHandler,  stepSize));	  this.eventsStates.add(new    ExpandableStatefulODE(stepStart,    stepSize));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
42	[BUG]  [BUGGY]  AllStepHandlers(stepHandlers);  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  AllStepHandlers(stepHandlers);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	AllStepHandlers(stepHandlers);	  if(stepHandlers!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
43	[BUG]  [BUGGY]  Annotations.checkState(stepHandlers!=  null);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  Annotations.checkState(stepHandlers!=  null);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	Annotations.checkState(stepHandlers!=  null);	  if(stepHandlers!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepSize;  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  for(int  i  =  0;  i  <  stepSize;  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  0;  i  <  stepSize;  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.	  for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!handler.    	non-compiled	[CE]  <identifier>  expected	6	None	replace
45	[BUG]  [BUGGY]  parent.addChildToBack(stepHandlers);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  parent.addChildToBack(stepHandlers);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	parent.addChildToBack(stepHandlers);	  parent.addStepHandler(handler);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
46	[BUG]  [BUGGY]  HashSet  <  Integer>  stepSize  =  hasErrors();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  HashSet  <  Integer>  stepSize  =  hasErrors();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	HashSet  <  Integer>  stepSize  =  hasErrors();	  if(hasErrors())    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
47	[BUG]  [BUGGY]  HashSet  <  Integer>  stepSize  =  hasErrors()?(HashSet  <  Integer>)stepSize  :  new  HashSet  <  Integer>(stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  HashSet  <  Integer>  stepSize  =  hasErrors()?(HashSet  <  Integer>)stepSize  :  new  HashSet  <  Integer>(stepSize);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	HashSet  <  Integer>  stepSize  =  hasErrors()?(HashSet  <  Integer>)stepSize  :  new  HashSet  <  Integer>(stepSize);	  if(hasErrors())    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
48	[BUG]  [BUGGY]  this.eventsStates.add(new  ExpandableStatefulODE(stepStart,  stepSize,  expandable));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.add(new  ExpandableStatefulODE(stepStart,  stepSize,  expandable));  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(new  ExpandableStatefulODE(stepStart,  stepSize,  expandable));	  this.eventsStates.add(new    ExpandableStatefulODE(stepStart,    stepSize));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
49	[BUG]  [BUGGY]  AllStepHandlers(stepHandlers)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  AllStepHandlers(stepHandlers)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	AllStepHandlers(stepHandlers)  {  throw  new  IllegalArgumentException( " ");  }	  if(stepHandlers!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	23	None	replace
50	[BUG]  [BUGGY]  if(stepStart!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepStart!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepStart!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  if(stepSize!=    0)    {    for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	20	None	replace
51	[BUG]  [BUGGY]  if(stepStart!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepStart!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepStart!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  }	  if(stepSize!=    0)    {    for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	20	None	replace
52	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(isLastStep)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(isLastStep)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  if(stepSize!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	33	None	replace
53	[BUG]  [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(isLastStep)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(isLastStep)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  if(stepSize!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	33	None	replace
54	[BUG]  [BUGGY]  Integer  stepSize  =  getInitializedStepSize();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  Integer  stepSize  =  getInitializedStepSize();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	Integer  stepSize  =  getInitializedStepSize();	  Integer    stepSize    =    getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
55	[BUG]  [BUGGY]  wires.add(handler);  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  wires.add(handler);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	wires.add(handler);	  if(stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
56	[BUG]  [BUGGY]  if(hasSteps())  {  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(hasSteps())  {  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(hasSteps())  {  if(!stepHandlers.contains(handler))  {  throw  new  IllegalArgumentException( " ");  }	          if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!stepHandlers.contains(handler))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
57	[BUG]  [BUGGY]  if(!stepSize.contains(handler))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(!stepSize.contains(handler))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(!stepSize.contains(handler))  {  throw  new  IllegalStateException( " ");  }	          if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(       "       ");    }    if(!stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepSize;  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  for(int  i  =  0;  i  <  stepSize;  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  0;  i  <  stepSize;  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	5	None	replace
59	[BUG]  [BUGGY]  add(new  Integer(0),  handler);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  add(new  Integer(0),  handler);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	add(new  Integer(0),  handler);	  add(new    Integer(0));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
60	[BUG]  [BUGGY]  if(stepSize  ==  0)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepSize  ==  0)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepSize  ==  0)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  if(stepSize!=    0)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	32	None	replace
61	[BUG]  [BUGGY]  if(!isLastStep)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(!isLastStep)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(!isLastStep)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!	  if(stepHandlers!=    null)    {    for(int    i    =    stepSize;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
62	[BUG]  [BUGGY]  if(!isLastStep)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(!isLastStep)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(!isLastStep)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  }	  if(stepHandlers!=    null)    {    for(int    i    =    stepSize;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
63	[BUG]  [BUGGY]  parent.addHandler(handler);  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  parent.addHandler(handler);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	parent.addHandler(handler);	  if(stepHandlers.contains(handler))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
64	[BUG]  [BUGGY]  if(stepSize  ==  null)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepSize  ==  null)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepSize  ==  null)  {  for(int  i  =  stepStart;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  if(stepSize!=    null)    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	33	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)this.stepHandlers.get(i);  if(!  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)this.stepHandlers.get(i);  if(!  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)this.stepHandlers.get(i);  if(!	  for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
66	[BUG]  [BUGGY]  parent  ==  null  ||  stepHandlers!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  parent  ==  null  ||  stepHandlers!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	parent  ==  null  ||  stepHandlers!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(stepHandlers!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	23	None	replace
67	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  parent  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	parent  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(stepHandlers!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	23	None	replace
68	[BUG]  [BUGGY]  if(stepStart!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepStart!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepStart!=  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.	  if(stepSize!=    0)    {    for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	20	None	replace
69	[BUG]  [BUGGY]  if(hasErrors())  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(hasErrors())  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(hasErrors())  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  if(hasErrors())    {    for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	25	None	replace
70	[BUG]  [BUGGY]  this.eventsStates.add(expable,  handler);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.add(expable,  handler);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(expable,  handler);	  this.eventsStates.add(handler,    expandable);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
71	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Exponents  are  already  in  the  range  [ "  +  stepStart  + "] ");  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  throw  new  IllegalStateException( "Exponents  are  already  in  the  range  [ "  +  stepStart  + "] ");  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	throw  new  IllegalStateException( "Exponents  are  already  in  the  range  [ "  +  stepStart  + "] ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)this.stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)this.stepHandlers.get(i);  if(handler.  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)this.stepHandlers.get(i);  if(handler.	  for(int    i    =    stepStart;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	10	None	replace
73	[BUG]  [BUGGY]  this.eventsStates.add(expansionable,  handler);  fireInitializingStep();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.add(expansionable,  handler);  fireInitializingStep();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(expansionable,  handler);  fireInitializingStep();	  this.eventsStates.add(handler,    expandable);    fireInitializingStep();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepStarts.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  for(int  i  =  0;  i  <  stepStarts.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  0;  i  <  stepStarts.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(handler.	  for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	5	None	replace
75	[BUG]  [BUGGY]  this.eventsStates.add(new  ExpandableStatefulODE(stepStart,  stepSize),  expandable);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  this.eventsStates.add(new  ExpandableStatefulODE(stepStart,  stepSize),  expandable);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	this.eventsStates.add(new  ExpandableStatefulODE(stepStart,  stepSize),  expandable);	  this.eventsStates.add(new    ExpandableStatefulODE(stepStart,    stepSize));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
76	[BUG]  [BUGGY]  if(stepStart  ==  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepStart  ==  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepStart  ==  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  }	  if(stepHandlers!=    null)    {    for(int    i    =    stepSize;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
77	[BUG]  [BUGGY]  if(stepStart!=  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepStart!=  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepStart!=  null)  {  for(int  i  =  stepSize;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!  }	  if(stepHandlers!=    null)    {    for(int    i    =    stepSize;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
78	[BUG]  [BUGGY]  if(stepStart  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  if(stepStart  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	if(stepStart  ==  0)  {  for(int  i  =  0;  i  <  stepHandlers.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.	  if(stepSize    ==    0)    {    for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(handler.    	non-compiled	[CE]  <identifier>  expected	21	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  stepStarts.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  addStepHandler(final  StepHandler  handler)  {  stepHandlers.add(handler);      [BUGGY]  for(int  i  =  0;  i  <  stepStarts.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  addStepHandler  [RETURN_TYPE]  void  StepHandler  handler  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  StepHandler  handler  String  name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	for(int  i  =  0;  i  <  stepStarts.size();  ++i)  {  StepHandler  handler  =(StepHandler)stepHandlers.get(i);  if(!handler.	  for(int    i    =    0;    i    <    stepHandlers.size();    ++i)    {    StepHandler    handler    =(StepHandler)stepHandlers.get(i);    if(!handler.    	non-compiled	[CE]  <identifier>  expected	6	None	replace
