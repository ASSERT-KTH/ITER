bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] handler.handleStep(interpolator, isLastStep); [FE] AssertionError [CONTEXT]  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { [BUGGY] handler.handleStep(interpolator, isLastStep); [BUGGY] } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	351	351	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { [BUGGY] [BUGGY] handler.handleStep(interpolator, isLastStep); } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	351	351	1	add	
3	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); [BUGGY] } [BUGGY]  if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); [BUGGY] [BUGGY] } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	
5	[BUG] [BUGGY] System.arraycopy(eventY, 0, y, 0, y.length); [FE] AssertionError [CONTEXT] for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   [BUGGY] System.arraycopy(eventY, 0, y, 0, y.length); [BUGGY] computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	367	367	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   [BUGGY] [BUGGY] System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	367	367	1	add	
7	[BUG] [BUGGY] computeDerivatives(eventT, y, yDot); [FE] AssertionError [CONTEXT] remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); [BUGGY] computeDerivatives(eventT, y, yDot); [BUGGY] resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); [BUGGY] [BUGGY] computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	
9	[BUG] [BUGGY] resetOccurred = true; [FE] AssertionError [CONTEXT] } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); [BUGGY] resetOccurred = true; [BUGGY] for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); [BUGGY] [BUGGY] resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	add	
11	[BUG] [BUGGY] for (final EventState remaining : occuringEvents) { [FE] AssertionError [CONTEXT] return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; [BUGGY] for (final EventState remaining : occuringEvents) { [BUGGY] remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT);  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; [BUGGY] [BUGGY] for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT);  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	add	
13	[BUG] [BUGGY] return eventT; [FE] AssertionError [CONTEXT] boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } [BUGGY] return eventT; [BUGGY] }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT);  if (currentEvent.evaluateStep(interpolator)) {  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } [BUGGY] [BUGGY] return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT);  if (currentEvent.evaluateStep(interpolator)) {  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	add	
15	[BUG] [BUGGY] addEventHandler(handler, maxCheckInterval, convergence,  maxIterationCount,   new BracketingNthOrderBrentSolver(convergence, 5)); [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { [BUGGY] addEventHandler(handler, maxCheckInterval, convergence,      maxIterationCount,            new BracketingNthOrderBrentSolver(convergence, 5)); [BUGGY] maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	127	129	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { [BUGGY] [BUGGY] addEventHandler(handler, maxCheckInterval, convergence,      maxIterationCount,            new BracketingNthOrderBrentSolver(convergence, 5)); maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	127	129	1	add	
17	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { addEventHandler(handler, maxCheckInterval, convergence, maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	130	130	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { addEventHandler(handler, maxCheckInterval, convergence, maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	130	130	1	add	
19	[BUG] [BUGGY] eventsStates.add(new EventState(handler, maxCheckInterval, convergence,   maxIterationCount, solver)); [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateSolver solver) { [BUGGY] eventsStates.add(new EventState(handler, maxCheckInterval, convergence,          maxIterationCount, solver)); [BUGGY] maxIterationCount, solver)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount UnivariateSolver solver [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized UnivariateSolver solver double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	138	139	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateSolver solver) { [BUGGY] [BUGGY] eventsStates.add(new EventState(handler, maxCheckInterval, convergence,          maxIterationCount, solver)); maxIterationCount, solver)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount UnivariateSolver solver [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized UnivariateSolver solver double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	138	139	1	add	
21	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateSolver solver) { eventsStates.add(new EventState(handler, maxCheckInterval, convergence, maxIterationCount, solver)); [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount UnivariateSolver solver [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized UnivariateSolver solver double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	140	140	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateSolver solver) { eventsStates.add(new EventState(handler, maxCheckInterval, convergence, maxIterationCount, solver)); [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount UnivariateSolver solver [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized UnivariateSolver solver double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	140	140	1	add	
23	[BUG] [BUGGY] state.getEventHandler().init(t0, y0, t); [FE] AssertionError [CONTEXT] protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount(); for (final EventState state : eventsStates) { [BUGGY] state.getEventHandler().init(t0, y0, t); [BUGGY] } for (StepHandler handler : stepHandlers) { handler.init(t0, y0, t); } setStateInitialized(false); } [CLASS] AbstractIntegrator 1 [METHOD] initIntegration [RETURN_TYPE] void  final double t0 final double[] y0 final double t [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized EventState state double[] y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	191	191	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount(); for (final EventState state : eventsStates) { [BUGGY] [BUGGY] state.getEventHandler().init(t0, y0, t); } for (StepHandler handler : stepHandlers) { handler.init(t0, y0, t); } setStateInitialized(false); } [CLASS] AbstractIntegrator 1 [METHOD] initIntegration [RETURN_TYPE] void  final double t0 final double[] y0 final double t [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized EventState state double[] y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	191	191	1	add	
25	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount(); for (final EventState state : eventsStates) { state.getEventHandler().init(t0, y0, t); [BUGGY] } [BUGGY]  for (StepHandler handler : stepHandlers) { handler.init(t0, y0, t); } setStateInitialized(false); } [CLASS] AbstractIntegrator 1 [METHOD] initIntegration [RETURN_TYPE] void  final double t0 final double[] y0 final double t [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized EventState state double[] y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount(); for (final EventState state : eventsStates) { state.getEventHandler().init(t0, y0, t); [BUGGY] [BUGGY] } for (StepHandler handler : stepHandlers) { handler.init(t0, y0, t); } setStateInitialized(false); } [CLASS] AbstractIntegrator 1 [METHOD] initIntegration [RETURN_TYPE] void  final double t0 final double[] y0 final double t [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized EventState state double[] y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	192	192	1	add	
27	[BUG] [BUGGY] state.reinitializeBegin(interpolator); [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime();  if (! statesInitialized) { for (EventState state : eventsStates) { [BUGGY] state.reinitializeBegin(interpolator); [BUGGY] } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime();  if (! statesInitialized) { for (EventState state : eventsStates) { [BUGGY] [BUGGY] state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	add	
29	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime();  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); [BUGGY] } [BUGGY] statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	307	307	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime();  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); [BUGGY] [BUGGY] } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	307	307	1	add	
31	[BUG] [BUGGY] if (state.evaluateStep(interpolator)) { [FE] AssertionError [CONTEXT] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { [BUGGY] if (state.evaluateStep(interpolator)) { [BUGGY]  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	323	323	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { [BUGGY] [BUGGY] if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	323	323	1	add	
33	[BUG] [BUGGY] occuringEvents.add(state); [FE] AssertionError [CONTEXT]  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  [BUGGY] occuringEvents.add(state); [BUGGY] } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  [BUGGY] [BUGGY] occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	325	325	1	add	
35	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } [BUGGY] } [BUGGY]  while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } [BUGGY] [BUGGY] } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	327	327	1	add	
37	[BUG] [BUGGY] final Iterator<EventState> iterator = occuringEvents.iterator(); [FE] AssertionError [CONTEXT] for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  [BUGGY] final Iterator<EventState> iterator = occuringEvents.iterator(); [BUGGY] final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  [BUGGY] [BUGGY] final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	332	332	1	add	
39	[BUG] [BUGGY] final EventState currentEvent = iterator.next(); [FE] AssertionError [CONTEXT] if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); [BUGGY] final EventState currentEvent = iterator.next(); [BUGGY] iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	333	333	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); [BUGGY] [BUGGY] final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	333	333	1	add	
41	[BUG] [BUGGY] iterator.remove(); [FE] AssertionError [CONTEXT]  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); [BUGGY] iterator.remove(); [BUGGY]   final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	334	334	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); [BUGGY] [BUGGY] iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	334	334	1	add	
43	[BUG] [BUGGY] final double eventT = currentEvent.getEventTime(); [FE] AssertionError [CONTEXT] } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  [BUGGY] final double eventT = currentEvent.getEventTime(); [BUGGY] interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  [BUGGY] [BUGGY] final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	337	337	1	add	
45	[BUG] [BUGGY] interpolator.setSoftPreviousTime(previousT); [FE] AssertionError [CONTEXT] while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); [BUGGY] interpolator.setSoftPreviousTime(previousT); [BUGGY] interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	338	338	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); [BUGGY] [BUGGY] interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	338	338	1	add	
47	[BUG] [BUGGY] interpolator.setSoftCurrentTime(eventT); [FE] AssertionError [CONTEXT] while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); [BUGGY] interpolator.setSoftCurrentTime(eventT); [BUGGY]   interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();   [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	339	339	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); [BUGGY] [BUGGY] interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();   [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	339	339	1	add	
49	[BUG] [BUGGY] interpolator.setInterpolatedTime(eventT); [FE] AssertionError [CONTEXT] final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  [BUGGY] interpolator.setInterpolatedTime(eventT); [BUGGY] final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	342	342	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  [BUGGY] [BUGGY] interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	342	342	1	add	
51	[BUG] [BUGGY] final double[] eventY = interpolator.getInterpolatedState().clone(); [FE] AssertionError [CONTEXT] final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); [BUGGY] final double[] eventY = interpolator.getInterpolatedState().clone(); [BUGGY]   currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); }  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	343	343	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); [BUGGY] [BUGGY] final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); }  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	343	343	1	add	
53	[BUG] [BUGGY] currentEvent.stepAccepted(eventT, eventY); [FE] AssertionError [CONTEXT]  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  [BUGGY] currentEvent.stepAccepted(eventT, eventY); [BUGGY] isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	346	346	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  [BUGGY] [BUGGY] currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	346	346	1	add	
55	[BUG] [BUGGY] isLastStep = currentEvent.stop(); [FE] AssertionError [CONTEXT] final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); [BUGGY] isLastStep = currentEvent.stop(); [BUGGY]   for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	347	347	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); [BUGGY] [BUGGY] isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	347	347	1	add	
57	[BUG] [BUGGY] for (final StepHandler handler : stepHandlers) { [FE] AssertionError [CONTEXT]  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  [BUGGY] for (final StepHandler handler : stepHandlers) { [BUGGY] handler.handleStep(interpolator, isLastStep); } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	350	350	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  [BUGGY] [BUGGY] for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	350	350	1	add	
59	[BUG] [BUGGY] if (isLastStep) { [FE] AssertionError [CONTEXT]  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } [BUGGY] if (isLastStep) { [BUGGY]  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	354	354	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } [BUGGY] [BUGGY] if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	354	354	1	add	
61	[BUG] [BUGGY] boolean needReset = currentEvent.reset(eventT, eventY); [FE] AssertionError [CONTEXT] if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } [BUGGY] boolean needReset = currentEvent.reset(eventT, eventY); [BUGGY] if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } [BUGGY] [BUGGY] boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	363	363	1	add	
63	[BUG] [BUGGY] if (needReset) { [FE] AssertionError [CONTEXT] if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); [BUGGY] if (needReset) { [BUGGY]   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); [BUGGY] [BUGGY] if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	364	364	1	add	
65	[BUG] [BUGGY] state.stepAccepted(currentT, currentY); [FE] AssertionError [CONTEXT]  occuringEvents.add(currentEvent); } }  interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { [BUGGY] state.stepAccepted(currentT, currentY); [BUGGY] isLastStep = isLastStep || state.stop(); } isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);  for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } return currentT; [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  occuringEvents.add(currentEvent); } }  interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { [BUGGY] [BUGGY] state.stepAccepted(currentT, currentY); isLastStep = isLastStep || state.stop(); } isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);  for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } return currentT; [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	add	
67	[BUG] [BUGGY] isLastStep = isLastStep || state.stop(); [FE] AssertionError [CONTEXT] occuringEvents.add(currentEvent); } }  interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); [BUGGY] isLastStep = isLastStep || state.stop(); [BUGGY] } isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);  for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } return currentT;  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] occuringEvents.add(currentEvent); } }  interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); [BUGGY] [BUGGY] isLastStep = isLastStep || state.stop(); } isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);  for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } return currentT;  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	394	394	1	add	
69	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] } }  interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); isLastStep = isLastStep || state.stop(); [BUGGY] } [BUGGY] isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);  for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } return currentT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } }  interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); isLastStep = isLastStep || state.stop(); [BUGGY] [BUGGY] } isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);  for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } return currentT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	395	395	1	add	
71	[BUG] [BUGGY] handler.handleStep(interpolator, isLastStep); [FE] AssertionError [CONTEXT] interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); isLastStep = isLastStep || state.stop(); } isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);  for (StepHandler handler : stepHandlers) { [BUGGY] handler.handleStep(interpolator, isLastStep); [BUGGY] } return currentT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	400	400	1	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); isLastStep = isLastStep || state.stop(); } isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);  for (StepHandler handler : stepHandlers) { [BUGGY] [BUGGY] handler.handleStep(interpolator, isLastStep); } return currentT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	400	400	1	add	
73	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); isLastStep = isLastStep || state.stop(); } isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);  for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); [BUGGY] } [BUGGY]  return currentT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); isLastStep = isLastStep || state.stop(); } isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);  for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); [BUGGY] [BUGGY] } return currentT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	add	
75	[BUG] [BUGGY] stepHandlers.add(handler); [FE] AssertionError [CONTEXT] public void addStepHandler(final StepHandler handler) { [BUGGY] stepHandlers.add(handler); [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] addStepHandler [RETURN_TYPE] void  StepHandler handler [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	109	109	1	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void addStepHandler(final StepHandler handler) { [BUGGY] [BUGGY] stepHandlers.add(handler); } [CLASS] AbstractIntegrator 1 [METHOD] addStepHandler [RETURN_TYPE] void  StepHandler handler [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	109	109	1	add	
77	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void addStepHandler(final StepHandler handler) { stepHandlers.add(handler); [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] addStepHandler [RETURN_TYPE] void  StepHandler handler [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void addStepHandler(final StepHandler handler) { stepHandlers.add(handler); [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] addStepHandler [RETURN_TYPE] void  StepHandler handler [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	110	110	1	add	
79	[BUG] [BUGGY] handler.init(t0, y0, t); [FE] AssertionError [CONTEXT] protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount(); for (final EventState state : eventsStates) { state.getEventHandler().init(t0, y0, t); } for (StepHandler handler : stepHandlers) { [BUGGY] handler.init(t0, y0, t); [BUGGY] } setStateInitialized(false); } [CLASS] AbstractIntegrator 1 [METHOD] initIntegration [RETURN_TYPE] void  final double t0 final double[] y0 final double t [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized EventState state double[] y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	195	195	1	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount(); for (final EventState state : eventsStates) { state.getEventHandler().init(t0, y0, t); } for (StepHandler handler : stepHandlers) { [BUGGY] [BUGGY] handler.init(t0, y0, t); } setStateInitialized(false); } [CLASS] AbstractIntegrator 1 [METHOD] initIntegration [RETURN_TYPE] void  final double t0 final double[] y0 final double t [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized EventState state double[] y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	195	195	1	add	
81	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount(); for (final EventState state : eventsStates) { state.getEventHandler().init(t0, y0, t); } for (StepHandler handler : stepHandlers) { handler.init(t0, y0, t); [BUGGY] } [BUGGY]  setStateInitialized(false); } [CLASS] AbstractIntegrator 1 [METHOD] initIntegration [RETURN_TYPE] void  final double t0 final double[] y0 final double t [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized EventState state double[] y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount(); for (final EventState state : eventsStates) { state.getEventHandler().init(t0, y0, t); } for (StepHandler handler : stepHandlers) { handler.init(t0, y0, t); [BUGGY] [BUGGY] } setStateInitialized(false); } [CLASS] AbstractIntegrator 1 [METHOD] initIntegration [RETURN_TYPE] void  final double t0 final double[] y0 final double t [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized EventState state double[] y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations StepHandler handler String name  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3779644730092272	196	196	1	add	
83	[BUG] [BUGGY] double previousT = interpolator.getGlobalPreviousTime(); [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { [BUGGY] double previousT = interpolator.getGlobalPreviousTime(); [BUGGY] final double currentT = interpolator.getGlobalCurrentTime();  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	300	300	1	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { [BUGGY] [BUGGY] double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime();  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	300	300	1	add	
85	[BUG] [BUGGY] final double currentT = interpolator.getGlobalCurrentTime(); [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); [BUGGY] final double currentT = interpolator.getGlobalCurrentTime(); [BUGGY]   if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }   [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	301	301	1	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); [BUGGY] [BUGGY] final double currentT = interpolator.getGlobalCurrentTime();  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }   [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	301	301	1	add	
87	[BUG] [BUGGY] if (! statesInitialized) { [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime();  [BUGGY] if (! statesInitialized) { [BUGGY] for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	304	304	1	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime();  [BUGGY] [BUGGY] if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	304	304	1	add	
89	[BUG] [BUGGY] for (EventState state : eventsStates) { [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime();  if (! statesInitialized) { [BUGGY] for (EventState state : eventsStates) { [BUGGY] state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {   [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	305	305	1	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime();  if (! statesInitialized) { [BUGGY] [BUGGY] for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {   [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	305	305	1	add	
91	[BUG] [BUGGY] statesInitialized = true; [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime();  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } [BUGGY] statesInitialized = true; [BUGGY] }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	308	308	1	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime();  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } [BUGGY] [BUGGY] statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	308	308	1	add	
93	[BUG] [BUGGY] final int orderingSign = interpolator.isForward() ? +1 : -1; [FE] AssertionError [CONTEXT]  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  [BUGGY] final int orderingSign = interpolator.isForward() ? +1 : -1; [BUGGY] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  [BUGGY] [BUGGY] final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	312	312	1	add	
95	[BUG] [BUGGY] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() { [FE] AssertionError [CONTEXT]  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; [BUGGY] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() { [BUGGY]   public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; [BUGGY] [BUGGY] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	add	
97	[BUG] [BUGGY] for (final EventState state : eventsStates) { [FE] AssertionError [CONTEXT] final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); [BUGGY] for (final EventState state : eventsStates) { [BUGGY] if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); [BUGGY] [BUGGY] for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	add	
99	[BUG] [BUGGY] while (!occuringEvents.isEmpty()) { [FE] AssertionError [CONTEXT] }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } [BUGGY] while (!occuringEvents.isEmpty()) { [BUGGY]   final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	329	329	1	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } [BUGGY] [BUGGY] while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	329	329	1	add	
