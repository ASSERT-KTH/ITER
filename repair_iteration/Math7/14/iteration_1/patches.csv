bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  state.removeBegin(currentT);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]  state.removeBegin(currentT);  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	state.removeBegin(currentT);	  state.removeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  state.reinitializeBegin(previousT,  currentT);  [CE]  method  reinitializeBegin  in  class  EventState  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]  state.reinitializeBegin(previousT,  currentT);  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	state.reinitializeBegin(previousT,  currentT);	      state.reinitializeBegin(currentT);    	non-compiled	[CE]  method  reinitializeBegin  in  class  EventState  cannot  be  applied  to  given  types;	6	None	replace
3	[BUG]  [BUGGY]  state.reinitializeBegin(previousT,  es1);  [CE]  cannot  find  symbol  es1  [FE]          AssertionError    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]  state.reinitializeBegin(previousT,  es1);  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	state.reinitializeBegin(previousT,  es1);	      state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  es1	6	None	replace
4	[BUG]  [BUGGY]  statesInitialized  =  state.isInitialized();  [CE]  cannot  find  symbol  [FE]    NoBracketingException    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]  statesInitialized  =  state.isInitialized();  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	statesInitialized  =  state.isInitialized();	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
5	[BUG]  [BUGGY]  state.acceptStep(previousT,  yDot,  tEnd);  [CE]  cannot  find  symbol  [FE]      NoBracketingException    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]  state.acceptStep(previousT,  yDot,  tEnd);  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	state.acceptStep(previousT,  yDot,  tEnd);	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
6	[BUG]  [BUGGY]      statesInitialized  =  state.isInitialized()?  -1  :  0;  [CE]  cannot  find  symbol  [FE]    NoBracketingException    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]      statesInitialized  =  state.isInitialized()?  -1  :  0;  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	        statesInitialized  =  state.isInitialized()?  -1  :  0;	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
7	[BUG]  [BUGGY]  state.resetOccurred();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]  state.resetOccurred();  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	state.resetOccurred();	  state.reset();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
8	[BUG]  [BUGGY]  state.reinitializeBegin(currentT,  previousT);  [CE]  method  reinitializeBegin  in  class  EventState  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]  state.reinitializeBegin(currentT,  previousT);  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	state.reinitializeBegin(currentT,  previousT);	  state.reinitializeBegin(previousT);    	non-compiled	[CE]  method  reinitializeBegin  in  class  EventState  cannot  be  applied  to  given  types;	2	None	replace
9	[BUG]  [BUGGY]      state.acceptStep(previousT,  orderingSign);  [CE]  cannot  find  symbol  orderingSign  [FE]    NoBracketingException    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]      state.acceptStep(previousT,  orderingSign);  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	        state.acceptStep(previousT,  orderingSign);	  	non-compiled	[CE]  cannot  find  symbol  orderingSign	3	None	add
10	[BUG]  [BUGGY]      state.acceptStep(previousT,  previousT);  [CE]  cannot  find  symbol  [FE]      NoBracketingException    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]      state.acceptStep(previousT,  previousT);  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	        state.acceptStep(previousT,  previousT);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
11	[BUG]  [BUGGY]      state.acceptStep(previousT,  yDot);  [CE]  cannot  find  symbol  [FE]        NoBracketingException    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]      state.acceptStep(previousT,  yDot);  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	        state.acceptStep(previousT,  yDot);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
12	[BUG]  [BUGGY]  state.reset(previousT,  es1);  [CE]  cannot  find  symbol  es1  [FE]        AssertionError    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]  state.reset(previousT,  es1);  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	state.reset(previousT,  es1);	  state.reset();    	non-compiled	[CE]  cannot  find  symbol  es1	7	None	replace
13	[BUG]  [BUGGY]  state.acceptStep(previousT,  currentT);  [CE]  cannot  find  symbol  [FE]    NoBracketingException    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]  state.acceptStep(previousT,  currentT);  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	state.acceptStep(previousT,  currentT);	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
14	[BUG]  [BUGGY]  state.reinitializeBegin(eventT,  previousT);  [CE]  cannot  find  symbol  eventT  [FE]          AssertionError    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]  state.reinitializeBegin(eventT,  previousT);  [BUGGY]    }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	state.reinitializeBegin(eventT,  previousT);	  state.reinitializeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol  eventT	2	None	replace
15	[BUG]  [BUGGY]  state.reinitializeBegin(eventT,  currentT);  [CE]  cannot  find  symbol  eventT  [FE]        AssertionError    [CONTEXT]    throws  MaxCountExceededException,  DimensionMismatchException,  NoBracketingException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {    [BUGGY]  state.reinitializeBegin(eventT,  currentT);  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	306	306	1	replace	state.reinitializeBegin(eventT,  currentT);	      state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  eventT	6	None	replace
