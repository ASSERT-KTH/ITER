bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  state.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  state.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	state.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventY,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
2	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  tDot,  tEnd);  }  [CE]  cannot  find  symbol  tDot  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  tDot,  tEnd);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  tDot,  tEnd);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventY,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  tDot	1	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  resetOccurred  =  false;  resetOccurred  =  false;  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	add	resetOccurred    =    false;    resetOccurred  =  false;	  	compilable	  [FE]  AssertionError  	4	1	add
4	[BUG]  [BUGGY]  resetOccurred  =  false;  resetOccurred  =  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  resetOccurred  =  false;  resetOccurred  =  false;  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	resetOccurred    =    false;    resetOccurred  =  false;	  	compilable	  [FE]  AssertionError  	4	1	add
5	[BUG]  [BUGGY]  resetOccurred  =  false;  if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  resetOccurred  =  false;  if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	resetOccurred    =    false;    if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
6	[BUG]  [BUGGY]  resetOccurred  =  false;  if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  previousT);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  resetOccurred  =  false;  if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  previousT);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	resetOccurred    =    false;    if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  previousT);  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
7	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	state.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);	      if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	8	None	replace
8	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t0);  }  [CE]  cannot  find  symbol  t0  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t0);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t0);  }	      if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t0	8	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t0);  [CE]  cannot  find  symbol  t0  [FE]        AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t0);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  t0);	      System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	6	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);  [CE]  cannot  find  symbol  tStart  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tStart,  tEnd);	      System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  tStart	6	None	replace
11	[BUG]  [BUGGY]  state.arraycopy(eventY,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  y,  tEnd);  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  state.arraycopy(eventY,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  y,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	state.arraycopy(eventY,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  y,  tEnd);	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    yDot.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
12	[BUG]  [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  y,  tEnd);  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  state.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  y,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	state.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  y,  tEnd);	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    yDot.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
13	[BUG]  [BUGGY]  state.arraycopy(eventY,  0,  y,  0,  currentT.length);  computeDerivatives(eventY,  y,  isLastStep);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  state.arraycopy(eventY,  0,  y,  0,  currentT.length);  computeDerivatives(eventY,  y,  isLastStep);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	state.arraycopy(eventY,  0,  y,  0,  currentT.length);  computeDerivatives(eventY,  y,  isLastStep);	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventY,    y,    currentT);    }    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  eventY);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  eventY);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  eventY);	      System.arraycopy(eventY,    0,    y,    0,    yDot.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	7	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tStart,  tEnd);  [CE]  cannot  find  symbol  tStart  [FE]            AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tStart,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tStart,  tEnd);	      System.arraycopy(eventY,    0,    y,    0,    yDot.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  tStart	7	None	replace
16	[BUG]  [BUGGY]  state.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  state.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	state.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
17	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd,  orderingSign);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	2	None	replace
18	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  orderingSign);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  orderingSign);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  orderingSign);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    yDot.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	9	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  tEnd);  computeDerivatives(eventY,  y,  isLastStep);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  tEnd);  computeDerivatives(eventY,  y,  isLastStep);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventY,  0,  y,  0,  tEnd);  computeDerivatives(eventY,  y,  isLastStep);	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventY,    y,    tEnd);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	1	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventY,    y,    tEnd);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	1	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  tEnd);  computeDerivatives(eventT,  y,  isLastStep);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  tEnd);  computeDerivatives(eventT,  y,  isLastStep);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventT,  0,  y,  0,  tEnd);  computeDerivatives(eventT,  y,  isLastStep);	      if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	8	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  currentT.length);  computeDerivatives(eventY,  y,  isLastStep);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventY,  0,  y,  0,  currentT.length);  computeDerivatives(eventY,  y,  isLastStep);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventY,  0,  y,  0,  currentT.length);  computeDerivatives(eventY,  y,  isLastStep);	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventY,    y,    currentT);    }    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
23	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  currentT.length);  computeDerivatives(eventY,  y,  isLastStep);  }  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  currentT.length);  computeDerivatives(eventY,  y,  isLastStep);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  currentT.length);  computeDerivatives(eventY,  y,  isLastStep);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventY,    y,    currentT);    }    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  tEnd);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventT,  0,  y,  0,  tEnd);	      System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	6	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd);  [CE]  cannot  find  symbol  t  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd);	      System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t	6	None	replace
26	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  yDot,  0,  tEnd);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventT,  0,  yDot,  0,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventT,  0,  yDot,  0,  tEnd);	      System.arraycopy(eventY,    0,    y,    0,    yDot.length);    computeDerivatives(eventT,    y,    tEnd);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	7	None	replace
27	[BUG]  [BUGGY]  resetOccurred  =  false;  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  resetOccurred  =  false;  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	resetOccurred    =    false;    if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);  }	  	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	4	None	add
28	[BUG]  [BUGGY]  resetOccurred  =  false;  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  resetOccurred  =  false;  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	resetOccurred    =    false;    if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  }	  	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	4	None	add
29	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	2	None	replace
30	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd);  }  [CE]  cannot  find  symbol  t  [FE]            AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t,  tEnd);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t	2	None	replace
31	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  t0,  yDot,  tEnd);  }  [CE]  cannot  find  symbol  t0  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  t0,  yDot,  tEnd);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  t0,  yDot,  tEnd);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    yDot.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t0	9	None	replace
32	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  eventY);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  eventY);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  eventY);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    yDot.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	9	None	replace
33	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  tEnd);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventY,    y,    tEnd);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	1	None	replace
34	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  computeDerivatives(eventY,  tEnd,  yDot);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  computeDerivatives(eventY,  tEnd,  yDot);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  computeDerivatives(eventY,  tEnd,  yDot);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventY,    y,    tEnd);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	1	None	replace
35	[BUG]  [BUGGY]  resetOccurred  =  false;  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  resetOccurred  =  false;  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	resetOccurred    =    false;    if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  tEnd);  }	  	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	4	None	add
36	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  yDot);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  yDot);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  tEnd,  yDot);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	2	None	replace
37	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  yDot,  tEnd);  }  [CE]  cannot  find  symbol  t1  [FE]            AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  yDot,  tEnd);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t1,  yDot,  tEnd);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t1	2	None	replace
38	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  y,  tEnd);  }  [CE]  cannot  find  symbol  t0  [FE]        AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  y,  tEnd);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventT,  t0,  y,  tEnd);  }	      if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  cannot  find  symbol  t0	8	None	replace
39	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  yDot);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  yDot);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  computeDerivatives(eventT,  tEnd,  yDot);  }	      if(isLastStep)    {    System.arraycopy(eventT,    0,    y,    0,    y.length);    computeDerivatives(eventT,    y,    tEnd);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	8	None	replace
40	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	add	System.arraycopy(eventT,  0,  y,  0,  yDot.length);	      System.arraycopy(eventY,    0,    y,    0,    yDot.length);    computeDerivatives(eventT,    y,    tEnd);    	compilable	  [FE]  ArrayStoreException  	7	3	replace
41	[BUG]  [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  [FE]  ArrayStoreException  [FE]          AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  System.arraycopy(eventT,  0,  y,  0,  yDot.length);  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	System.arraycopy(eventT,  0,  y,  0,  yDot.length);	      System.arraycopy(eventY,    0,    y,    0,    yDot.length);    computeDerivatives(eventT,    y,    tEnd);    	compilable	  [FE]  ArrayStoreException  	7	3	replace
42	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  currentT);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  currentT);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventT,  0,  y,  0,  y.length);  computeDerivatives(eventY,  y,  currentT);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventY,    y,    currentT);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	3	None	replace
43	[BUG]  [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  computeDerivatives(eventY,  y,  currentT);  }  [CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    }  return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);    [BUGGY]  if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  computeDerivatives(eventY,  y,  currentT);  }  [BUGGY]    resetOccurred  =  true;  for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	if(isLastStep)  {  System.arraycopy(eventY,  0,  y,  0,  yDot.length);  computeDerivatives(eventY,  y,  currentT);  }	      if(isLastStep)    {    System.arraycopy(eventY,    0,    y,    0,    y.length);    computeDerivatives(eventY,    y,    currentT);    }    	non-compiled	[CE]  method  computeDerivatives  in  class  AbstractIntegrator  cannot  be  applied  to  given  types;	3	None	replace
