bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
2	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
3	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(!interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
4	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvent.eventsInitialized)  {  [CE]  cannot  find  symbol  currentEvent  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  currentEvent.eventsInitialized)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  currentEvent.eventsInitialized)  {	  for(final    EventState    state    :    this.eventsInitialized)    {    	non-compiled	[CE]  cannot  find  symbol  currentEvent	1	None	replace
5	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	18	None	replace
6	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	9	None	replace
7	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  event  :  this.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	4	None	replace
8	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
9	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
10	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  	non-compiled	[CE]  <identifier>  expected	14	None	add
11	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
12	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
13	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  <identifier>  expected	8	None	add
14	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  for(final  EventState  event  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  for(final  EventState  event  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    for(final  EventState  event  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	add	for(final  EventState  state  :  occuringEvents)  {	  for(final    EventState    state    :    currentEvents)    {    	compilable	  [FE]  AssertionError  	16	2	replace
16	[BUG]  [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  occuringEvents)  {	  for(final    EventState    state    :    currentEvents)    {    	compilable	  [FE]  AssertionError  	16	2	replace
17	[BUG]  [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  cannot  find  symbol  occuringSign  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  if(events!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  occuringSign	10	None	replace
18	[BUG]  [BUGGY]  for(final  EventState  eventState  :  this.events)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  this.events)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  this.events)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    events)    {    if(!interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	3	None	replace
19	[BUG]  [BUGGY]  final  int  orderingSign  =  orders.size();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  int  orderingSign  =  orders.size();  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	final  int  orderingSign  =  orders.size();	  if(orderingSign    >    0)    {    for(final    EventState    event    :    events)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
20	[BUG]  [BUGGY]  final  int  orderingSign  =  events.size();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  int  orderingSign  =  events.size();  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	final  int  orderingSign  =  events.size();	  if(orderingSign    >    0)    {    for(final    EventState    event    :    events)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
21	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents.eventsInitialized)  {  [CE]  cannot  find  symbol  currentEvents  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  currentEvents.eventsInitialized)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  currentEvents.eventsInitialized)  {	  for(final    EventState    state    :    this.eventsInitialized)    {    	non-compiled	[CE]  cannot  find  symbol  currentEvents	1	None	replace
22	[BUG]  [BUGGY]  for(final  EventState  eventState  :  this.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  this.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  this.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    events)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	7	None	replace
23	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsInitialized)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsInitialized)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  eventsInitialized)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	6	None	replace
24	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	6	None	replace
25	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  events)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
26	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	23	None	replace
27	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	22	None	replace
28	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
29	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(existingSign))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  existingSign  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(existingSign))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(existingSign))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  existingSign	13	None	replace
30	[BUG]  [BUGGY]  for(final  EventState  state  :  remaining)  {  [CE]  cannot  find  symbol  remaining  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  remaining)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  remaining)  {	  for(final    EventState    state    :    currentEvents)    {    	non-compiled	[CE]  cannot  find  symbol  remaining	16	None	replace
31	[BUG]  [BUGGY]  for(final  EventState  state  :  otherEvents)  {  [CE]  cannot  find  symbol  otherEvents  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  otherEvents)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  otherEvents)  {	  for(final    EventState    state    :    currentEvents)    {    	non-compiled	[CE]  cannot  find  symbol  otherEvents	16	None	replace
32	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
33	[BUG]  [BUGGY]  for(final  EventState  state  :  otherEvents.values())  {  [CE]  cannot  find  symbol  otherEvents  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  otherEvents.values())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  otherEvents.values())  {	  for(final    EventState    state    :    events.values())    {    	non-compiled	[CE]  cannot  find  symbol  otherEvents	11	None	replace
34	[BUG]  [BUGGY]  for(final  EventState  state  :  other.events)  {  [CE]  cannot  find  symbol  other  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  other.events)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  other.events)  {	  for(final    EventState    state    :    other.events.values())    {    	non-compiled	[CE]  cannot  find  symbol  other	20	None	replace
35	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events)  {  if(!interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events)  {  if(!interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  events)  {  if(!interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(!interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	2	None	replace
36	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsInitialized)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsInitialized)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  eventsInitialized)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(!interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	2	None	replace
37	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	5	None	replace
38	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  events.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	6	None	replace
39	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  eventStandard  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  eventStandard	6	None	replace
40	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	22	None	replace
41	[BUG]  [BUGGY]  for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	17	None	replace
42	[BUG]  [BUGGY]  for(final  EventState  state  :  eventSigns)  {  [CE]  cannot  find  symbol  eventSigns  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventSigns)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  eventSigns)  {	  for(final    EventState    state    :    currentEvents)    {    	non-compiled	[CE]  cannot  find  symbol  eventSigns	16	None	replace
43	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	23	None	replace
44	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
45	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events.size())  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events.size())  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  eventState  :  events.size())  {  if(!interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(!interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	2	None	replace
46	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
47	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
48	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	13	None	replace
49	[BUG]  [BUGGY]  int  orderingSign  =  orderingSign  -  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  int  orderingSign  =  orderingSign  -  0;  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	int  orderingSign  =  orderingSign  -  0;	  if(orderingSign    >    0)    {    for(final    EventState    event    :    events)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
50	[BUG]  [BUGGY]  final  int  orderingSign  =  orderingSign  -  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  int  orderingSign  =  orderingSign  -  0;  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	final  int  orderingSign  =  orderingSign  -  0;	  if(orderingSign    >    0)    {    for(final    EventState    event    :    events)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
51	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	322	322	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
