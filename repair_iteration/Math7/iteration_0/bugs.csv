bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] handler.handleStep(interpolator, isLastStep); [FE] AssertionError testEventsScheduling [CONTEXT]  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { [BUGGY] handler.handleStep(interpolator, isLastStep); [BUGGY] } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	351	351	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError testEventsScheduling [CONTEXT]  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { [BUGGY] [BUGGY] handler.handleStep(interpolator, isLastStep); } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	351	351	1	add	
3	[BUG] [BUGGY] } [FE] AssertionError testEventsScheduling [CONTEXT] interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); [BUGGY] } [BUGGY]  if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError testEventsScheduling [CONTEXT] interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();  currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();  for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); [BUGGY] [BUGGY] } if (isLastStep) {  System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.7071067811865475	352	352	1	add	
5	[BUG] [BUGGY] System.arraycopy(eventY, 0, y, 0, y.length); [FE] AssertionError testEventsScheduling [CONTEXT] for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   [BUGGY] System.arraycopy(eventY, 0, y, 0, y.length); [BUGGY] computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	367	367	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError testEventsScheduling [CONTEXT] for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   [BUGGY] [BUGGY] System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	367	367	1	add	
7	[BUG] [BUGGY] computeDerivatives(eventT, y, yDot); [FE] AssertionError testEventsScheduling [CONTEXT] remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); [BUGGY] computeDerivatives(eventT, y, yDot); [BUGGY] resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError testEventsScheduling [CONTEXT] remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); [BUGGY] [BUGGY] computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	368	368	1	add	
9	[BUG] [BUGGY] resetOccurred = true; [FE] AssertionError testEventsScheduling [CONTEXT] } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); [BUGGY] resetOccurred = true; [BUGGY] for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError testEventsScheduling [CONTEXT] } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); [BUGGY] [BUGGY] resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	369	369	1	add	
11	[BUG] [BUGGY] for (final EventState remaining : occuringEvents) { [FE] AssertionError testEventsScheduling [CONTEXT] return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; [BUGGY] for (final EventState remaining : occuringEvents) { [BUGGY] remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT);  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError testEventsScheduling [CONTEXT] return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; [BUGGY] [BUGGY] for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT);  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	add	
13	[BUG] [BUGGY] return eventT; [FE] AssertionError testEventsScheduling [CONTEXT] boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } [BUGGY] return eventT; [BUGGY] }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT);  if (currentEvent.evaluateStep(interpolator)) {  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError testEventsScheduling [CONTEXT] boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) {   System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } [BUGGY] [BUGGY] return eventT; }  previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT);  if (currentEvent.evaluateStep(interpolator)) {  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 remaining state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep needReset resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	373	373	1	add	
15	[BUG] [BUGGY] addEventHandler(handler, maxCheckInterval, convergence,  maxIterationCount,   new BracketingNthOrderBrentSolver(convergence, 5)); [FE] AssertionError testEventsScheduling [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { [BUGGY] addEventHandler(handler, maxCheckInterval, convergence,      maxIterationCount,            new BracketingNthOrderBrentSolver(convergence, 5)); [BUGGY] maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	127	129	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError testEventsScheduling [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { [BUGGY] [BUGGY] addEventHandler(handler, maxCheckInterval, convergence,      maxIterationCount,            new BracketingNthOrderBrentSolver(convergence, 5)); maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	127	129	1	add	
17	[BUG] [BUGGY] } [FE] AssertionError testEventsScheduling [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { addEventHandler(handler, maxCheckInterval, convergence, maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	130	130	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError testEventsScheduling [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { addEventHandler(handler, maxCheckInterval, convergence, maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	130	130	1	add	
19	[BUG] [BUGGY] eventsStates.add(new EventState(handler, maxCheckInterval, convergence,   maxIterationCount, solver)); [FE] AssertionError testEventsScheduling [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateSolver solver) { [BUGGY] eventsStates.add(new EventState(handler, maxCheckInterval, convergence,          maxIterationCount, solver)); [BUGGY] maxIterationCount, solver)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount UnivariateSolver solver [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized UnivariateSolver solver double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	138	139	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError testEventsScheduling [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateSolver solver) { [BUGGY] [BUGGY] eventsStates.add(new EventState(handler, maxCheckInterval, convergence,          maxIterationCount, solver)); maxIterationCount, solver)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount UnivariateSolver solver [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized UnivariateSolver solver double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	138	139	1	add	
