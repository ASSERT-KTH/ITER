projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:eventsStates){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){if(!isLastStep){returnorderingSign*state.evaluateBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:eventsStates){event.reinitializeBegin(interpolator,orderingSign);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign==0){if(!isLastStep){for(finalEventStatestate:eventsStates){state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign==0){if(!isLastStep){for(finalEventStatestate:eventsStates){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign==0){if(!isLastStep){for(finalEventStatestate:eventsStates){state.initializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>());
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign>0){for(finalEventStatestate:eventsStates){state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign>0){for(finalEventStatestate:eventsStates){finalintstepStart=state.getStepStart();orderingSign+=state.getStepEnd();}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign>0){for(finalEventStatestate:eventsStates){finalintstepStart=state.getStepStart();orderingSign*=state.getStepEnd();}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,newComparator<EventState>());
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderingSign,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderY,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.evaluateBegin(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.getStepEnd();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.getOrder();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intorderingSign=orderingSign.isForward()?-1:0;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intorderingSign=orderingSign.isForward()?+1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=orderingSign.isForward()?+1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=orderingSign.isForward()?-1:0;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313for(finalEventStatestate:eventsStates){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313for(finalEventStatestate:eventsStates){event.resetBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.getStepStart();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign-orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(){finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>());
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(){finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(){finalSortedSet<EventState>occurredingEvents=newTreeSet<EventState>(newComparator<EventState>());
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:eventsInitialized){if(state.evaluateStep(interpolator)){continue;}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:eventsInitialized){if(state.evaluateStep(interpolator)){orderingSign+=state.evaluateStep(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign==0){if(state.evaluateStep(interpolator)){orderingSign+=state.evaluateBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign==0){if(state.evaluateStep(interpolator)){orderingSign+=state.evaluateEnd(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=es0.getOrdinal();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=eventsStates.size();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.getOrderingSign();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=0){if(!isLastStep){for(finalEventStatestate:eventsStates){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=0){if(!isLastStep){for(finalEventStatestate:eventsStates){event.reinitializeBegin(interpolator);}}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign==null){if(!isLastStep){returnorderingSign*state.evaluateBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=interpolator.isForward()?+1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>());
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=eventsStates.getOrdinal();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(){finalSortedSet<EventState>occurredingEvents=newTreeSet<EventState>(newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign+1);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,yDot,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,es1,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(),orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=0){if(!isLastStep){for(finalEventStatestate:eventsStates){state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=0){if(!isLastStep){for(finalEventStatestate:eventsStates){state.initializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign>0){for(EventStatees1:state.getSteps()){orderingSign+=es1.getTail();}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intstepStart=getStep(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=0){if(!isLastStep){for(finalEventStatestate:eventStates){state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(){finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>()){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=0){if(!isLastStep){for(finalEventStatestate:event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intorderingSign=orderingSign;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=orderingSign-0;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:statesInitialized){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(isLastStep){returnorderingSign*state.evaluateBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=0){if(!isLastStep){for(finalEventStatestate:state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313orderingSign+=state.evaluateEnd(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.evaluateEnd(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intstepStart=getStep(orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intstepStart=getStep(interpolator,orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313for(finalEventStatestate:eventsStates){event.reset();}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313for(finalEventStatestate:eventsStates){event.resetOccurred();}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=eventsStates.size()-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=events.size();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderY);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderingSign,null,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderingSign,state.evaluate());
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:eventsInitialized){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,newComparator<EventState>());
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313for(finalEventStatestate:eventsInitialized){event.resetBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.getOrdinal();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=es1.getOrdinal();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=interpolator.evaluateBegin(state);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderingSign,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderedSign,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(),orderingSign){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderY,yDot,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,yDot,tEnd,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(),orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=events.getOrdinal();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.getOrderingSign()-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.getStepEnd()-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign-orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313orderingSign+=state.getTail();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313orderingSign+=es1.getTail();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=orderingSign-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=orderSign-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intorderingSign=interpolator.isForward()?-1:0;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intorderingSign=state.isForward()?-1:0;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign+orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign-orderingSign+1);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intorderingSign=interpolator.isForward()?+1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313orderingSign+=state.evaluateBegin(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=interpolator.isForward()?-1:0;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.isForward()?-1:0;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intorderingSign=0;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intorderingSign=isLastStep;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign+2);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintisLastStep=orderSign*state.evaluateBegin(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintisLastStep=state.evaluateBegin(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=interpolator.isForward()?1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:eventsInitialized){if(state.evaluateStep(interpolator)){orderingSign+=state.evaluateStep(interpolator);}}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=interpolator.isForward()?-1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.getOrder()-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.getStepStart()-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occurredingEvents=newTreeSet<EventState>(newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=eventsInitialized.isForward()?+1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign-1);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,newComparator<EventState>(),state);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=0){if(!isFirstStep){for(finalEventStatestate:eventsStates){state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=orderingSign-2;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.getOrderingSign()+1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intstepStart=getStep(orderedSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){if(!isLastStep){returnorderSign*state.evaluateBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderStart);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:eventsInitialized){if(state.evaluateBegin(interpolator)){orderingSign+=state.evaluateStep(interpolator);}}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:eventsInitialized){if(state.evaluateBegin(interpolator)){orderingSign+=state.evaluateStep(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intorderingSign=state.isForward()?+1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintisLastStep){returnorderingSign*state.evaluateBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintisLastStep=orderingSign*state.evaluateBegin(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(yDot,orderingSign,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=this.eventsStates.size();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=this.eventsInitialized.getOrdinal();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intorderingSign=state.orderingSign;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=0){if(!isLastStep){for(finalEventStatestate:events){state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313intorderingSign=orderingSign.compareTo(state.evaluateBegin(interpolator));
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=orderingSign.compareTo(state.evaluateBegin(interpolator));
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>()){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=eventsInitialized.isForward()?-1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313for(finalEventStatestate:eventsInitialized){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=0){if(isLastStep){for(finalEventStatestate:eventsStates){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderingSign,es0,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,es0,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.evaluateBegin(remaining);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:eventsInitialized){if(state.evaluateBegin(interpolator)){continue;}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=0){if(isLastStep){for(finalEventStatestate:eventStates){state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=1){if(!isLastStep){for(finalEventStatestate:eventsStates){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.isForward()?+1:-1;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occurredingEvents=newTreeSet<EventState>(newComparator<EventState>());
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign==0){if(!isLastStep){for(finalEventStatestate:event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.evaluateAndSet(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313aughtExceptionHandler.handleEvent(es0,orderingSign,state);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderingSign+1);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313for(finalEventStatestate:statesInitialized){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=orderingSign/0;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313orderingSign+=state.evaluateStart(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign>0){returnorderingSign*state.evaluateBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313aughtExceptionHandler.handleEvent(interpolator,orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalintorderingSign=state.size();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,orderingSign,newComparator<EventState>());
