projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign,newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(orderingSign);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:eventsStates){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){if(!isLastStep){returnorderingSign*state.evaluateBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign!=null){for(finalEventStatestate:eventsStates){event.reinitializeBegin(interpolator,orderingSign);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign==0){if(!isLastStep){for(finalEventStatestate:eventsStates){state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign==0){if(!isLastStep){for(finalEventStatestate:eventsStates){event.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign==0){if(!isLastStep){for(finalEventStatestate:eventsStates){state.initializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313finalSortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>(){
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313SortedSet<EventState>occuringEvents=newTreeSet<EventState>(newComparator<EventState>());
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign>0){for(finalEventStatestate:eventsStates){state.reinitializeBegin(interpolator);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign>0){for(finalEventStatestate:eventsStates){finalintstepStart=state.getStepStart();orderingSign+=state.getStepEnd();}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java313if(orderingSign>0){for(finalEventStatestate:eventsStates){finalintstepStart=state.getStepStart();orderingSign*=state.getStepEnd();}
