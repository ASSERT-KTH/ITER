bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>());  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>());  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>());	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  new  Comparator  <  EventState>()  {  [CE]  no  suitable  constructor  found  for  TreeSet(int,int,<anonymous  Comparator<EventState>>)  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  new  Comparator  <  EventState>()  {  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  no  suitable  constructor  found  for  TreeSet(int,int,<anonymous  Comparator<EventState>>)	1	None	replace
3	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  orderY  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY,  new  Comparator  <  EventState>()  {  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  orderY	1	None	replace
4	[BUG]  [BUGGY]  final  int  orderingSign  =  state.evaluateBegin(interpolator);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  state.evaluateBegin(interpolator);  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  state.evaluateBegin(interpolator);	      if(orderingSign!=    null)    {    if(!isLastStep)    {    return    orderingSign    *    state.evaluateBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>()  {  [CE]  no  suitable  constructor  found  for  TreeSet(int,<anonymous  Comparator<EventState>>)  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>()  {  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>()  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    	non-compiled	[CE]  no  suitable  constructor  found  for  TreeSet(int,<anonymous  Comparator<EventState>>)	11	None	replace
6	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign);  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign);	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getStepEnd();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  state.getStepEnd();  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  state.getStepEnd();	      if(orderingSign    >    0)    {    for(final    EventState    state    :    eventsStates)    {    final    int    stepStart    =    state.getStepStart();    orderingSign    +=    state.getStepEnd();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
8	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getOrder();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  state.getOrder();  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  state.getOrder();	      if(orderingSign    >    0)    {    for(final    EventState    state    :    eventsStates)    {    final    int    stepStart    =    state.getStepStart();    orderingSign    +=    state.getStepEnd();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
9	[BUG]  [BUGGY]  int  orderingSign  =  orderingSign.isForward()?  -1  :  0;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  int  orderingSign  =  orderingSign.isForward()?  -1  :  0;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	int  orderingSign  =  orderingSign.isForward()?  -1  :  0;	      if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  int  orderingSign  =  orderingSign.isForward()?  +1  :  -1;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  int  orderingSign  =  orderingSign.isForward()?  +1  :  -1;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	int  orderingSign  =  orderingSign.isForward()?  +1  :  -1;	      if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  final  int  orderingSign  =  orderingSign.isForward()?  +1  :  -1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  orderingSign.isForward()?  +1  :  -1;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  orderingSign.isForward()?  +1  :  -1;	      if(orderingSign    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  final  int  orderingSign  =  orderingSign.isForward()?  -1  :  0;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  orderingSign.isForward()?  -1  :  0;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  orderingSign.isForward()?  -1  :  0;	      if(orderingSign    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	      if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.resetBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.resetBegin(interpolator);  }  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	for(final  EventState  state  :  eventsStates)  {  event.resetBegin(interpolator);  }	      if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getStepStart();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  state.getStepStart();  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  state.getStepStart();	      if(orderingSign    >    0)    {    for(final    EventState    state    :    eventsStates)    {    final    int    stepStart    =    state.getStepStart();    orderingSign    *=    state.getStepEnd();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
16	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign);  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
17	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderingSign);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderingSign);  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderingSign);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
19	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
20	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
21	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign  ==  0)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateBegin(interpolator);  }  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign  ==  0)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateBegin(interpolator);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateEnd(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign  ==  0)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateEnd(interpolator);  }  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign  ==  0)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateEnd(interpolator);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  final  int  orderingSign  =  es0.getOrdinal();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  es0.getOrdinal();  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  es0.getOrdinal();	      if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  final  int  orderingSign  =  eventsStates.size();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  eventsStates.size();  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  eventsStates.size();	      if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getOrderingSign();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  state.getOrderingSign();  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  state.getOrderingSign();	      if(orderingSign    >    0)    {    for(final    EventState    state    :    eventsStates)    {    final    int    stepStart    =    state.getStepStart();    orderingSign    *=    state.getStepEnd();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
28	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	      if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	      if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
30	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  if(!isLastStep)  {  return  orderingSign  *  state.evaluateBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign  ==  null)  {  if(!isLastStep)  {  return  orderingSign  *  state.evaluateBegin(interpolator);  }  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign  ==  null)  {  if(!isLastStep)  {  return  orderingSign  *  state.evaluateBegin(interpolator);  }	      if(orderingSign!=    null)    {    if(!isLastStep)    {    return    orderingSign    *    state.evaluateBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  +1  :  -1;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  +1  :  -1;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  interpolator.isForward()?  +1  :  -1;	      if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator,    orderingSign);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
33	[BUG]  [BUGGY]  final  int  orderingSign  =  eventsStates.getOrdinal();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  eventsStates.getOrdinal();  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  eventsStates.getOrdinal();	      if(orderingSign    >    0)    {    for(final    EventState    state    :    eventsStates)    {    final    int    stepStart    =    state.getStepStart();    orderingSign    +=    state.getStepEnd();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
34	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
35	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  1);  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  yDot,  new  Comparator  <  EventState>()  {  [CE]  no  suitable  constructor  found  for  TreeSet(int,double[],<anonymous  Comparator<EventState>>)  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  yDot,  new  Comparator  <  EventState>()  {  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  yDot,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  no  suitable  constructor  found  for  TreeSet(int,double[],<anonymous  Comparator<EventState>>)	1	None	replace
37	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es1,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  es1  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es1,  new  Comparator  <  EventState>()  {  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es1,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  es1	1	None	replace
38	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign);  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	      if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.initializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.initializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.initializeBegin(interpolator);  }  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.initializeBegin(interpolator);  }	      if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.initializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  if(orderingSign  >  0)  {  for(EventState  es1  :  state.getSteps())  {  orderingSign  +=  es1.getTail();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign  >  0)  {  for(EventState  es1  :  state.getSteps())  {  orderingSign  +=  es1.getTail();  }  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign  >  0)  {  for(EventState  es1  :  state.getSteps())  {  orderingSign  +=  es1.getTail();  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
42	[BUG]  [BUGGY]  int  stepStart  =  getStep(interpolator);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  int  stepStart  =  getStep(interpolator);  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	int  stepStart  =  getStep(interpolator);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
43	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }	      if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>())  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>())  {  [BUGGY]      public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>())  {	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
45	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }	      if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
46	[BUG]  [BUGGY]  int  orderingSign  =  orderingSign;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  int  orderingSign  =  orderingSign;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	int  orderingSign  =  orderingSign;	      if(orderingSign    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
47	[BUG]  [BUGGY]  final  int  orderingSign  =  orderingSign  -  0;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  final  int  orderingSign  =  orderingSign  -  0;  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	final  int  orderingSign  =  orderingSign  -  0;	      if(orderingSign    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
48	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  statesInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  statesInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(orderingSign!=  null)  {  for(final  EventState  state  :  statesInitialized)  {  event.reinitializeBegin(interpolator);  }	      if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
49	[BUG]  [BUGGY]  if(isLastStep)  {  return  orderingSign  *  state.evaluateBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;    [BUGGY]  if(isLastStep)  {  return  orderingSign  *  state.evaluateBegin(interpolator);  }  [BUGGY]    SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.3333333333333333	313	313	1	replace	if(isLastStep)  {  return  orderingSign  *  state.evaluateBegin(interpolator);  }	      if(orderingSign!=    null)    {    if(!isLastStep)    {    return    orderingSign    *    state.evaluateBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
