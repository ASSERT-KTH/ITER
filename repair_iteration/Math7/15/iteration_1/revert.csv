projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.reinitializeBegin(currentT);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.reinitializeBegin(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.reinitializeBegin(previousT);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(previousT>t){if(state.isForward()){continue;}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(previousT>t){if(state.isForward()){orderingSign=true;}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(currentT>tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT*currentT,remaining);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(currentT>tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT,remaining);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(currentT>tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT*currentT);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.reinitializeBegin(previousT,currentT);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.initializeBegin(previousT);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.removeBegin(previousT);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.reinitializeBegin(currentT,previousT);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.reinitializeBegin(interpolator,previousT);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307orderingSign=true;
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT,remaining);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(previousT>tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT,previousT);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307t>previousT){if(state.isForward()){continue;}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT*currentT,remaining);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(previousT>tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT*currentT,remaining);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.reinitializeBegin(interpolator);state.reinitializeBegin(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.reinitializeBegin(interpolator);state.reinitializeEnd(interpolator);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT*currentT);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(previousT>tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT*currentT);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.reinitializeBegin(interpolator);state.reinitializeAndSet(currentT,currentT);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307lastCheckInterval*tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT*currentT);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307previousT>t&&state.isForward()){orderingSign=true;}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307Preconditions.checkState(previousT>=t);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.reinitializeBegin(expandableODE,currentT);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307t0>tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT*currentT,remaining);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307t0>tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(currentT*currentT,remaining);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.reset();
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.initialize(previousT,currentT);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307lastCheckInterval*tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT,remaining);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307previousT>tEnd){if(state.isForward()){orderingSign=true;}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307state.initialize(currentT,currentT);
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(t>previousT){if(state.isForward()){continue;}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(previousT>currentT){if(state.isForward()){continue;}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(currentT*currentT);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(remainingT>tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT*currentT,remaining);}
projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java307if(remainingT>tEnd){for(EventStateremaining:state.getRemaining()){returnorderingSign*State.compare(remainingT,previousT);}
