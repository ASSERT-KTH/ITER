bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stop();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	add	state.stop();	  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,    y);    	compilable	  [FE]  AssertionError  	14	2	replace
2	[BUG]  [BUGGY]  state.stop();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stop();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stop();	  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,    y);    	compilable	  [FE]  AssertionError  	14	2	replace
3	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  2);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  2);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  2);	  state.stepAccepted(currentT,    tEnd,    yDot,    1);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	1	None	replace
4	[BUG]  [BUGGY]  state.stepAccepted(currentT,  y,  tEnd,  1);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  y,  tEnd,  1);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  y,  tEnd,  1);	  state.stepAccepted(currentT,    tStart,    tEnd,    1);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	27	None	replace
5	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();  [CE]  cannot  find  symbol  eventsInitialized  [FE]        AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();	          Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	8	None	replace
6	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.iterator();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  state.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  <  EventState>  iterator  =  state.iterator();	          Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
7	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tStart);  [CE]  cannot  find  symbol  tStart  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tStart);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tStart);	  state.stepAccepted(currentT,    y);    State    state.stepAccepted(currentT,    y);    	non-compiled	[CE]  cannot  find  symbol  tStart	16	None	replace
8	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  orderingSign,  isLastStep);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  orderingSign,  isLastStep);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  orderingSign,  isLastStep);	  state.stepAccepted(currentT,    tEnd,    yDot,    orderingSign);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	23	None	replace
9	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  orderingSign,  yDot);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  orderingSign,  yDot);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  orderingSign,  yDot);	  state.stepAccepted(currentT,    tEnd,    yDot,    orderingSign);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	23	None	replace
10	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  currentY,  tEnd);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  currentY,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  currentY,  tEnd);	  state.stepAccepted(currentT,    tEnd,    yDot,    tEnd);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	22	None	replace
11	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  currentY);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  currentY);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  currentY);	  state.stepAccepted(currentT,    tEnd,    yDot,    tEnd);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	22	None	replace
12	[BUG]  [BUGGY]  State.stepAccepted(currentT,  tEnd);  [CE]  cannot  find  symbol  State  [FE]          AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  State.stepAccepted(currentT,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	State.stepAccepted(currentT,  tEnd);	  state.stepAccepted(currentT,    y);    State.stepAccepted(currentT,    y);    	non-compiled	[CE]  cannot  find  symbol  State	15	None	replace
13	[BUG]  [BUGGY]  state.stepAccepted(currentT,  t0,  1);  [CE]  cannot  find  symbol  t0  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  t0,  1);  [BUGGY]      state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  t0,  1);	  state.stepAccepted(currentT,    yEnd,    1);    	non-compiled	[CE]  cannot  find  symbol  t0	21	None	replace
14	[BUG]  [BUGGY]  state.stepAccepted(currentT,  y,  tEnd);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  y,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  y,  tEnd);	  state.stepAccepted(currentT,    t0,    tEnd);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	6	None	replace
15	[BUG]  [BUGGY]  int  tEnd  =  state.getTip()  +  1;  [CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  int  tEnd  =  state.getTip()  +  1;  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	int  tEnd  =  state.getTip()  +  1;	          int    tEnd    =    state.getTip();    	non-compiled	[CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	24	None	replace
16	[BUG]  [BUGGY]  Iterator  iterator  =  state.eventsInitialized.iterator();  [CE]  cannot  find  symbol  eventsInitialized  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  iterator  =  state.eventsInitialized.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  iterator  =  state.eventsInitialized.iterator();	  Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	19	None	replace
17	[BUG]  [BUGGY]  Iterator  iterator  =  state.eventsStates.iterator();  [CE]  cannot  find  symbol  eventsStates  [FE]      AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  iterator  =  state.eventsStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  iterator  =  state.eventsStates.iterator();	  Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsStates	19	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	add	state.stepAccepted(currentT,        y);        state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);	  	compilable	  [FE]  AssertionError  	13	1	add
19	[BUG]  [BUGGY]  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,        y);        state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);	  	compilable	  [FE]  AssertionError  	13	1	add
20	[BUG]  [BUGGY]  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  tEnd);  state.stepAccepted(currentT,  y);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  tEnd);  state.stepAccepted(currentT,  y);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,        y);        state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  tEnd);  state.stepAccepted(currentT,  y);	  	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	13	None	add
21	[BUG]  [BUGGY]  Iterator  iterator  =  eventsStates.iterator();  Iterator  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  iterator  =  eventsStates.iterator();  Iterator  iterator  =  eventsStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator    iterator    =    eventsStates.iterator();    Iterator  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	18	None	add
22	[BUG]  [BUGGY]  Iterator  iterator  =  eventsStates.iterator();  Iterator  iterator  =  eventStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  iterator  =  eventsStates.iterator();  Iterator  iterator  =  eventStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator    iterator    =    eventsStates.iterator();    Iterator  iterator  =  eventStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	18	None	add
23	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  y,  orderingSign,  isLastStep);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  y,  orderingSign,  isLastStep);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  y,  orderingSign,  isLastStep);	  state.stepAccepted(currentT,    tEnd,    y,    orderingSign);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	10	None	replace
24	[BUG]  [BUGGY]  state.stepAccepted(currentY,  t);  [CE]  cannot  find  symbol  t  [FE]        AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentY,  t);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentY,  t);	  state.stepAccepted(t0,    y);    	non-compiled	[CE]  cannot  find  symbol  t	12	None	replace
25	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]          AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(tEnd,  y);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	add	state.stepAccepted(tEnd,  y);	  state.stepAccepted(t0,    y);    	compilable	  [FE]  NumberIsTooLargeException  	12	3	replace
26	[BUG]  [BUGGY]  state.stepAccepted(tEnd,  y);  [FE]  NumberIsTooLargeException  [FE]          AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(tEnd,  y);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(tEnd,  y);	  state.stepAccepted(t0,    y);    	compilable	  [FE]  NumberIsTooLargeException  	12	3	replace
27	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	4	None	add
28	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	4	None	add
29	[BUG]  [BUGGY]  EventState  tEnd  =  state.getCurrentTarget();  [CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]          AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  EventState  tEnd  =  state.getCurrentTarget();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	EventState  tEnd  =  state.getCurrentTarget();	          EventState    tEnd    =    state.getTarget();    	non-compiled	[CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	25	None	replace
30	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.getEventStates().iterator();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  state.getEventStates().iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  <  EventState>  iterator  =  state.getEventStates().iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
31	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  stateInitialized.eventsInitialized();  [CE]  cannot  find  symbol  stateInitialized  [FE]        AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  stateInitialized.eventsInitialized();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  <  EventState>  iterator  =  stateInitialized.eventsInitialized();	          Iterator    <    EventState>    iterator    =    state.eventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	20	None	replace
32	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tStart,  y,  1);  [CE]  cannot  find  symbol  tStart  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tStart,  y,  1);  [BUGGY]      state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tStart,  y,  1);	  state.stepAccepted(currentT,    y,    1);    	non-compiled	[CE]  cannot  find  symbol  tStart	9	None	replace
33	[BUG]  [BUGGY]  int  tEnd  =  state.stop()  -  1;  [CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  int  tEnd  =  state.stop()  -  1;  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	int  tEnd  =  state.stop()  -  1;	          int    tEnd    =    state.stop();    	non-compiled	[CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	26	None	replace
34	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Ilerator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Ilerator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Ilerator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
35	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsIterator();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsIterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  <  EventState>  iterator  =  state.eventsIterator();	          Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
36	[BUG]  [BUGGY]  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  State  state  =  state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  State  state  =  state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,        y);        state.stepAccepted(currentT,    y);    State  state  =  state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
37	[BUG]  [BUGGY]  Iterator  iterator  =  eventsStates.iterator();  Iteratoriterator  iterator  =  eventsStates.iterator();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  iterator  =  eventsStates.iterator();  Iteratoriterator  iterator  =  eventsStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator    iterator    =    eventsStates.iterator();    Iteratoriterator  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
38	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsStates.iterator();  [CE]  cannot  find  symbol  eventsStates  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  <  EventState>  iterator  =  state.eventsStates.iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsStates	5	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	add	Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	compilable	  [FE]  AssertionError  	5	2	replace
40	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	compilable	  [FE]  AssertionError  	5	2	replace
41	[BUG]  [BUGGY]  int  tEnd  =  state.stop()  +  1;  [CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  int  tEnd  =  state.stop()  +  1;  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	int  tEnd  =  state.stop()  +  1;	          int    tEnd    =    state.stop();    	non-compiled	[CE]  variable  tEnd  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	26	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  iterator  =  this.eventsStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	add	Iterator  iterator  =  this.eventsStates.iterator();	  Iterator    iterator    =    eventsStates.iterator();    	compilable	  [FE]  AssertionError  	19	2	replace
43	[BUG]  [BUGGY]  Iterator  iterator  =  this.eventsStates.iterator();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  iterator  =  this.eventsStates.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  iterator  =  this.eventsStates.iterator();	  Iterator    iterator    =    eventsStates.iterator();    	compilable	  [FE]  AssertionError  	19	2	replace
44	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  y,  currentY,  orderingSign);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  y,  currentY,  orderingSign);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  y,  currentY,  orderingSign);	  state.stepAccepted(currentT,    tEnd,    y,    orderingSign);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	10	None	replace
45	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  y,  orderingEvents);  [CE]  cannot  find  symbol  orderingEvents  [FE]              AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  y,  orderingEvents);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  y,  orderingEvents);	  state.stepAccepted(currentT,    tEnd,    y,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol  orderingEvents	10	None	replace
46	[BUG]  [BUGGY]  state.stepAccepted(currentY,  y);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentY,  y);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentY,  y);	  state.stepAccepted(t0,    y);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	12	None	replace
47	[BUG]  [BUGGY]  state.stepAccepted(y,  tEnd);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(y,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(y,  tEnd);	  state.stepAccepted(t0,    y);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	12	None	replace
48	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  currentY,  orderingSign);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  currentY,  orderingSign);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  currentY,  orderingSign);	  state.stepAccepted(currentT,    tEnd,    yDot,    orderingSign);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	23	None	replace
49	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  orderingEvents);  [CE]  cannot  find  symbol  orderingEvents  [FE]                AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  orderingEvents);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  orderingEvents);	  state.stepAccepted(currentT,    tEnd,    yDot,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol  orderingEvents	23	None	replace
50	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tStart,  0);  [CE]  cannot  find  symbol  tStart  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tStart,  0);  [BUGGY]      state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tStart,  0);	  state.stepAccepted(currentT,    tEnd,    0);    	non-compiled	[CE]  cannot  find  symbol  tStart	17	None	replace
51	[BUG]  [BUGGY]  EventState  tStart  =  state.getTarget();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  EventState  tStart  =  state.getTarget();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	EventState  tStart  =  state.getTarget();	          EventState    tEnd    =    state.getTarget();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
52	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.events.iterator();  [CE]  cannot  find  symbol  events  [FE]        AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  state.events.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  <  EventState>  iterator  =  state.events.iterator();	          Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	8	None	replace
53	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator());  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator());  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventsStates.iterator());	  	non-compiled	[CE]  ';'  expected	4	None	add
54	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.statesInitialized.iterator();  [CE]  cannot  find  symbol  statesInitialized  [FE]        AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  Iterator  <  EventState>  iterator  =  state.statesInitialized.iterator();  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	Iterator  <  EventState>  iterator  =  state.statesInitialized.iterator();	  Iterator    <    EventState>    iterator    =    eventsInitialized.iterator();    	non-compiled	[CE]  cannot  find  symbol  statesInitialized	3	None	replace
55	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  y,  t1,  orderingSign);  [CE]  cannot  find  symbol  t1  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  y,  t1,  orderingSign);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  y,  t1,  orderingSign);	  state.stepAccepted(currentT,    tEnd,    y,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol  t1	10	None	replace
56	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  tEnd,  orderingSign);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  tEnd,  orderingSign);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  tEnd,  orderingSign);	  state.stepAccepted(currentT,    tEnd,    y,    orderingSign);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	10	None	replace
57	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  remaining);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  remaining);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  remaining);	  state.stepAccepted(currentT,    tEnd,    yDot);    	non-compiled	[CE]  cannot  find  symbol  remaining	11	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	add	state.stepAccepted(currentT,        y);        state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);	  	compilable	  [FE]  AssertionError  	13	1	add
59	[BUG]  [BUGGY]  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);  state.stepAccepted(currentT,  y);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,        y);        state.stepAccepted(currentT,    y);    state.stepAccepted(currentT,  y);	  	compilable	  [FE]  AssertionError  	13	1	add
60	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tStart,  yDot,  orderingSign);  [CE]  cannot  find  symbol  tStart  [FE]              AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tStart,  yDot,  orderingSign);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tStart,  yDot,  orderingSign);	  state.stepAccepted(currentT,    tEnd,    yDot,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol  tStart	23	None	replace
61	[BUG]  [BUGGY]  state.stepAccepted(currentT,  t0,  tEnd,  0);  [CE]  cannot  find  symbol  t0  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  t0,  tEnd,  0);  [BUGGY]      state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  t0,  tEnd,  0);	  state.stepAccepted(currentT,    tEnd,    0);    	non-compiled	[CE]  cannot  find  symbol  t0	17	None	replace
62	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  0);  [CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tEnd,  yDot,  0);  [BUGGY]      state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tEnd,  yDot,  0);	  state.stepAccepted(currentT,    tEnd,    0);    	non-compiled	[CE]  method  stepAccepted  in  class  EventState  cannot  be  applied  to  given  types;	17	None	replace
63	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tStart,  yDot,  tEnd);  [CE]  cannot  find  symbol  tStart  [FE]            AssertionError      [CONTEXT]        occuringEvents.add(currentEvent);  }  }  interpolator.setInterpolatedTime(currentT);  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {      [BUGGY]  state.stepAccepted(currentT,  tStart,  yDot,  tEnd);  [BUGGY]      isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  }  return  currentT;  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5	393	393	1	replace	state.stepAccepted(currentT,  tStart,  yDot,  tEnd);	  state.stepAccepted(currentT,    tEnd,    yDot,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  tStart	22	None	replace
