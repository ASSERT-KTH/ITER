bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  stateInitialized  =  state.convert(eventT,  y);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  stateInitialized  =  state.convert(eventT,  y);  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  state.convert(eventT,  y);	      stateInitialized    =    stateInitialized.convert(eventT,    y);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  stateInitialized  =  currentEvent.convert(eventT,  y);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  stateInitialized  =  currentEvent.convert(eventT,  y);  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  currentEvent.convert(eventT,  y);	      stateInitialized    =    stateInitialized.convert(eventT,    y);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    return    eventT;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
4	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    return    eventT;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
5	[BUG]  [BUGGY]  for(final  EventState  eventT  :  occuringEvents)  {  currentT  =  eventT;  }  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  eventT  :  occuringEvents)  {  currentT  =  eventT;  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  occuringEvents)  {  currentT  =  eventT;  }	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    currentT    =    eventT;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
6	[BUG]  [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  currentT  =  eventT;  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  currentT  =  eventT;  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  eventsInitialized)  {  currentT  =  eventT;  }	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    currentT    =    eventT;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  for(final  EventState  eventT  :  remaining.events)  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  eventT  :  remaining.events)  {  [BUGGY]    remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  remaining.events)  {	  for(final    EventState    remaining    :    eventT.events)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	12	None	replace
8	[BUG]  [BUGGY]  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
9	[BUG]  [BUGGY]  for(final  EventState  remaining  :  occuringEvents)  {  remainder.stepAccepted(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  remaining  :  occuringEvents)  {  remainder.stepAccepted(eventT,  eventY);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  occuringEvents)  {  remainder.stepAccepted(eventT,  eventY);  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  stateInitialized  =  isLastStep  ||  stateInitialized.isLastStep();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  stateInitialized  =  isLastStep  ||  stateInitialized.isLastStep();  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  isLastStep  ||  stateInitialized.isLastStep();	      stateInitialized    =    stateInitialized    ||    stateInitialized.isLastStep();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  for(final  EventState  remaining  :  stateInitialized)  {  [CE]  cannot  find  symbol  stateInitialized  [FE]          AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  remaining  :  stateInitialized)  {  [BUGGY]    remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  stateInitialized)  {	  for(final    EventState    remaining    :    eventStates)    {    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	5	None	replace
12	[BUG]  [BUGGY]  for(final  EventState  remaining  :  eventStates.values())  {  [CE]  cannot  find  symbol  eventStates  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  remaining  :  eventStates.values())  {  [BUGGY]    remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  eventStates.values())  {	  for(final    EventState    remaining    :    eventStates)    {    	non-compiled	[CE]  cannot  find  symbol  eventStates	5	None	replace
13	[BUG]  [BUGGY]  for(final  EventState  eventT  :  occuringEvents)  {  interpolator.setInitialized(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  eventT  :  occuringEvents)  {  interpolator.setInitialized(eventT,  eventY);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  occuringEvents)  {  interpolator.setInitialized(eventT,  eventY);  }	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
14	[BUG]  [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  eventY);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  eventY);  }	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
15	[BUG]  [BUGGY]  stateInitialized  =  currentEvent.getInitialized();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  stateInitialized  =  currentEvent.getInitialized();  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  currentEvent.getInitialized();	      stateInitialized    =    stateInitialized.getInitialized();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
16	[BUG]  [BUGGY]  stateInitialized  =  state.getInitialized();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  stateInitialized  =  state.getInitialized();  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  state.getInitialized();	      stateInitialized    =    stateInitialized.getInitialized();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
17	[BUG]  [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  false);  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  false);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  false);  }	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    false);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
18	[BUG]  [BUGGY]  for(final  EventState  eventT  :  occuringEvents)  {  interpolator.setInitialized(eventT,  false);  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  eventT  :  occuringEvents)  {  interpolator.setInitialized(eventT,  false);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  occuringEvents)  {  interpolator.setInitialized(eventT,  false);  }	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    false);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
19	[BUG]  [BUGGY]  for(final  EventState  eventT  :  events)  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  eventT  :  events)  {  [BUGGY]    remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  events)  {	  for(final    EventState    remaining    :    events)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	4	None	replace
20	[BUG]  [BUGGY]  for(final  EventState  remaining  :  currentEvents)  {  [CE]  cannot  find  symbol  currentEvents  [FE]          AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  remaining  :  currentEvents)  {  [BUGGY]    remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  currentEvents)  {	  for(final    EventState    remaining    :    eventStates)    {    	non-compiled	[CE]  cannot  find  symbol  currentEvents	5	None	replace
21	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  false);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  false);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  false);  }	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    false);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	11	None	replace
22	[BUG]  [BUGGY]  for(final  EventState  remaining  :  currentEvent.events)  {  [CE]  cannot  find  symbol  events  [FE]        AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  remaining  :  currentEvent.events)  {  [BUGGY]    remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  currentEvent.events)  {	  for(final    EventState    remaining    :    eventT.events)    {    	non-compiled	[CE]  cannot  find  symbol  events	12	None	replace
23	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  currentT  =  eventT;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]        AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  currentT  =  eventT;  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  currentT  =  eventT;  }	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    currentT    =    eventT;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	9	None	replace
24	[BUG]  [BUGGY]  stateInitialized  =  stateInitialized.convert(eventT,  yDot);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  stateInitialized  =  stateInitialized.convert(eventT,  yDot);  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  stateInitialized.convert(eventT,  yDot);	      stateInitialized    =    stateInitialized.convert(eventT,    y);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
25	[BUG]  [BUGGY]  stateInitialized  =  stateInitialized.convert(eventT,  tEnd);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  stateInitialized  =  stateInitialized.convert(eventT,  tEnd);  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  stateInitialized.convert(eventT,  tEnd);	      stateInitialized    =    stateInitialized.convert(eventT,    y);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(isLastStep)  {  for(final  EventState  remaining  :  eventsInitialized)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  Preconditions.checkState(isLastStep)  {  for(final  EventState  remaining  :  eventsInitialized)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Preconditions.checkState(isLastStep)  {  for(final  EventState  remaining  :  eventsInitialized)  {  remaining.stepAccepted(eventT,  eventY);  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(isLastStep)  {  for(final  EventState  remaining  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  Preconditions.checkState(isLastStep)  {  for(final  EventState  remaining  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Preconditions.checkState(isLastStep)  {  for(final  EventState  remaining  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
28	[BUG]  [BUGGY]  stateInitialized  =  isLastStep;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  stateInitialized  =  isLastStep;  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  isLastStep;	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  stateInitialized  =  stateInitialized;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  stateInitialized  =  stateInitialized;  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  stateInitialized;	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  eventY);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  eventY);  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  eventY);	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
31	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.setInitialized(eventT,  eventY);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.setInitialized(eventT,  eventY);  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  interpolator.setInitialized(eventT,  eventY);	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
32	[BUG]  [BUGGY]  for(final  EventState  eventT  :  eventStates)  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]          AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  eventT  :  eventStates)  {  [BUGGY]    remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  eventStates)  {	  for(final    EventState    remaining    :    eventStates)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	5	None	replace
33	[BUG]  [BUGGY]  for(final  EventState  eventT  :  eventT.events)  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  for(final  EventState  eventT  :  eventT.events)  {  [BUGGY]    remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  eventT.events)  {	  for(final    EventState    remaining    :    eventT.events)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	12	None	replace
34	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  stateInitialized)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  cannot  find  symbol  stateInitialized  [FE]        AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  stateInitialized)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	if(isLastStep)  {  for(final  EventState  remaining  :  stateInitialized)  {  remaining.stepAccepted(eventT,  eventY);  }	      if(isLastStep)    {    for(final    EventState    remaining    :    eventsInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    return    eventT;    }    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	6	None	replace
35	[BUG]  [BUGGY]  currentT  =  eventT;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  currentT  =  eventT;  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	currentT  =  eventT;	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    currentT    =    eventT;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
36	[BUG]  [BUGGY]  interpolator.setInitialized(eventT,  false);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  interpolator.setInitialized(eventT,  false);  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	interpolator.setInitialized(eventT,  false);	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    false);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
37	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  false);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;    [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  false);  [BUGGY]    for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  false);	      if(eventT!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    false);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
