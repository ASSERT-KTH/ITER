bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  stateInitialized  =  currentEvent.convert(eventT,  yDot);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  currentEvent.convert(eventT,  yDot);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  currentEvent.convert(eventT,  yDot);	  stateInitialized    =    currentEvent.convert(eventT,    y);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  stateInitialized  =  needReset;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  needReset;  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  needReset;	  stateInitialized    =    stateInitialized;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
3	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  cannot  find  symbol  remaining  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	if(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }	  if(isLastStep)    {    for(final    EventState    remaining    :    stateInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  cannot  find  symbol  remaining	34	None	replace
4	[BUG]  [BUGGY]  For(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  For(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	For(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }	  if(isLastStep)    {    for(final    EventState    remaining    :    stateInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
5	[BUG]  [BUGGY]  for(final  EventState  remaining  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }	  Preconditions.checkState(isLastStep)    {    for(final    EventState    remaining    :    existingEvents)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
6	[BUG]  [BUGGY]  for(final  EventState  eventT  :  events)  {  interpolator.setInitialized(eventT,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  events)  {  interpolator.setInitialized(eventT,  false);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  events)  {  interpolator.setInitialized(eventT,  false);  }	  for(final    EventState    eventT    :    occuringEvents)    {    interpolator.setInitialized(eventT,    false);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Preconditions.checkState(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Preconditions.checkState(isLastStep)  {  for(final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }	  Preconditions.checkState(isLastStep)    {    for(final    EventState    remaining    :    eventsInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
8	[BUG]  [BUGGY]  for(final  EventState  remaining  :  currentEvent.getState())  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  currentEvent.getState())  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  currentEvent.getState())  {	  for(final    EventState    remaining    :    stateInitialized)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
9	[BUG]  [BUGGY]  for(final  EventState  eventT  :  events.values())  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  events.values())  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  events.values())  {	  for(final    EventState    remaining    :    eventStates.values())    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	12	None	replace
10	[BUG]  [BUGGY]  for(final  EventState  other  :  eventStates.values())  {  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  other  :  eventStates.values())  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  other  :  eventStates.values())  {	  for(final    EventState    remaining    :    eventStates.values())    {    	non-compiled	[CE]  cannot  find  symbol  eventStates	12	None	replace
11	[BUG]  [BUGGY]  currentT  =  tEnd;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  currentT  =  tEnd;  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	currentT  =  tEnd;	  currentT    =    eventT;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
12	[BUG]  [BUGGY]  currentT  =  previousT;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  currentT  =  previousT;  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	currentT  =  previousT;	  currentT    =    eventT;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
13	[BUG]  [BUGGY]  stateInitialized  =  needsReset;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  needsReset;  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  needsReset;	  stateInitialized    =    isLastStep;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
14	[BUG]  [BUGGY]  for(final  EventState  eventT  :  stateInitialized)  {  interpolator.setInitialized(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  stateInitialized)  {  interpolator.setInitialized(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  stateInitialized)  {  interpolator.setInitialized(eventT,  eventY);  }	  for(final    EventState    eventT    :    occuringEvents)    {    interpolator.setInitialized(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
15	[BUG]  [BUGGY]  for(final  EventState  eventT  :  currentEvent.events)  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  currentEvent.events)  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  currentEvent.events)  {	  for(final    EventState    remaining    :    currentEvent.events)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	22	None	replace
16	[BUG]  [BUGGY]  for(final  EventState  eventT  :  events)  {  interpolator.setInitialized(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  events)  {  interpolator.setInitialized(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  events)  {  interpolator.setInitialized(eventT,  eventY);  }	  for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
17	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.setInitialized(eventT,  y);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.setInitialized(eventT,  y);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  interpolator.setInitialized(eventT,  y);	  Interpolator    <    EventState>    interpolator    =    interpolator.setInitialized(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
18	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.setInitialized(eventT,  yDot);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.setInitialized(eventT,  yDot);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  interpolator.setInitialized(eventT,  yDot);	  Interpolator    <    EventState>    interpolator    =    interpolator.setInitialized(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
19	[BUG]  [BUGGY]  for(final  EventState  eventT  :  currentEvents)  {  currentT  =  eventT;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  currentEvents)  {  currentT  =  eventT;  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  currentEvents)  {  currentT  =  eventT;  }	  for(final    EventState    eventT    :    occuringEvents)    {    currentT    =    eventT;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  currentT  =  eventT;  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  currentT  =  eventT;  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	if(events!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  currentT  =  eventT;  }	  if(eventsInitialized!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    currentT    =    eventT;    }    	non-compiled	[CE]  cannot  find  symbol  events	23	None	replace
21	[BUG]  [BUGGY]  for(final  EventState  remaining  :  events)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  events)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  events)  {  remaining.stepAccepted(eventT,  eventY);  }	  for(final    EventState    remaining    :    occuringEvents)    {    remaining.stepAccepted(eventT,    eventY);    }    return    eventT;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  for(final  EventState  remaining  :  events)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  events)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  events)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }	  for(final    EventState    remaining    :    occuringEvents)    {    remaining.stepAccepted(eventT,    eventY);    }    return    eventT;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  true);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  true);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  true);  }	  for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    false);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
24	[BUG]  [BUGGY]  for(final  EventState  eventT  :  remaining.stepAccepted(eventT,  eventY))  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  remaining.stepAccepted(eventT,  eventY))  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  remaining.stepAccepted(eventT,  eventY))  {	  for(final    EventState    eventT    :    eventStates)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	32	None	replace
25	[BUG]  [BUGGY]  for(final  EventState  eventT  :  remaining.stepHandlers)  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  remaining.stepHandlers)  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  remaining.stepHandlers)  {	  for(final    EventState    eventT    :    eventStates)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	32	None	replace
26	[BUG]  [BUGGY]  for(final  EventState  eventT  :  other.events)  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  other.events)  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  other.events)  {	  for(final    EventState    eventT    :    remaining.events)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	7	None	replace
27	[BUG]  [BUGGY]  for(final  EventState  remaining  :  events)  {  remainder.stepAccepted(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  events)  {  remainder.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  events)  {  remainder.stepAccepted(eventT,  eventY);  }	  for(final    EventState    remaining    :    occuringEvents)    {    remainder.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  for(final  EventState  remaining  :  eventStates)  {  remainder.stepAccepted(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  eventStates)  {  remainder.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  eventStates)  {  remainder.stepAccepted(eventT,  eventY);  }	  for(final    EventState    remaining    :    occuringEvents)    {    remainder.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
29	[BUG]  [BUGGY]  for(final  EventState  remaining  :  eventsInitialized)  {  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  eventsInitialized)  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  eventsInitialized)  {	  for(final    EventState    remaining    :    currentEvents)    {    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	20	None	replace
30	[BUG]  [BUGGY]  stateInitialized  =  stateInitialized.convert(eventT,  t0);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  stateInitialized.convert(eventT,  t0);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  stateInitialized.convert(eventT,  t0);	  stateInitialized    =    stateInitialized.convert(eventT,    tEnd);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
31	[BUG]  [BUGGY]  for(final  EventState  eventT  :  remaining.stepAccepted(eventT,  previousT))  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  remaining.stepAccepted(eventT,  previousT))  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  remaining.stepAccepted(eventT,  previousT))  {	  for(final    EventState    eventT    :    events)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	19	None	replace
32	[BUG]  [BUGGY]  for(final  EventState  eventT  :  this.events)  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  this.events)  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  this.events)  {	  for(final    EventState    eventT    :    events)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	19	None	replace
33	[BUG]  [BUGGY]  for(final  EventState  remaining  :  eventStates)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  eventStates)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  eventStates)  {  remaining.stepAccepted(eventT,  eventY);  }	  for(final    EventState    remaining    :    occuringEvents)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  yDot);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  yDot);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  yDot);	  Interpolator    <    EventState>    interpolator    =    interpolator.getInitialized(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
35	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  y);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  y);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  y);	  Interpolator    <    EventState>    interpolator    =    interpolator.getInitialized(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
36	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  true);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  true);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  true);	  Interpolator    <    EventState>    interpolator    =    interpolator.getInitialized(eventT,    false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
37	[BUG]  [BUGGY]  interpolator.setInitialized(eventT,  true);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  interpolator.setInitialized(eventT,  true);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	interpolator.setInitialized(eventT,  true);	  interpolator.setInitialized(eventT,    false);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
38	[BUG]  [BUGGY]  stateInitialized  =  state.convert(eventT,  tEnd);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  state.convert(eventT,  tEnd);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  state.convert(eventT,  tEnd);	  stateInitialized    =    state.convert(eventT,    y);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
39	[BUG]  [BUGGY]  stateInitialized  =  state.convert(eventT,  y  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  state.convert(eventT,  y  +  1);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  state.convert(eventT,  y  +  1);	  stateInitialized    =    state.convert(eventT,    y);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
40	[BUG]  [BUGGY]  stateInitialized  =  isLastStep  &&  stateInitialized.isLastStep();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  isLastStep  &&  stateInitialized.isLastStep();  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  isLastStep  &&  stateInitialized.isLastStep();	  stateInitialized    =    isLastStep    ||    stateInitialized.isLastStep();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  stateInitialized  =  stateInitialized.convert(eventT,  yEnd);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  stateInitialized.convert(eventT,  yEnd);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  stateInitialized.convert(eventT,  yEnd);	  stateInitialized    =    stateInitialized.convert(eventT,    yDot);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
42	[BUG]  [BUGGY]  for(final  EventState  eventT  :  remaining.eventStates)  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  remaining.eventStates)  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  remaining.eventStates)  {	  for(final    EventState    eventT    :    eventStates)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	32	None	replace
43	[BUG]  [BUGGY]  for(final  EventState  eventT  :  currentEvent.getEventStates())  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  currentEvent.getEventStates())  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  currentEvent.getEventStates())  {	  for(final    EventState    eventT    :    eventStates)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	32	None	replace
44	[BUG]  [BUGGY]  for(final  EventState  eventT  :  currentEvents)  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  currentEvents)  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  currentEvents)  {	  for(final    EventState    eventT    :    events)    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	19	None	replace
45	[BUG]  [BUGGY]  stateInitialized  =  state.getState();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  state.getState();  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  state.getState();	  stateInitialized    =    state.getInitialized();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
46	[BUG]  [BUGGY]  for(final  EventState  remaining  :  this.events.values())  {  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  this.events.values())  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  this.events.values())  {	  for(final    EventState    remaining    :    eventStates.values())    {    	non-compiled	[CE]  cannot  find  symbol  events	12	None	replace
47	[BUG]  [BUGGY]  for(final  EventState  eventT  :  stateInitialized)  {  interpolator.setInitialized(eventT,  false);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  stateInitialized)  {  interpolator.setInitialized(eventT,  false);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  stateInitialized)  {  interpolator.setInitialized(eventT,  false);  }	  for(final    EventState    eventT    :    occuringEvents)    {    interpolator.setInitialized(eventT,    false);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
48	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  iterator.getInitialized(eventT,  eventY);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Interpolator  <  EventState>  interpolator  =  iterator.getInitialized(eventT,  eventY);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  iterator.getInitialized(eventT,  eventY);	  Interpolator    <    EventState>    interpolator    =    interpolator.getInitialized(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
49	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  iterator.getInitialized(eventT,  yDot);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Interpolator  <  EventState>  interpolator  =  iterator.getInitialized(eventT,  yDot);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  iterator.getInitialized(eventT,  yDot);	  Interpolator    <    EventState>    interpolator    =    interpolator.getInitialized(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
50	[BUG]  [BUGGY]  for(final  EventState  remaining  :  eventState.events)  {  [CE]  cannot  find  symbol  eventState  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  eventState.events)  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  eventState.events)  {	  for(final    EventState    remaining    :    currentEvent.events)    {    	non-compiled	[CE]  cannot  find  symbol  eventState	22	None	replace
51	[BUG]  [BUGGY]  stateInitialized  =  isLastStep  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  isLastStep  +  1;  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  isLastStep  +  1;	  stateInitialized    =    isLastStep;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(isLastStep  >  0)  {  for(final  EventState  remaining  :  eventsInitialized)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Preconditions.checkState(isLastStep  >  0)  {  for(final  EventState  remaining  :  eventsInitialized)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Preconditions.checkState(isLastStep  >  0)  {  for(final  EventState  remaining  :  eventsInitialized)  {  remaining.stepAccepted(eventT,  eventY);  }	  Preconditions.checkState(isLastStep)    {    for(final    EventState    remaining    :    eventsInitialized)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
53	[BUG]  [BUGGY]  stateInitialized  =  currentEvent.convert(eventT,  y  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  currentEvent.convert(eventT,  y  +  1);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  currentEvent.convert(eventT,  y  +  1);	  stateInitialized    =    currentEvent.convert(eventT,    y);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
54	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  iterator.getInitialized(eventT,  false);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Interpolator  <  EventState>  interpolator  =  iterator.getInitialized(eventT,  false);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  iterator.getInitialized(eventT,  false);	  Interpolator    <    EventState>    interpolator    =    interpolator.getInitialized(eventT,    false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(isLastStep  >  0)  {  for(final  EventState  remaining  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Preconditions.checkState(isLastStep  >  0)  {  for(final  EventState  remaining  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Preconditions.checkState(isLastStep  >  0)  {  for(final  EventState  remaining  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }	  Preconditions.checkState(isLastStep)    {    for(final    EventState    remaining    :    existingEvents)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
56	[BUG]  [BUGGY]  for(final  EventState  remaining  :  currentEvent.stateInitialized)  {  [CE]  cannot  find  symbol  stateInitialized  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  currentEvent.stateInitialized)  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  currentEvent.stateInitialized)  {	  for(final    EventState    remaining    :    stateInitialized)    {    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	11	None	replace
57	[BUG]  [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  stateInitialized);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  stateInitialized);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  stateInitialized);  }	  for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
58	[BUG]  [BUGGY]  stateInitialized  =  stateInitialized.convert(currentEvent,  tEnd);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  stateInitialized.convert(currentEvent,  tEnd);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  stateInitialized.convert(currentEvent,  tEnd);	  stateInitialized    =    stateInitialized.convert(eventT,    tEnd);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
59	[BUG]  [BUGGY]  for(final  EventState  remaining  :  state.events)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  state.events)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  state.events)  {  remaining.stepAccepted(eventT,  eventY);  }	  for(final    EventState    remaining    :    occuringEvents)    {    remaining.stepAccepted(eventT,    eventY);    }    return    eventT;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
60	[BUG]  [BUGGY]  for(final  EventState  remaining  :  state.events)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  remaining  :  state.events)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  remaining  :  state.events)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }	  for(final    EventState    remaining    :    occuringEvents)    {    remaining.stepAccepted(eventT,    eventY);    }    return    eventT;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
61	[BUG]  [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  state);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  state);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Interpolator  <  EventState>  interpolator  =  interpolator.getInitialized(eventT,  state);	  Interpolator    <    EventState>    interpolator    =    interpolator.getInitialized(eventT,    eventY);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
62	[BUG]  [BUGGY]  for(final  EventState  eventT  :  eventStates.values())  {  [CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  eventStates.values())  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  eventStates.values())  {	  for(final    EventState    remaining    :    eventStates.values())    {    	non-compiled	[CE]  variable  eventT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	12	None	replace
63	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  false);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  false);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	if(events!=  null)  {  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  false);  }	  if(eventsInitialized!=    null)    {    for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    false);    }    	non-compiled	[CE]  cannot  find  symbol  events	21	None	replace
64	[BUG]  [BUGGY]  stateInitialized  =  state.reset();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  state.reset();  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  state.reset();	  stateInitialized    =    state.getInitialized();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(isLastStep)  {  for(final  EventState  existing  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  Preconditions.checkState(isLastStep)  {  for(final  EventState  existing  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	Preconditions.checkState(isLastStep)  {  for(final  EventState  existing  :  existingEvents)  {  remaining.stepAccepted(eventT,  eventY);  }	  Preconditions.checkState(isLastStep)    {    for(final    EventState    remaining    :    existingEvents)    {    remaining.stepAccepted(eventT,    eventY);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
66	[BUG]  [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  yDot);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  yDot);  }  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  eventT  :  eventsInitialized)  {  interpolator.setInitialized(eventT,  yDot);  }	  for(final    EventState    eventT    :    eventsInitialized)    {    interpolator.setInitialized(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
67	[BUG]  [BUGGY]  stateInitialized  =  stateInitialized.convert(eventT,  resetOccurred);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  stateInitialized.convert(eventT,  resetOccurred);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  stateInitialized.convert(eventT,  resetOccurred);	  stateInitialized    =    stateInitialized.convert(eventT,    yDot);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
68	[BUG]  [BUGGY]  interpolator.setInitialized(eventT,  eventY);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  interpolator.setInitialized(eventT,  eventY);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	interpolator.setInitialized(eventT,  eventY);	  for(final    EventState    eventT    :    occuringEvents)    {    interpolator.setInitialized(eventT,    eventY);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
69	[BUG]  [BUGGY]  stateInitialized  =  state.convert(eventT,  resetOccurred);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  stateInitialized  =  state.convert(eventT,  resetOccurred);  [BUGGY]      for  (final  EventState  remaining  :  occuringEvents)  {  remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	stateInitialized  =  state.convert(eventT,  resetOccurred);	  stateInitialized    =    state.convert(eventT,    y);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
70	[BUG]  [BUGGY]  for(final  EventState  currentEvent  :  eventStates)  {  [CE]  variable  currentEvent  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  currentEvent  :  eventStates)  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  currentEvent  :  eventStates)  {	  for(final    EventState    remaining    :    currentEvents)    {    	non-compiled	[CE]  variable  currentEvent  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	20	None	replace
71	[BUG]  [BUGGY]  for(final  EventState  currentT  :  eventEvents)  {  [CE]  variable  currentT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                AssertionError      [CONTEXT]      return  eventT;  }  boolean  needReset  =  currentEvent.reset(eventT,  eventY);  if  (needReset)  {    System.arraycopy(eventY,  0,  y,  0,  y.length);  computeDerivatives(eventT,  y,  yDot);  resetOccurred  =  true;      [BUGGY]  for(final  EventState  currentT  :  eventEvents)  {  [BUGGY]      remaining.stepAccepted(eventT,  eventY);  }  return  eventT;  }  previousT  =  eventT;  interpolator.setSoftPreviousTime(eventT);  interpolator.setSoftCurrentTime(currentT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.5773502691896258	370	370	1	replace	for(final  EventState  currentT  :  eventEvents)  {	  for(final    EventState    remaining    :    currentEvents)    {    	non-compiled	[CE]  variable  currentT  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	20	None	replace
