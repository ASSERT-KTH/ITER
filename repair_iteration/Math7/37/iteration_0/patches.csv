bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  1);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]  state.stepAccepted(currentT,  tEnd,  1);  [BUGGY]    return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  tEnd,  1);	}  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
2	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]  state.stepAccepted(currentT,  tEnd);  [BUGGY]    return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  tEnd);	}  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    [BUGGY]    return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
4	[BUG]  [BUGGY]    iterator.remove();  [CE]  cannot  find  symbol  iterator  [FE]    AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    iterator.remove();  [BUGGY]  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	    iterator.remove();		non-compiled	[CE]  cannot  find  symbol  iterator	74	None	add
5	[BUG]  [BUGGY]    if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	    if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }		non-compiled	[CE]  illegal  start  of  expression	74	None	add
6	[BUG]  [BUGGY]    if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	    if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }		non-compiled	[CE]  illegal  start  of  expression	74	None	add
7	[BUG]  [BUGGY]    if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	    if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }		non-compiled	[CE]  illegal  start  of  expression	74	None	add
8	[BUG]  [BUGGY]  if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]  if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	}  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
9	[BUG]  [BUGGY]  if(tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]  if(tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]    return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	}  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
10	[BUG]  [BUGGY]  if(tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]  if(tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]    return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	}  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
11	[BUG]  [BUGGY]    if(tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    if(tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	    if(tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }		non-compiled	[CE]  illegal  start  of  expression	74	None	add
12	[BUG]  [BUGGY]    if(tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    if(tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	    if(tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }		non-compiled	[CE]  illegal  start  of  expression	74	None	add
13	[BUG]  [BUGGY]    if(tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);  [BUGGY]    if(tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]  }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	    if(tEnd  >  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }		non-compiled	[CE]  illegal  start  of  expression	74	None	add
