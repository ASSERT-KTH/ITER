bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  handler  ==  null)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  handler  ==  null)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  handler  ==  null)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  ||    handler!=    null)    {    for(final    EventState    state    :    eventStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  luate(eventsStates,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	23	None	replace
3	[BUG]  [BUGGY]  luate(eventsStates,  orderSign,  t0)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderSign,  t0)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderSign,  t0)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	23	None	replace
4	[BUG]  [BUGGY]  AllEvents(eventsStates,  tEnd,  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  AllEvents(eventsStates,  tEnd,  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	AllEvents(eventsStates,  tEnd,  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(eventsStates    ==    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	35	None	replace
5	[BUG]  [BUGGY]  luate(eventsStates,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	22	None	replace
6	[BUG]  [BUGGY]  state.stepAccepted(tEnd,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(tEnd,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(tEnd,  currentY);  isLastStep  =  isLastStep  ||  state.stop();	  state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  state.stepAccepted(tStart,  y);  isLastStep  =  isLastStep  ||  state.stop();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(tStart,  y);  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(tStart,  y);  isLastStep  =  isLastStep  ||  state.stop();	  state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  <  =  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  ||    tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  ==  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  ||    tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  <  =  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
11	[BUG]  [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  ==  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
12	[BUG]  [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  <  =  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  ||    tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  ==  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  ||    tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  luate(eventsStates)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	37	None	replace
15	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tStart,  0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(currentT,  tStart,  0);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  tStart,  0);	  state.stepAccepted(currentT,    tStart,    1);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  1))  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tEnd,  1))  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  1))  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(eventsStates    ==    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
17	[BUG]  [BUGGY]  yDot  =  handler.getY(currentT,  tEnd);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  yDot  =  handler.getY(currentT,  tEnd);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	yDot  =  handler.getY(currentT,  tEnd);	  yDot    =    handler.getY(currentT);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
18	[BUG]  [BUGGY]  state.stepAccepted(tEnd,  yDot,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(tEnd,  yDot,  1);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(tEnd,  yDot,  1);	  state.stepAccepted(currentT,    yDot,    1);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
19	[BUG]  [BUGGY]  state.stepAccepted(tStart,  yDot,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(tStart,  yDot,  1);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(tStart,  yDot,  1);	  state.stepAccepted(currentT,    yDot,    1);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
20	[BUG]  [BUGGY]  isLastStep  =  isLastStep  ||  state.stop();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	isLastStep  =  isLastStep  ||  state.stop();	  state.stepAccepted(isLastStep,    tEnd);    isLastStep    =    isLastStep    ||    state.stop();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
21	[BUG]  [BUGGY]  yDot  =  handler.getY()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  yDot  =  handler.getY()  +  1;  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	yDot  =  handler.getY()  +  1;	  yDot    =    handler.getY();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
22	[BUG]  [BUGGY]  luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
23	[BUG]  [BUGGY]  luate(eventsStates,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
24	[BUG]  [BUGGY]  luate(eventsStates,  orderSign,  t0)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderSign,  t0)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderSign,  t0)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
25	[BUG]  [BUGGY]  luate(eventsStates,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
26	[BUG]  [BUGGY]  facesInitializingEvents(currentT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  facesInitializingEvents(currentT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	facesInitializingEvents(currentT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  facesInitializingEvents(eventT,    tEnd,    yDot)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
27	[BUG]  [BUGGY]  ensureCapacity(eventT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ensureCapacity(eventT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	ensureCapacity(eventT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  facesInitializingEvents(eventT,    tEnd,    yDot)    {    for(final    EventState    state    :    eventStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
28	[BUG]  [BUGGY]  state.stepAccepted(tEnd,  yDot);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(tEnd,  yDot);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(tEnd,  yDot);	  state.stepAccepted(currentT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
29	[BUG]  [BUGGY]  state.stepAccepted(tStart,  yDot);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(tStart,  yDot);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(tStart,  yDot);	  state.stepAccepted(currentT,    yDot);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
30	[BUG]  [BUGGY]  ||  handler  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  handler  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  handler  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  ||    handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  luate(eventsStates,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	27	None	replace
32	[BUG]  [BUGGY]  luate(eventsStates,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	28	None	replace
33	[BUG]  [BUGGY]  luate(eventsStates,  orderSign,  t0)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderSign,  t0)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderSign,  t0)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	28	None	replace
34	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  yDot);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	tEnd  =  state.stepAccepted(currentT,  yDot);	  tEnd    =    state.stop();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
35	[BUG]  [BUGGY]  tEnd  =  state.stepAccepted(currentT,  t0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  tEnd  =  state.stepAccepted(currentT,  t0);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	tEnd  =  state.stepAccepted(currentT,  t0);	  tEnd    =    state.stop();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
36	[BUG]  [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  <  =  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  ==  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  state.stepAccepted(t0,  currentT);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(t0,  currentT);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(t0,  currentT);	  state.stepAccepted(currentT,    t0);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  AllEvents(eventsStates,  eventsStates)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  AllEvents(eventsStates,  eventsStates)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	AllEvents(eventsStates,  eventsStates)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(eventsStates    ==    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(isLastStep,    tEnd);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	20	None	replace
40	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  tEnd,  1);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  tEnd,  1);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  tEnd,  1);  isLastStep  =  isLastStep;  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
41	[BUG]  [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  0)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }	  if(tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stop();    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
42	[BUG]  [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  <  =  0)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    events)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
43	[BUG]  [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  ==  0)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    events)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
44	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tStart);  isLastStep  =  isLastStep  ||  state.stop();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(currentT,  tStart);  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  tStart);  isLastStep  =  isLastStep  ||  state.stop();	  state.stepAccepted(currentT,    tEnd);    isLastStep    =    isLastStep    ||    state.stop();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
45	[BUG]  [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }	  if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stop();    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
46	[BUG]  [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stop();  isLastStep  =  isLastStep;  }	  if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stop();    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
47	[BUG]  [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  <  =  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  <  =  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
48	[BUG]  [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  ==  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  ==  0)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
49	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tEnd,  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	38	None	replace
50	[BUG]  [BUGGY]  luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	38	None	replace
51	[BUG]  [BUGGY]  facesInitializingEvents(eventT,  tStart,  yDot)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  facesInitializingEvents(eventT,  tStart,  yDot)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	facesInitializingEvents(eventT,  tStart,  yDot)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  facesInitializingEvents(eventT,    tEnd,    yDot)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
52	[BUG]  [BUGGY]  tate.stepAccepted(currentT,  tEnd,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  tate.stepAccepted(currentT,  tEnd,  1);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	tate.stepAccepted(currentT,  tEnd,  1);	  if(tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stop();    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
53	[BUG]  [BUGGY]  facesInitializingEvents(eventT,  tStart,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  facesInitializingEvents(eventT,  tStart,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	facesInitializingEvents(eventT,  tStart,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  facesInitializingEvents(eventT,    tEnd,    yDot)    {    for(final    EventState    state    :    eventStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
54	[BUG]  [BUGGY]  luate(eventsStates,  orderSign,  tEnd)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderSign,  tEnd)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderSign,  tEnd)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	28	None	replace
55	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  tEnd,  1);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  tEnd,  1);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  tEnd,  1);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
56	[BUG]  [BUGGY]  luate(eventsStates,  orderSign,  tEnd)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderSign,  tEnd)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderSign,  tEnd)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
57	[BUG]  [BUGGY]  tEnd  =  state.stop()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  tEnd  =  state.stop()  +  1;  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	tEnd  =  state.stop()  +  1;	  tEnd    =    state.stop();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
58	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  orderingSign)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(eventsStates    ==    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	35	None	replace
59	[BUG]  [BUGGY]  luate(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(eventsStates    ==    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	35	None	replace
60	[BUG]  [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  ||    tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
61	[BUG]  [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  ||    tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
62	[BUG]  [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
63	[BUG]  [BUGGY]  luate(eventsStates,  tEnd)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tEnd)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(isLastStep,    tEnd);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	19	None	replace
64	[BUG]  [BUGGY]  luate(eventsStates,  tEnd)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop()  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tEnd)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop()  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop()	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(isLastStep,    tEnd);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	19	None	replace
65	[BUG]  [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stop();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stop();  }	  ||    handler!=    null)    {    for(final    EventState    state    :    eventStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
66	[BUG]  [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
67	[BUG]  [BUGGY]  luate(eventsStates,  tStart,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tStart,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tStart,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	23	None	replace
68	[BUG]  [BUGGY]  yDot  =  handler.getY()  +  tEnd;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  yDot  =  handler.getY()  +  tEnd;  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	yDot  =  handler.getY()  +  tEnd;	  yDot    =    handler.getY();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
69	[BUG]  [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  handler!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  }	  ||    handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
70	[BUG]  [BUGGY]  yDot  =  handler.getY(currentT  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  yDot  =  handler.getY(currentT  +  1);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	yDot  =  handler.getY(currentT  +  1);	  yDot    =    handler.getY(currentT);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
71	[BUG]  [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  1)  {  for(final  EventState  state  :  events)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    events)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
72	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  state.stop();  isLastStep  =  isLastStep;  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
73	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
74	[BUG]  [BUGGY]  state.stepAccepted(y,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(y,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(y,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();	  state.stepAccepted(isLastStep,    tEnd);    isLastStep    =    isLastStep    ||    state.stop();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
75	[BUG]  [BUGGY]  luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	22	None	replace
76	[BUG]  [BUGGY]  luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
77	[BUG]  [BUGGY]  luate(eventsStates,  orderingSign,  tEnd)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderingSign,  tEnd)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderingSign,  tEnd)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
78	[BUG]  [BUGGY]  luate(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(eventT!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	40	None	replace
79	[BUG]  [BUGGY]  luate(eventsInitialized,  currentT)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsInitialized,  currentT)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsInitialized,  currentT)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(eventT!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	40	None	replace
80	[BUG]  [BUGGY]  luate(eventsInitialized,  currentT)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsInitialized,  currentT)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsInitialized,  currentT)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(eventT!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	43	None	replace
81	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  yDot)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tEnd,  yDot)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  yDot)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
82	[BUG]  [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  >  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  >  1)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  ||    tEnd    >    0)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
83	[BUG]  [BUGGY]  luate(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.stepAccepted(isLastStep,  tEnd);  isLastStep  =  isLastStep  ||  state.stop();  }	  if(eventsStates    ==    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(isLastStep,    tEnd);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	20	None	replace
84	[BUG]  [BUGGY]  luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tStart,  orderingSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	27	None	replace
85	[BUG]  [BUGGY]  facesInitializingEvents(currentT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  facesInitializingEvents(currentT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	facesInitializingEvents(currentT,  tEnd,  yDot)  {  for(final  EventState  state  :  eventStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  facesInitializingEvents(eventT,    tEnd,    yDot)    {    for(final    EventState    state    :    eventStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
86	[BUG]  [BUGGY]  state.stop();  isLastStep  =  isLastStep;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stop();  isLastStep  =  isLastStep;  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stop();  isLastStep  =  isLastStep;	  if(tEnd    >    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stop();    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
87	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  1);  isLastStep  =  isLastStep  ||  state.stop();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(currentT,  tEnd,  1);  isLastStep  =  isLastStep  ||  state.stop();  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  tEnd,  1);  isLastStep  =  isLastStep  ||  state.stop();	  if(eventT!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
88	[BUG]  [BUGGY]  luate(eventsStates,  orderSign,  yDot)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderSign,  yDot)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderSign,  yDot)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep    ||    state.stop();    }    	non-compiled	[CE]  ';'  expected	28	None	replace
89	[BUG]  [BUGGY]  luate(eventsStates,  orderSign,  yDot)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  orderSign,  yDot)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  orderSign,  yDot)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
90	[BUG]  [BUGGY]  luate(eventsStates,  tStart,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tStart,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tStart,  orderSign)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  luate(eventsStates,    tEnd,    orderSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
91	[BUG]  [BUGGY]  if(handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  if(handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stop();  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	if(handler!=  null)  {  for(final  EventState  state  :  eventStates)  {  state.stop();  isLastStep  =  isLastStep;  }	  if(handler!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.stop();    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
92	[BUG]  [BUGGY]  luate(eventsStates,  tEnd,  yDot)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  luate(eventsStates,  tEnd,  yDot)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }  [BUGGY]      }  return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	luate(eventsStates,  tEnd,  yDot)  {  for(final  EventState  state  :  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep;  }	  luate(eventsStates,    tEnd,    orderingSign)    {    for(final    EventState    state    :    state.stepAccepted(currentT,    currentY);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
93	[BUG]  [BUGGY]  ||  tEnd  <  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  ||  tEnd  <  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	||  tEnd  <  1)  {  for(final  EventState  currentT  :  eventsStates)  {  state.stepAccepted(currentT,  y);  isLastStep  =  isLastStep;  }	  ||    tEnd    <    0)    {    for(final    EventState    currentT    :    eventsStates)    {    state.stepAccepted(currentT,    y);    isLastStep    =    isLastStep;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
94	[BUG]  [BUGGY]  state.stepAccepted(currentT,  yDot,  tEnd);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(currentT,  yDot,  tEnd);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  yDot,  tEnd);	  state.stepAccepted(currentT,    yDot,    1);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
95	[BUG]  [BUGGY]  state.stepAccepted(currentT,  tEnd,  3);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  currentY  =  interpolator.getInterpolatedState();  for  (final  EventState  state  :  eventsStates)  {  state.stepAccepted(currentT,  currentY);  isLastStep  =  isLastStep  ||  state.stop();  }  isLastStep  =  isLastStep  ||  Precision.equals(currentT,  tEnd,  1);  for  (StepHandler  handler  :  stepHandlers)  {  handler.handleStep(interpolator,  isLastStep);      [BUGGY]  state.stepAccepted(currentT,  tEnd,  3);  [BUGGY]        return  currentT;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  remaining  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  needReset  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java	0.4082482904638631	401	401	1	replace	state.stepAccepted(currentT,  tEnd,  3);	  state.stepAccepted(currentT,    tEnd,    2);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
