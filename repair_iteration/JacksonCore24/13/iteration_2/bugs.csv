bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  len  =  _inputEnd;  int  len  =  _inputEnd;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _inputEnd;  int  len  =  _inputEnd;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd;    int  len  =  _inputEnd;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	4	None	add
2	[BUG]  [BUGGY]  int  len  =  _inputEnd;  Integer  len  =  _inputEnd;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]      AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _inputEnd;  Integer  len  =  _inputEnd;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd;    Integer  len  =  _inputEnd;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	4	None	add
3	[BUG]  [BUGGY]  int  len  =  _inputEnd;  int  len  =  _inputStart;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]        AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _inputEnd;  int  len  =  _inputStart;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd;    int  len  =  _inputStart;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	4	None	add
4	[BUG]  [BUGGY]  int  len  =  _inputEnd;  char  len  =  _inputEnd;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _inputEnd;  char  len  =  _inputEnd;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd;    char  len  =  _inputEnd;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	4	None	add
5	[BUG]  [BUGGY]  int  len  =  _expType.length;  [CE]  cannot  find  symbol  _expType  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _expType.length;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _expType.length;	  int    len    =    _expLength;    	non-compiled	[CE]  cannot  find  symbol  _expType	8	None	replace
6	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  int  len  =  _numTypesValid;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numTypesValid;  int  len  =  _numTypesValid;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid;    int  len  =  _numTypesValid;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	10	None	add
7	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  Integer  len  =  _numTypesValid;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]      AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numTypesValid;  Integer  len  =  _numTypesValid;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid;    Integer  len  =  _numTypesValid;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	10	None	add
8	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  Int  len  =  _numTypesValid;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numTypesValid;  Int  len  =  _numTypesValid;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid;    Int  len  =  _numTypesValid;	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
9	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  char  len  =  _numTypesValid;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numTypesValid;  char  len  =  _numTypesValid;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid;    char  len  =  _numTypesValid;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	10	None	add
10	[BUG]  [BUGGY]  int  len  =  _numberInt.length;  [CE]  int  cannot  be  dereferenced  [FE]          JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numberInt.length;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberInt.length;	  int    len    =    _currNegative.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
11	[BUG]  [BUGGY]  int  len  =  _currToken.length  -  1;  [CE]  cannot  find  symbol  length  [FE]            JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _currToken.length  -  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.length  -  1;	  int    len    =    _currToken.length;    	non-compiled	[CE]  cannot  find  symbol  length	3	None	replace
12	[BUG]  [BUGGY]  int  len  =  _currToken.length  +  1;  [CE]  cannot  find  symbol  length  [FE]              JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _currToken.length  +  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.length  +  1;	  int    len    =    _currToken.length;    	non-compiled	[CE]  cannot  find  symbol  length	3	None	replace
13	[BUG]  [BUGGY]  int  len  =  _currToken.length();  [CE]  cannot  find  symbol  [FE]                JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _currToken.length();  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.length();	  int    len    =    _currToken.length;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  NR_INT;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  NR_INT;	  int    len    =    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	11	22	replace
15	[BUG]  [BUGGY]  int  len  =  NR_INT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  NR_INT;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  NR_INT;	  int    len    =    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	11	22	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numTypesValid  +  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numTypesValid  +  1;	  int    len    =    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	11	22	replace
17	[BUG]  [BUGGY]  int  len  =  _numTypesValid  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numTypesValid  +  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid  +  1;	  int    len    =    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	11	22	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numTypesValid  -  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numTypesValid  -  1;	  int    len    =    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	11	22	replace
19	[BUG]  [BUGGY]  int  len  =  _numTypesValid  -  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numTypesValid  -  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid  -  1;	  int    len    =    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	11	22	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _inputPtr;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _inputPtr;	  int    len    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	5	21	replace
21	[BUG]  [BUGGY]  int  len  =  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _inputPtr;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputPtr;	  int    len    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	5	21	replace
22	[BUG]  [BUGGY]  int  len  =  _expLength;  int  len  =  _expLength;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _expLength;  int  len  =  _expLength;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _expLength;    int  len  =  _expLength;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	7	None	add
23	[BUG]  [BUGGY]  int  len  =  _expLength;  Integer  len  =  _expLength;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]      AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _expLength;  Integer  len  =  _expLength;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _expLength;    Integer  len  =  _expLength;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	7	None	add
24	[BUG]  [BUGGY]  int  len  =  _expLength;  Int  len  =  _expLength;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _expLength;  Int  len  =  _expLength;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _expLength;    Int  len  =  _expLength;	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
25	[BUG]  [BUGGY]  int  len  =  _expLength;  char  len  =  _expLength;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _expLength;  char  len  =  _expLength;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _expLength;    char  len  =  _expLength;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	7	None	add
26	[BUG]  [BUGGY]  int  len  =  _numberNegative.length();  [CE]  boolean  cannot  be  dereferenced  [FE]                JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numberNegative.length();  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length();	      	non-compiled	[CE]  boolean  cannot  be  dereferenced	6	None	replace
27	[BUG]  [BUGGY]  int  len  =  _parsingContext.getLength();  [CE]  cannot  find  symbol  [FE]                  JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _parsingContext.getLength();  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _parsingContext.getLength();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
28	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative);  [CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                    JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  _parsingContext.setCurrentName(_numberNegative);  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	_parsingContext.setCurrentName(_numberNegative);	      	non-compiled	[CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;	6	None	replace
29	[BUG]  [BUGGY]  int  len  =  _numberNegative.length  -  1;  [CE]  boolean  cannot  be  dereferenced  [FE]        JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numberNegative.length  -  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length  -  1;	  int    len    =    _numberNegative.length;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	1	None	replace
30	[BUG]  [BUGGY]  int  len  =  _numberNegative.length  +  1;  [CE]  boolean  cannot  be  dereferenced  [FE]          JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numberNegative.length  +  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length  +  1;	  int    len    =    _numberNegative.length;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	1	None	replace
31	[BUG]  [BUGGY]  int  len  =  _numberNegative?  0  :  _numberNegative;  [CE]  incompatible  types  [FE]          JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numberNegative?  0  :  _numberNegative;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  0  :  _numberNegative;	  int    len    =    _numberNegative;    	non-compiled	[CE]  incompatible  types	2	None	replace
32	[BUG]  [BUGGY]  int  len  =  _numberNegative  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numberNegative  +  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  +  1;	  int    len    =    _numberNegative;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
33	[BUG]  [BUGGY]  int  len  =  _numberNegative?  -1  :  _numberNegative;  [CE]  incompatible  types  [FE]              JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numberNegative?  -1  :  _numberNegative;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  -1  :  _numberNegative;	  int    len    =    _numberNegative;    	non-compiled	[CE]  incompatible  types	2	None	replace
34	[BUG]  [BUGGY]  int  len  =  _expType;  [CE]  cannot  find  symbol  _expType  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _expType;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _expType;	  int    len    =    _expLength;    	non-compiled	[CE]  cannot  find  symbol  _expType	8	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _inputEnd  +  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _inputEnd  +  1;	  int    len    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	5	21	replace
36	[BUG]  [BUGGY]  int  len  =  _inputEnd  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _inputEnd  +  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd  +  1;	  int    len    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	5	21	replace
37	[BUG]  [BUGGY]  int  len  =  _currNegative;  [CE]  cannot  find  symbol  _currNegative  [FE]      AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _currNegative;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currNegative;	  int    len    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol  _currNegative	5	None	replace
38	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _textBuffer.contentsAsInt(_numberNegative);	      	compilable	  [FE]  JsonParseException  	6	19	replace
39	[BUG]  [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  [FE]  JsonParseException  [FE]                JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _textBuffer.contentsAsInt(_numberNegative);	      	compilable	  [FE]  JsonParseException  	6	19	replace
40	[BUG]  [BUGGY]  int  len  =  _textBuffer.contentsAsLong(_numberNegative);  [CE]  possible  loss  of  precision  [FE]                  JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _textBuffer.contentsAsLong(_numberNegative);	      	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
41	[BUG]  [BUGGY]  int  len  =  _parsingContext.getValueLength();  [CE]  cannot  find  symbol  [FE]                    JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _parsingContext.getValueLength();  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _parsingContext.getValueLength();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
42	[BUG]  [BUGGY]  int  len  =  _numberNegative  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numberNegative  -  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  -  1;	  int    len    =    _numberNegative;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	2	None	replace
43	[BUG]  [BUGGY]  int  len  =  _numberNegative  &  NR_INT;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numberNegative  &  NR_INT;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  &  NR_INT;	  int    len    =    _numberNegative;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	2	None	replace
44	[BUG]  [BUGGY]  int  len  =  _inputEnd;  Int  len  =  _inputEnd;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _inputEnd;  Int  len  =  _inputEnd;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd;    Int  len  =  _inputEnd;	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
45	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  int  len  =  _numtypesValid;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _numTypesValid;  int  len  =  _numtypesValid;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid;    int  len  =  _numtypesValid;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	10	None	add
46	[BUG]  [BUGGY]  int  len  =  _textBuffer.length;  [CE]  cannot  find  symbol  length  [FE]          JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _textBuffer.length;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _textBuffer.length;	  int    len    =    _currNegative.length;    	non-compiled	[CE]  cannot  find  symbol  length	9	None	replace
47	[BUG]  [BUGGY]  Integer  len  =  _numberNegative.getLength();  [CE]  boolean  cannot  be  dereferenced  [FE]                JsonParseException    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  Integer  len  =  _numberNegative.getLength();  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	Integer  len  =  _numberNegative.getLength();	      	non-compiled	[CE]  boolean  cannot  be  dereferenced	6	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _inputEnd  -  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _inputEnd  -  1;	  int    len    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	5	21	replace
49	[BUG]  [BUGGY]  int  len  =  _inputEnd  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {    [BUGGY]  int  len  =  _inputEnd  -  1;  [BUGGY]      if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd  -  1;	  int    len    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	5	21	replace
