bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  +  2;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numTypesValid  +  2;	  int    len    =    _numTypesValid    +    1;    	compilable	  [FE]  AssertionFailedError  	17	22	replace
2	[BUG]  [BUGGY]  int  len  =  _numTypesValid  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  +  2;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid  +  2;	  int    len    =    _numTypesValid    +    1;    	compilable	  [FE]  AssertionFailedError  	17	22	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  /  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numTypesValid  /  1;	  int    len    =    _numTypesValid    +    1;    	compilable	  [FE]  AssertionFailedError  	17	22	replace
4	[BUG]  [BUGGY]  int  len  =  _numTypesValid  /  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  /  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid  /  1;	  int    len    =    _numTypesValid    +    1;    	compilable	  [FE]  AssertionFailedError  	17	22	replace
5	[BUG]  [BUGGY]  int  len  =  _numTypesValid  +  1;  int  len  =  _numTypesValid  +  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  +  1;  int  len  =  _numTypesValid  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid    +    1;    int  len  =  _numTypesValid  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	16	None	add
6	[BUG]  [BUGGY]  int  len  =  _numTypesValid  +  1;  Integer  len  =  _numTypesValid  +  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  +  1;  Integer  len  =  _numTypesValid  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid    +    1;    Integer  len  =  _numTypesValid  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	16	None	add
7	[BUG]  [BUGGY]  int  len  =  _numTypesValid  +  1;  Int  len  =  _numTypesValid  +  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  +  1;  Int  len  =  _numTypesValid  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid    +    1;    Int  len  =  _numTypesValid  +  1;	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
8	[BUG]  [BUGGY]  int  len  =  _numTypesValid  +  1;  char  len  =  _numTypesValid  +  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  +  1;  char  len  =  _numTypesValid  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid    +    1;    char  len  =  _numTypesValid  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	16	None	add
9	[BUG]  [BUGGY]  int  len  =  _numTypesValid  -  1;  int  len  =  _numTypesValid  -  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  -  1;  int  len  =  _numTypesValid  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid    -    1;    int  len  =  _numTypesValid  -  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	18	None	add
10	[BUG]  [BUGGY]  int  len  =  _numTypesValid  -  1;  Integer  len  =  _numTypesValid  -  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  -  1;  Integer  len  =  _numTypesValid  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid    -    1;    Integer  len  =  _numTypesValid  -  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	18	None	add
11	[BUG]  [BUGGY]  int  len  =  _numTypesValid  -  1;  Int  len  =  _numTypesValid  -  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  -  1;  Int  len  =  _numTypesValid  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid    -    1;    Int  len  =  _numTypesValid  -  1;	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
12	[BUG]  [BUGGY]  int  len  =  _numTypesValid  -  1;  char  len  =  _numTypesValid  -  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  -  1;  char  len  =  _numTypesValid  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _numTypesValid    -    1;    char  len  =  _numTypesValid  -  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	18	None	add
13	[BUG]  [BUGGY]  int  len  =  _numberNegative.length  -  2;  [CE]  boolean  cannot  be  dereferenced  [FE]            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative.length  -  2;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length  -  2;	  int    len    =    _numberNegative.length    -    1;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	29	None	replace
14	[BUG]  [BUGGY]  int  len  =  _numberNegative.length  -  1  +  1;  [CE]  boolean  cannot  be  dereferenced  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative.length  -  1  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length  -  1  +  1;	  int    len    =    _numberNegative.length    -    1;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	29	None	replace
15	[BUG]  [BUGGY]  int  len  =  _numberNegative  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative  *  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  *  1;	  int    len    =    _numberNegative    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	32	None	replace
16	[BUG]  [BUGGY]  int  len  =  _currToken;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currToken;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken;	  int    len    =    _expType;    	non-compiled	[CE]  incompatible  types	34	None	replace
17	[BUG]  [BUGGY]  int  len  =  _numberInputCol;  [CE]  cannot  find  symbol  _numberInputCol  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberInputCol;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberInputCol;	  int    len    =    _expType;    	non-compiled	[CE]  cannot  find  symbol  _numberInputCol	34	None	replace
18	[BUG]  [BUGGY]  int  len  =  _numberNegative?  0  :  _numberNegative.length;  [CE]  boolean  cannot  be  dereferenced  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  0  :  _numberNegative.length;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  0  :  _numberNegative.length;	  int    len    =    _numberNegative?    0    :    _numberNegative;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	31	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  0  :  _numberInt;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numberNegative?  0  :  _numberInt;	  int    len    =    _numberNegative?    0    :    _numberNegative;    	compilable	  [FE]  AssertionFailedError  	31	22	replace
20	[BUG]  [BUGGY]  int  len  =  _numberNegative?  0  :  _numberInt;  [FE]  AssertionFailedError  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  0  :  _numberInt;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  0  :  _numberInt;	  int    len    =    _numberNegative?    0    :    _numberNegative;    	compilable	  [FE]  AssertionFailedError  	31	22	replace
21	[BUG]  [BUGGY]  int  len  =  _numberNegative?  1  :  _numberNegative;  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  1  :  _numberNegative;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  1  :  _numberNegative;	  int    len    =    _numberNegative?    0    :    _numberNegative;    	non-compiled	[CE]  incompatible  types	31	None	replace
22	[BUG]  [BUGGY]  int  len  =  _numTypesValid.length;  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid.length;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid.length;	  int    len    =    _numTypesValid;    int    len    =    _numTypesValid;    	non-compiled	[CE]  int  cannot  be  dereferenced	6	None	replace
23	[BUG]  [BUGGY]  char  len  =  _numTypesValid;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  char  len  =  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	char  len  =  _numTypesValid;	  int    len    =    _numTypesValid;    char    len    =    _numTypesValid;    	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
24	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  String  len  =  _numTypesValid;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]                AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid;  String  len  =  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid;  String  len  =  _numTypesValid;	  int    len    =    _numTypesValid;    char    len    =    _numTypesValid;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	9	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Integer  len  =  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	Integer  len  =  _numTypesValid;	  int    len    =    _numTypesValid;    char    len    =    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	9	22	replace
26	[BUG]  [BUGGY]  Integer  len  =  _numTypesValid;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Integer  len  =  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	Integer  len  =  _numTypesValid;	  int    len    =    _numTypesValid;    char    len    =    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	9	22	replace
27	[BUG]  [BUGGY]  Int  len  =  _inputEnd;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Int  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	Int  len  =  _inputEnd;	  int    len    =    _inputEnd;    Int    len    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
28	[BUG]  [BUGGY]  int  len  =  _inputStart;  Int  len  =  _inputEnd;  [CE]  cannot  find  symbol  _inputStart  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputStart;  Int  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputStart;  Int  len  =  _inputEnd;	  int    len    =    _inputEnd;    Int    len    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol  _inputStart	44	None	replace
29	[BUG]  [BUGGY]  int  len  =  _inputEnd  -  1;  Int  len  =  _inputEnd;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  -  1;  Int  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd  -  1;  Int  len  =  _inputEnd;	  int    len    =    _inputEnd;    Int    len    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
30	[BUG]  [BUGGY]  int  len  =  _inputEnd;  Int  len  =  _currToken;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd;  Int  len  =  _currToken;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd;  Int  len  =  _currToken;	  int    len    =    _inputEnd;    Int    len    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
31	[BUG]  [BUGGY]  int  len  =  _parsingContext.getLength()  +  1;  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _parsingContext.getLength()  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _parsingContext.getLength()  +  1;	  int    len    =    _parsingContext.getLength();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
32	[BUG]  [BUGGY]  int  len  =  _parsingContext.length();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _parsingContext.length();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _parsingContext.length();	  int    len    =    _parsingContext.getLength();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
33	[BUG]  [BUGGY]  int  len  =  _textBuffer.length  -  1;  [CE]  cannot  find  symbol  length  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.length  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _textBuffer.length  -  1;	  int    len    =    _textBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  length	46	None	replace
34	[BUG]  [BUGGY]  int  len  =  _textBuffer.length();  [CE]  cannot  find  symbol  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.length();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _textBuffer.length();	  int    len    =    _textBuffer.length;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Integer  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	Integer  len  =  _expLength;	  int    len    =    _expLength;    Integer    len    =    _expLength;    	compilable	  [FE]  AssertionFailedError  	23	22	replace
36	[BUG]  [BUGGY]  Integer  len  =  _expLength;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Integer  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	Integer  len  =  _expLength;	  int    len    =    _expLength;    Integer    len    =    _expLength;    	compilable	  [FE]  AssertionFailedError  	23	22	replace
37	[BUG]  [BUGGY]  int  len  =  _numberNegative.length()  +  1;  [CE]  boolean  cannot  be  dereferenced  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative.length()  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length()  +  1;	  int    len    =    _numberNegative.length();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	26	None	replace
38	[BUG]  [BUGGY]  int  len  =  _numberNegative.length()  -  1;  [CE]  boolean  cannot  be  dereferenced  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative.length()  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length()  -  1;	  int    len    =    _numberNegative.length();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	26	None	replace
39	[BUG]  [BUGGY]  int  len  =  _inputStart;  int  len  =  _inputEnd;  [CE]  cannot  find  symbol  _inputStart  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputStart;  int  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputStart;  int  len  =  _inputEnd;	  int    len    =    _inputEnd;    char    len    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol  _inputStart	4	None	replace
40	[BUG]  [BUGGY]  int  len  =  _inputEnd;  String  len  =  _inputEnd;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]                AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd;  String  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd;  String  len  =  _inputEnd;	  int    len    =    _inputEnd;    char    len    =    _inputEnd;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	4	None	replace
41	[BUG]  [BUGGY]  char  len  =  _inputEnd;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  char  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	char  len  =  _inputEnd;	  int    len    =    _inputEnd;    char    len    =    _inputEnd;    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _expLength  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _expLength  +  1;	  int    len    =    _expLength;    int    len    =    _expLength;    	compilable	  [FE]  AssertionFailedError  	22	22	replace
43	[BUG]  [BUGGY]  int  len  =  _expLength  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _expLength  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _expLength  +  1;	  int    len    =    _expLength;    int    len    =    _expLength;    	compilable	  [FE]  AssertionFailedError  	22	22	replace
44	[BUG]  [BUGGY]  Integer  len  =  _numberNegative.getLength()  +  1;  [CE]  boolean  cannot  be  dereferenced  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Integer  len  =  _numberNegative.getLength()  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	Integer  len  =  _numberNegative.getLength()  +  1;	  Integer    len    =    _numberNegative.getLength();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	47	None	replace
45	[BUG]  [BUGGY]  Integer  len  =  _numberNegative.length();  [CE]  boolean  cannot  be  dereferenced  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Integer  len  =  _numberNegative.length();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	Integer  len  =  _numberNegative.length();	  Integer    len    =    _numberNegative.getLength();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	47	None	replace
46	[BUG]  [BUGGY]  Integer  len  =  _numberNegative.intValue();  [CE]  boolean  cannot  be  dereferenced  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Integer  len  =  _numberNegative.intValue();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	Integer  len  =  _numberNegative.intValue();	  Integer    len    =    _numberNegative.getLength();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	47	None	replace
47	[BUG]  [BUGGY]  int  len  =  _inputEnd  +  1;  int  len  =  _inputEnd  +  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  +  1;  int  len  =  _inputEnd  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd    +    1;    int  len  =  _inputEnd  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	35	None	add
48	[BUG]  [BUGGY]  int  len  =  _inputEnd  +  1;  Integer  len  =  _inputEnd  +  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  +  1;  Integer  len  =  _inputEnd  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd    +    1;    Integer  len  =  _inputEnd  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	35	None	add
49	[BUG]  [BUGGY]  int  len  =  _inputEnd  +  1;  Int  len  =  _inputEnd  +  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  +  1;  Int  len  =  _inputEnd  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd    +    1;    Int  len  =  _inputEnd  +  1;	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
50	[BUG]  [BUGGY]  int  len  =  _inputEnd  +  1;  char  len  =  _inputEnd  +  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  +  1;  char  len  =  _inputEnd  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd    +    1;    char  len  =  _inputEnd  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	35	None	add
51	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  _currToken);  [CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  _currToken);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	_parsingContext.setCurrentName(_numberNegative,  _currToken);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;	28	None	replace
52	[BUG]  [BUGGY]  _parsingContext.setCurrentName(i,  _numberNegative);  [CE]  cannot  find  symbol  i  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  _parsingContext.setCurrentName(i,  _numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	_parsingContext.setCurrentName(i,  _numberNegative);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  cannot  find  symbol  i	28	None	replace
53	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_currToken,  _numberNegative);  [CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  _parsingContext.setCurrentName(_currToken,  _numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	_parsingContext.setCurrentName(_currToken,  _numberNegative);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;	28	None	replace
54	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  len);  [CE]  cannot  find  symbol  len  [FE]                              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  len);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	_parsingContext.setCurrentName(_numberNegative,  len);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  cannot  find  symbol  len	28	None	replace
55	[BUG]  [BUGGY]  int  len  =  _numberNegative?  -1  :  _numberNegative.length;  [CE]  boolean  cannot  be  dereferenced  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  -1  :  _numberNegative.length;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  -1  :  _numberNegative.length;	  int    len    =    _numberNegative?    -1    :    _numberNegative;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	33	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  -1  :  _numberInt;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numberNegative?  -1  :  _numberInt;	  int    len    =    _numberNegative?    -1    :    _numberNegative;    	compilable	  [FE]  AssertionFailedError  	33	22	replace
57	[BUG]  [BUGGY]  int  len  =  _numberNegative?  -1  :  _numberInt;  [FE]  AssertionFailedError  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  -1  :  _numberInt;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  -1  :  _numberInt;	  int    len    =    _numberNegative?    -1    :    _numberNegative;    	compilable	  [FE]  AssertionFailedError  	33	22	replace
58	[BUG]  [BUGGY]  int  len  =  _inputStart;  [CE]  cannot  find  symbol  _inputStart  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputStart;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputStart;	  int    len    =    _inputEnd;    int    len    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol  _inputStart	1	None	replace
59	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  long  len  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	long  len  =  _textBuffer.contentsAsLong(_numberNegative);	  int    len    =    _textBuffer.contentsAsLong(_numberNegative);    	compilable	  [FE]  JsonParseException  	40	19	replace
60	[BUG]  [BUGGY]  long  len  =  _textBuffer.contentsAsLong(_numberNegative);  [FE]  JsonParseException  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  long  len  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	long  len  =  _textBuffer.contentsAsLong(_numberNegative);	  int    len    =    _textBuffer.contentsAsLong(_numberNegative);    	compilable	  [FE]  JsonParseException  	40	19	replace
61	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  double  len  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	double  len  =  _textBuffer.contentsAsLong(_numberNegative);	  int    len    =    _textBuffer.contentsAsLong(_numberNegative);    	compilable	  [FE]  JsonParseException  	40	19	replace
62	[BUG]  [BUGGY]  double  len  =  _textBuffer.contentsAsLong(_numberNegative);  [FE]  JsonParseException  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  double  len  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	double  len  =  _textBuffer.contentsAsLong(_numberNegative);	  int    len    =    _textBuffer.contentsAsLong(_numberNegative);    	compilable	  [FE]  JsonParseException  	40	19	replace
63	[BUG]  [BUGGY]  char  len  =  _textBuffer.contentsAsLong(_numberNegative);  [CE]  possible  loss  of  precision  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  char  len  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	char  len  =  _textBuffer.contentsAsLong(_numberNegative);	  int    len    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  possible  loss  of  precision	40	None	replace
64	[BUG]  [BUGGY]  Integer  len  =  _numTypesValid.intValue();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Integer  len  =  _numTypesValid.intValue();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	Integer  len  =  _numTypesValid.intValue();	  int    len    =    _numTypesValid;    Integer    len    =    _numTypesValid;    	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	replace
65	[BUG]  [BUGGY]  int  len  =  _numberInt.length  -  1;  [CE]  int  cannot  be  dereferenced  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberInt.length  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberInt.length  -  1;	  int    len    =    _numberInt.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	10	None	replace
66	[BUG]  [BUGGY]  int  len  =  _numberInt.length  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberInt.length  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberInt.length  +  1;	  int    len    =    _numberInt.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	10	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  -  2;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numTypesValid  -  2;	  int    len    =    _numTypesValid    -    1;    	compilable	  [FE]  AssertionFailedError  	19	22	replace
68	[BUG]  [BUGGY]  int  len  =  _numTypesValid  -  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  -  2;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid  -  2;	  int    len    =    _numTypesValid    -    1;    	compilable	  [FE]  AssertionFailedError  	19	22	replace
69	[BUG]  [BUGGY]  int  len  =  _numberNegative.length  +  2;  [CE]  boolean  cannot  be  dereferenced  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative.length  +  2;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length  +  2;	  int    len    =    _numberNegative.length    +    1;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	30	None	replace
70	[BUG]  [BUGGY]  int  len  =  _currToken.length  -  2;  [CE]  cannot  find  symbol  length  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currToken.length  -  2;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.length  -  2;	  int    len    =    _currToken.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  length	11	None	replace
71	[BUG]  [BUGGY]  int  len  =  _currToken.VALUE_NUMBER_INT  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currToken.VALUE_NUMBER_INT  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.VALUE_NUMBER_INT  -  1;	  int    len    =    _currToken.length    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	11	None	replace
72	[BUG]  [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative  +  1);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _textBuffer.contentsAsInt(_numberNegative  +  1);	  int    len    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	39	None	replace
73	[BUG]  [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_currToken);  [CE]  method  contentsAsInt  in  class  TextBuffer  cannot  be  applied  to  given  types;  [FE]      JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_currToken);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _textBuffer.contentsAsInt(_currToken);	  int    len    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  method  contentsAsInt  in  class  TextBuffer  cannot  be  applied  to  given  types;	39	None	replace
74	[BUG]  [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberInt);  [CE]  method  contentsAsInt  in  class  TextBuffer  cannot  be  applied  to  given  types;  [FE]        JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberInt);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _textBuffer.contentsAsInt(_numberInt);	  int    len    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  method  contentsAsInt  in  class  TextBuffer  cannot  be  applied  to  given  types;	39	None	replace
75	[BUG]  [BUGGY]  int  len  =  _inputPtr;  int  len  =  _inputPtr;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputPtr;  int  len  =  _inputPtr;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputPtr;    int  len  =  _inputPtr;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	20	None	add
76	[BUG]  [BUGGY]  int  len  =  _inputPtr;  Integer  len  =  _inputPtr;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputPtr;  Integer  len  =  _inputPtr;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputPtr;    Integer  len  =  _inputPtr;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	20	None	add
77	[BUG]  [BUGGY]  int  len  =  _inputPtr;  Int  len  =  _inputPtr;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputPtr;  Int  len  =  _inputPtr;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputPtr;    Int  len  =  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
78	[BUG]  [BUGGY]  int  len  =  _inputPtr;  int  len  =  _inputPtr);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputPtr;  int  len  =  _inputPtr);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputPtr;    int  len  =  _inputPtr);	  	non-compiled	[CE]  ';'  expected	20	None	add
79	[BUG]  [BUGGY]  int  len  =  _currToken.length  /  1;  [CE]  cannot  find  symbol  length  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currToken.length  /  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.length  /  1;	  int    len    =    _currToken.length    +    1;    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
80	[BUG]  [BUGGY]  int  len  =  _currToken.VALUE_NUMBER_INT;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currToken.VALUE_NUMBER_INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.VALUE_NUMBER_INT;	  int    len    =    NR_INT;    	non-compiled	[CE]  incompatible  types	15	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberInt;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numberInt;	  int    len    =    NR_INT;    	compilable	  [FE]  AssertionFailedError  	15	22	replace
82	[BUG]  [BUGGY]  int  len  =  _numberInt;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberInt;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberInt;	  int    len    =    NR_INT;    	compilable	  [FE]  AssertionFailedError  	15	22	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Integer  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	Integer  len  =  _inputEnd;	  int    len    =    _inputEnd;    Integer    len    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	2	21	replace
84	[BUG]  [BUGGY]  Integer  len  =  _inputEnd;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Integer  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	Integer  len  =  _inputEnd;	  int    len    =    _inputEnd;    Integer    len    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	2	21	replace
85	[BUG]  [BUGGY]  int  len  =  _inputStart;  Integer  len  =  _inputEnd;  [CE]  cannot  find  symbol  _inputStart  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputStart;  Integer  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputStart;  Integer  len  =  _inputEnd;	  int    len    =    _inputEnd;    Integer    len    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol  _inputStart	2	None	replace
86	[BUG]  [BUGGY]  Int  len  =  _numTypesValid;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Int  len  =  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	Int  len  =  _numTypesValid;	  int    len    =    _numTypesValid;    Int    len    =    _numTypesValid;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
87	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  Int  len  =  NR_INT;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid;  Int  len  =  NR_INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid;  Int  len  =  NR_INT;	  int    len    =    _numTypesValid;    Int    len    =    _numTypesValid;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
88	[BUG]  [BUGGY]  int  len  =  _inputEnd  -  1;  int  len  =  _inputEnd  -  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  -  1;  int  len  =  _inputEnd  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd    -    1;    int  len  =  _inputEnd  -  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	48	None	add
89	[BUG]  [BUGGY]  int  len  =  _inputEnd  -  1;  Integer  len  =  _inputEnd  -  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  -  1;  Integer  len  =  _inputEnd  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd    -    1;    Integer  len  =  _inputEnd  -  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	48	None	add
90	[BUG]  [BUGGY]  int  len  =  _inputEnd  -  1;  Int  len  =  _inputEnd  -  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  -  1;  Int  len  =  _inputEnd  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd    -    1;    Int  len  =  _inputEnd  -  1;	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
91	[BUG]  [BUGGY]  int  len  =  _inputEnd  -  1;  char  len  =  _inputEnd  -  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  -  1;  char  len  =  _inputEnd  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd    -    1;    char  len  =  _inputEnd  -  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	48	None	add
92	[BUG]  [BUGGY]  int  len  =  _numberInputCol.length;  [CE]  cannot  find  symbol  _numberInputCol  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberInputCol.length;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberInputCol.length;	  int    len    =    _expType.length;    	non-compiled	[CE]  cannot  find  symbol  _numberInputCol	5	None	replace
93	[BUG]  [BUGGY]  char  len  =  _expLength;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  char  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	char  len  =  _expLength;	  int    len    =    _expLength;    char    len    =    _expLength;    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
94	[BUG]  [BUGGY]  int  len  =  _expLength;  String  len  =  _expLength;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]                AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _expLength;  String  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _expLength;  String  len  =  _expLength;	  int    len    =    _expLength;    char    len    =    _expLength;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	25	None	replace
95	[BUG]  [BUGGY]  int  len  =  _numberNegative;  String  len  =  _expLength;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative;  String  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative;  String  len  =  _expLength;	  int    len    =    _expLength;    char    len    =    _expLength;    	non-compiled	[CE]  incompatible  types	25	None	replace
96	[BUG]  [BUGGY]  int  len  =  _currToken.length()  +  1;  [CE]  cannot  find  symbol  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currToken.length()  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.length()  +  1;	  int    len    =    _currToken.length();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
97	[BUG]  [BUGGY]  int  len  =  _currToken.length()  -  1;  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currToken.length()  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.length()  -  1;	  int    len    =    _currToken.length();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
98	[BUG]  [BUGGY]  int  len  =  NR_INT;  int  len  =  NR_INT;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  NR_INT;  int  len  =  NR_INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    NR_INT;    int  len  =  NR_INT;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	14	None	add
99	[BUG]  [BUGGY]  int  len  =  NR_INT;  Integer  len  =  NR_INT;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  NR_INT;  Integer  len  =  NR_INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    NR_INT;    Integer  len  =  NR_INT;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	14	None	add
100	[BUG]  [BUGGY]  int  len  =  NR_INT;  int  len  =  _numberNegative;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]        AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  NR_INT;  int  len  =  _numberNegative;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    NR_INT;    int  len  =  _numberNegative;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	14	None	add
101	[BUG]  [BUGGY]  int  len  =  NR_INT;  Int  len  =  NR_INT;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  NR_INT;  Int  len  =  NR_INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    NR_INT;    Int  len  =  NR_INT;	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputPtr  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _inputPtr  -  1;	  int    len    =    _inputEnd    -    1;    	compilable	  [FE]  AssertionFailedError  	49	21	replace
103	[BUG]  [BUGGY]  int  len  =  _inputPtr  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputPtr  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputPtr  -  1;	  int    len    =    _inputEnd    -    1;    	compilable	  [FE]  AssertionFailedError  	49	21	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  _inputEnd  :  _inputPtr  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numberNegative?  _inputEnd  :  _inputPtr  -  1;	  int    len    =    _inputEnd    -    1;    	compilable	  [FE]  AssertionFailedError  	49	21	replace
105	[BUG]  [BUGGY]  int  len  =  _numberNegative?  _inputEnd  :  _inputPtr  -  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  _inputEnd  :  _inputPtr  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  _inputEnd  :  _inputPtr  -  1;	  int    len    =    _inputEnd    -    1;    	compilable	  [FE]  AssertionFailedError  	49	21	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  _inputEnd  -  1  :  _inputPtr  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numberNegative?  _inputEnd  -  1  :  _inputPtr  -  1;	  int    len    =    _inputEnd    -    1;    	compilable	  [FE]  AssertionFailedError  	49	21	replace
107	[BUG]  [BUGGY]  int  len  =  _numberNegative?  _inputEnd  -  1  :  _inputPtr  -  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  _inputEnd  -  1  :  _inputPtr  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  _inputEnd  -  1  :  _inputPtr  -  1;	  int    len    =    _inputEnd    -    1;    	compilable	  [FE]  AssertionFailedError  	49	21	replace
108	[BUG]  [BUGGY]  int  len  =  _numberNegative  &  NR_INT  +  1;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative  &  NR_INT  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  &  NR_INT  +  1;	  int    len    =    _numberNegative    &    NR_INT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	43	None	replace
109	[BUG]  [BUGGY]  int  len  =  _numberNegative?  NR_INT  :  _numberNegative;  [CE]  incompatible  types  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  NR_INT  :  _numberNegative;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  NR_INT  :  _numberNegative;	  int    len    =    _numberNegative    &    NR_INT;    	non-compiled	[CE]  incompatible  types	43	None	replace
110	[BUG]  [BUGGY]  int  len  =  _numberNegative  &  NR_INT  ||  NR_INT;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative  &  NR_INT  ||  NR_INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  &  NR_INT  ||  NR_INT;	  int    len    =    _numberNegative    &    NR_INT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	43	None	replace
111	[BUG]  [BUGGY]  null  len  =  _numTypesValid;  int  len  =  NR_INT;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  null  len  =  _numTypesValid;  int  len  =  NR_INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	null  len  =  _numTypesValid;  int  len  =  NR_INT;	  int    len    =    _numTypesValid;    int    len    =    _numtypesValid;    	non-compiled	[CE]  not  a  statement	45	None	replace
112	[BUG]  [BUGGY]  int  len  =  _numberNegative;  Int  len  =  _expLength;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative;  Int  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative;  Int  len  =  _expLength;	  int    len    =    _expLength;    Int    len    =    _expLength;    	non-compiled	[CE]  incompatible  types	24	None	replace
113	[BUG]  [BUGGY]  int  len  =  _numberNegative.length;  Int  len  =  _expLength;  [CE]  boolean  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative.length;  Int  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length;  Int  len  =  _expLength;	  int    len    =    _expLength;    Int    len    =    _expLength;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	24	None	replace
114	[BUG]  [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _textBuffer.contentsAsInt(_numberNegative);    int  len  =  _textBuffer.contentsAsInt(_numberNegative);	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	38	None	add
115	[BUG]  [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  Integer  len  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]      JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  Integer  len  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _textBuffer.contentsAsInt(_numberNegative);    Integer  len  =  _textBuffer.contentsAsInt(_numberNegative);	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	38	None	add
116	[BUG]  [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  char  len  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]        JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  char  len  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _textBuffer.contentsAsInt(_numberNegative);    char  len  =  _textBuffer.contentsAsInt(_numberNegative);	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	38	None	add
117	[BUG]  [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  Int  len  =  _textBuffer.contentsAsInt(_numberNegative);  [CE]  cannot  find  symbol  [FE]          JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_numberNegative);  Int  len  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _textBuffer.contentsAsInt(_numberNegative);    Int  len  =  _textBuffer.contentsAsInt(_numberNegative);	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputPtr  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _inputPtr  +  1;	  int    len    =    _inputEnd    +    1;    	compilable	  [FE]  AssertionFailedError  	36	21	replace
119	[BUG]  [BUGGY]  int  len  =  _inputPtr  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputPtr  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputPtr  +  1;	  int    len    =    _inputEnd    +    1;    	compilable	  [FE]  AssertionFailedError  	36	21	replace
120	[BUG]  [BUGGY]  int  len  =  _numberNegative  /  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative  /  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  /  1;	  int    len    =    _numberNegative    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	42	None	replace
121	[BUG]  [BUGGY]  int  len  =  _numberNegative  -  1L;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative  -  1L;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  -  1L;	  int    len    =    _numberNegative    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	42	None	replace
122	[BUG]  [BUGGY]  int  len  =  _parsingContext.getValueLength()  +  1;  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _parsingContext.getValueLength()  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _parsingContext.getValueLength()  +  1;	  int    len    =    _parsingContext.getValueLength();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
123	[BUG]  [BUGGY]  int  len  =  _parseContext.getValueLength();  [CE]  cannot  find  symbol  _parseContext  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _parseContext.getValueLength();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _parseContext.getValueLength();	  int    len    =    _parsingContext.getValueLength();    	non-compiled	[CE]  cannot  find  symbol  _parseContext	41	None	replace
124	[BUG]  [BUGGY]  int  len  =  _inputEnd  +  1;  int  len  =  _inputStart  +  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  +  1;  int  len  =  _inputStart  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    _inputEnd    +    1;    int  len  =  _inputStart  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	35	None	add
125	[BUG]  [BUGGY]  int  len  =  _numberNegative  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative  +  1L;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  +  1L;	  int    len    =    _numberNegative    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	32	None	replace
126	[BUG]  [BUGGY]  int  len  =  _numberNegative  +  1  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative  +  1  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  +  1  +  1;	  int    len    =    _numberNegative    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	32	None	replace
127	[BUG]  [BUGGY]  int  len  =  _numTypesValid  +  1;  Int  len  =  _numTypesValid;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  +  1;  Int  len  =  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid  +  1;  Int  len  =  _numTypesValid;	  int    len    =    _numTypesValid;    Int    len    =    _numTypesValid;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
128	[BUG]  [BUGGY]  int  len  =  _numTypesValid.length;  Int  len  =  _numTypesValid;  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid.length;  Int  len  =  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid.length;  Int  len  =  _numTypesValid;	  int    len    =    _numTypesValid;    Int    len    =    _numTypesValid;    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
129	[BUG]  [BUGGY]  int  len  =  _numberNegative?  -1  :  _numberNegative  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  -1  :  _numberNegative  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  -1  :  _numberNegative  +  1;	  int    len    =    _numberNegative?    -1    :    _numberNegative;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	33	None	replace
130	[BUG]  [BUGGY]  int  len  =  _numberNegative?  -1  :  _currNegative;  [CE]  cannot  find  symbol  _currNegative  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  -1  :  _currNegative;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  -1  :  _currNegative;	  int    len    =    _numberNegative?    -1    :    _numberNegative;    	non-compiled	[CE]  cannot  find  symbol  _currNegative	33	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _expLength  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _expLength  -  1;	  int    len    =    _expLength;    int    len    =    _expLength;    	compilable	  [FE]  AssertionFailedError  	22	22	replace
132	[BUG]  [BUGGY]  int  len  =  _expLength  -  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _expLength  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _expLength  -  1;	  int    len    =    _expLength;    int    len    =    _expLength;    	compilable	  [FE]  AssertionFailedError  	22	22	replace
133	[BUG]  [BUGGY]  int  len  =  _inputEnd  -  1;  int  len  =  _inputStart;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  -  1;  int  len  =  _inputStart;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd  -  1;  int  len  =  _inputStart;	  int    len    =    _inputEnd;    int    len    =    _inputStart;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	3	None	replace
134	[BUG]  [BUGGY]  int  len  =  _inputEnd  +  1;  int  len  =  _inputStart;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  +  1;  int  len  =  _inputStart;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd  +  1;  int  len  =  _inputStart;	  int    len    =    _inputEnd;    int    len    =    _inputStart;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	3	None	replace
135	[BUG]  [BUGGY]  int  len  =  _inputEnd;  int  len  =  _inputStart  +  1;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]                AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd;  int  len  =  _inputStart  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd;  int  len  =  _inputStart  +  1;	  int    len    =    _inputEnd;    int    len    =    _inputStart;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	3	None	replace
136	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  NR_INT);  [CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  NR_INT);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	_parsingContext.setCurrentName(_numberNegative,  NR_INT);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;	28	None	replace
137	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  _currentToken);  [CE]  cannot  find  symbol  _currentToken  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  _currentToken);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	_parsingContext.setCurrentName(_numberNegative,  _currentToken);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  cannot  find  symbol  _currentToken	28	None	replace
138	[BUG]  [BUGGY]  int  len  =  _textBuffer.getValueLength();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.getValueLength();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _textBuffer.getValueLength();	  int    len    =    _parsingContext.getValueLength();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
139	[BUG]  [BUGGY]  int  len  =  NR_INT;  int  len  =  _INT;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  NR_INT;  int  len  =  _INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int    len    =    NR_INT;    int  len  =  _INT;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	14	None	add
140	[BUG]  [BUGGY]  Integer  len  =  _currNegative.getLength();  [CE]  cannot  find  symbol  _currNegative  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  Integer  len  =  _currNegative.getLength();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	Integer  len  =  _currNegative.getLength();	  Integer    len    =    _numberNegative.getLength();    	non-compiled	[CE]  cannot  find  symbol  _currNegative	47	None	replace
141	[BUG]  [BUGGY]  int  len  =  _numberNegative  &  NR_INT  -  1;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative  &  NR_INT  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  &  NR_INT  -  1;	  int    len    =    _numberNegative    &    NR_INT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	43	None	replace
142	[BUG]  [BUGGY]  int  len  =  _numberNegative  &  NR_INT  |  NR_BIGINT;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative  &  NR_INT  |  NR_BIGINT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  &  NR_INT  |  NR_BIGINT;	  int    len    =    _numberNegative    &    NR_INT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	43	None	replace
143	[BUG]  [BUGGY]  short  len  =  _textBuffer.contentsAsLong(_numberNegative);  [CE]  possible  loss  of  precision  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  short  len  =  _textBuffer.contentsAsLong(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	short  len  =  _textBuffer.contentsAsLong(_numberNegative);	  int    len    =    _textBuffer.contentsAsLong(_numberNegative);    	non-compiled	[CE]  possible  loss  of  precision	40	None	replace
144	[BUG]  [BUGGY]  int  len  =  _numberNegative.length  +  1L;  [CE]  boolean  cannot  be  dereferenced  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative.length  +  1L;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length  +  1L;	  int    len    =    _numberNegative.length    +    1;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	30	None	replace
145	[BUG]  [BUGGY]  float  len  =  _numTypesValid;  int  len  =  _numTypesValid;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  float  len  =  _numTypesValid;  int  len  =  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	float  len  =  _numTypesValid;  int  len  =  _numTypesValid;	  int    len    =    _numTypesValid;    int    len    =    _numTypesValid;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	6	None	replace
146	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  int  len  =  NR_INT;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid;  int  len  =  NR_INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid;  int  len  =  NR_INT;	  int    len    =    _numTypesValid;    int    len    =    _numTypesValid;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	6	None	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  /  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _inputEnd  /  1;	  int    len    =    _inputEnd    +    1;    	compilable	  [FE]  AssertionFailedError  	36	21	replace
148	[BUG]  [BUGGY]  int  len  =  _inputEnd  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  /  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd  /  1;	  int    len    =    _inputEnd    +    1;    	compilable	  [FE]  AssertionFailedError  	36	21	replace
149	[BUG]  [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_currNegative);  [CE]  cannot  find  symbol  _currNegative  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.contentsAsInt(_currNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _textBuffer.contentsAsInt(_currNegative);	  int    len    =    _textBuffer.contentsAsInt(_numberNegative);    	non-compiled	[CE]  cannot  find  symbol  _currNegative	39	None	replace
150	[BUG]  [BUGGY]  int  len  =  _expLength  -  1;  Int  len  =  _expLength;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _expLength  -  1;  Int  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _expLength  -  1;  Int  len  =  _expLength;	  int    len    =    _expLength;    Int    len    =    _expLength;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
151	[BUG]  [BUGGY]  int  len  =  _expLength  +  1;  Int  len  =  _expLength;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _expLength  +  1;  Int  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _expLength  +  1;  Int  len  =  _expLength;	  int    len    =    _expLength;    Int    len    =    _expLength;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
152	[BUG]  [BUGGY]  int  len  =  _numberNegative  -  1  +  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative  -  1  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative  -  1  +  1;	  int    len    =    _numberNegative    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	42	None	replace
153	[BUG]  [BUGGY]  int  len  =  _currNegative.length();  [CE]  cannot  find  symbol  _currNegative  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currNegative.length();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currNegative.length();	  int    len    =    _currToken.length();    	non-compiled	[CE]  cannot  find  symbol  _currNegative	13	None	replace
154	[BUG]  [BUGGY]  int  len  =  _numberNegative.length  -  1L;  [CE]  boolean  cannot  be  dereferenced  [FE]            JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative.length  -  1L;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length  -  1L;	  int    len    =    _numberNegative.length    -    1;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	29	None	replace
155	[BUG]  [BUGGY]  int  len  =  _currToken.length  -  1  +  1;  [CE]  cannot  find  symbol  length  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currToken.length  -  1  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.length  -  1  +  1;	  int    len    =    _currToken.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  length	11	None	replace
156	[BUG]  [BUGGY]  int  len  =  _currToken.length  -  4;  [CE]  cannot  find  symbol  length  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currToken.length  -  4;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.length  -  4;	  int    len    =    _currToken.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  length	11	None	replace
157	[BUG]  [BUGGY]  int  len  =  _numTypesValid  +  1;  Integer  len  =  _numTypesValid;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  +  1;  Integer  len  =  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid  +  1;  Integer  len  =  _numTypesValid;	  int    len    =    _numTypesValid;    Integer    len    =    _numTypesValid;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	7	None	replace
158	[BUG]  [BUGGY]  int  len  =  _currToken.length  +  2;  [CE]  cannot  find  symbol  length  [FE]                  JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currToken.length  +  2;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.length  +  2;	  int    len    =    _currToken.length    +    1;    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
159	[BUG]  [BUGGY]  int  len  =  _expLength  +  1;  Integer  len  =  _expLength;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _expLength  +  1;  Integer  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _expLength  +  1;  Integer  len  =  _expLength;	  int    len    =    _expLength;    Integer    len    =    _expLength;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	23	None	replace
160	[BUG]  [BUGGY]  float  len  =  _numTypesValid;  float  len  =  _numtypesValid;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  float  len  =  _numTypesValid;  float  len  =  _numtypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	float  len  =  _numTypesValid;  float  len  =  _numtypesValid;	  int    len    =    _numTypesValid;    int    len    =    _numtypesValid;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	45	None	replace
161	[BUG]  [BUGGY]  int  len  =  _inputEnd  -  _inputPtr;  Int  len  =  _inputEnd;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  -  _inputPtr;  Int  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd  -  _inputPtr;  Int  len  =  _inputEnd;	  int    len    =    _inputEnd;    Int    len    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
162	[BUG]  [BUGGY]  int  len  =  _inputEnd  +  1;  Int  len  =  _inputEnd;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  +  1;  Int  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd  +  1;  Int  len  =  _inputEnd;	  int    len    =    _inputEnd;    Int    len    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  -  2;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _inputEnd  -  2;	  int    len    =    _inputEnd    -    1;    	compilable	  [FE]  AssertionFailedError  	49	21	replace
164	[BUG]  [BUGGY]  int  len  =  _inputEnd  -  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  -  2;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd  -  2;	  int    len    =    _inputEnd    -    1;    	compilable	  [FE]  AssertionFailedError  	49	21	replace
165	[BUG]  [BUGGY]  int  len  =  _numberNegative?  0  :  _numberNegative  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  0  :  _numberNegative  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  0  :  _numberNegative  +  1;	  int    len    =    _numberNegative?    0    :    _numberNegative;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	31	None	replace
166	[BUG]  [BUGGY]  int  len  =  _numberNegative?  0  :  _currNegative;  [CE]  cannot  find  symbol  _currNegative  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  0  :  _currNegative;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  0  :  _currNegative;	  int    len    =    _numberNegative?    0    :    _numberNegative;    	non-compiled	[CE]  cannot  find  symbol  _currNegative	31	None	replace
167	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  char  len  =  NR_INT;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid;  char  len  =  NR_INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid;  char  len  =  NR_INT;	  int    len    =    _numTypesValid;    char    len    =    _numTypesValid;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	9	None	replace
168	[BUG]  [BUGGY]  int  len  =  _textBuffer.getLength();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _textBuffer.getLength();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _textBuffer.getLength();	  int    len    =    _parsingContext.getLength();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  -  1  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numTypesValid  -  1  +  1;	  int    len    =    _numTypesValid    -    1;    	compilable	  [FE]  AssertionFailedError  	19	22	replace
170	[BUG]  [BUGGY]  int  len  =  _numTypesValid  -  1  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid  -  1  +  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid  -  1  +  1;	  int    len    =    _numTypesValid    -    1;    	compilable	  [FE]  AssertionFailedError  	19	22	replace
171	[BUG]  [BUGGY]  int  len  =  _parsingContext._currToken.length();  [CE]  cannot  find  symbol  _currToken  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _parsingContext._currToken.length();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _parsingContext._currToken.length();	  int    len    =    _currToken.length();    	non-compiled	[CE]  cannot  find  symbol  _currToken	13	None	replace
172	[BUG]  [BUGGY]  int  len  =  _inputStart;  char  len  =  _inputEnd;  [CE]  cannot  find  symbol  _inputStart  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputStart;  char  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputStart;  char  len  =  _inputEnd;	  int    len    =    _inputEnd;    char    len    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol  _inputStart	4	None	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _tokenInputCol;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _tokenInputCol;	  int    len    =    _expType;    	compilable	  [FE]  AssertionFailedError  	34	22	replace
174	[BUG]  [BUGGY]  int  len  =  _tokenInputCol;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _tokenInputCol;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _tokenInputCol;	  int    len    =    _expType;    	compilable	  [FE]  AssertionFailedError  	34	22	replace
175	[BUG]  [BUGGY]  int  len  =  _inputEnd;  Integer  len  =  _currToken;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd;  Integer  len  =  _currToken;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd;  Integer  len  =  _currToken;	  int    len    =    _inputEnd;    Integer    len    =    _inputEnd;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	2	None	replace
176	[BUG]  [BUGGY]  int  len  =  _numberNegative;  Int  len  =  _numTypesValid;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative;  Int  len  =  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative;  Int  len  =  _numTypesValid;	  int    len    =    _numTypesValid;    Int    len    =    _numTypesValid;    	non-compiled	[CE]  incompatible  types	8	None	replace
177	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  Int  len  =  _inputPtr;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid;  Int  len  =  _inputPtr;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid;  Int  len  =  _inputPtr;	  int    len    =    _numTypesValid;    Int    len    =    _numTypesValid;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
178	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  Int  len  =  _inputLength;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid;  Int  len  =  _inputLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid;  Int  len  =  _inputLength;	  int    len    =    _numTypesValid;    Int    len    =    _numTypesValid;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  NR_INT  :  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numberNegative?  NR_INT  :  _numTypesValid;	  int    len    =    NR_INT;    	compilable	  [FE]  AssertionFailedError  	15	22	replace
180	[BUG]  [BUGGY]  int  len  =  _numberNegative?  NR_INT  :  _numTypesValid;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  NR_INT  :  _numTypesValid;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  NR_INT  :  _numTypesValid;	  int    len    =    NR_INT;    	compilable	  [FE]  AssertionFailedError  	15	22	replace
181	[BUG]  [BUGGY]  int  len  =  _inputEnd  -  _inputStart;  [CE]  cannot  find  symbol  _inputStart  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd  -  _inputStart;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd  -  _inputStart;	  int    len    =    _inputEnd;    int    len    =    _inputStart;    	non-compiled	[CE]  cannot  find  symbol  _inputStart	3	None	replace
182	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  char  len  =  _inputPtr;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid;  char  len  =  _inputPtr;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid;  char  len  =  _inputPtr;	  int    len    =    _numTypesValid;    char    len    =    _numTypesValid;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	9	None	replace
183	[BUG]  [BUGGY]  int  len  =  _parsingContext._currToken.length  -  1;  [CE]  cannot  find  symbol  _currToken  [FE]                JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _parsingContext._currToken.length  -  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _parsingContext._currToken.length  -  1;	  int    len    =    _currToken.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  _currToken	11	None	replace
184	[BUG]  [BUGGY]  int  len  =  _currToken.getValueLength();  [CE]  cannot  find  symbol  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _currToken.getValueLength();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _currToken.getValueLength();	  int    len    =    _parsingContext.getValueLength();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
185	[BUG]  [BUGGY]  int  len  =  _numberNegative.length()  *  2;  [CE]  boolean  cannot  be  dereferenced  [FE]                    JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative.length()  *  2;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length()  *  2;	  int    len    =    _numberNegative.length();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	26	None	replace
186	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  Integer  len  =  _inputPtr;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid;  Integer  len  =  _inputPtr;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid;  Integer  len  =  _inputPtr;	  int    len    =    _numTypesValid;    Integer    len    =    _numTypesValid;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	7	None	replace
187	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  Integer  len  =  _inputEnd;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid;  Integer  len  =  _inputEnd;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid;  Integer  len  =  _inputEnd;	  int    len    =    _numTypesValid;    Integer    len    =    _numTypesValid;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	7	None	replace
188	[BUG]  [BUGGY]  int  len  =  _numTypesValid;  Integer  len  =  _inputLength;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numTypesValid;  Integer  len  =  _inputLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numTypesValid;  Integer  len  =  _inputLength;	  int    len    =    _numTypesValid;    Integer    len    =    _numTypesValid;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	7	None	replace
189	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  _tokenInputCol);  [CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  _tokenInputCol);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	_parsingContext.setCurrentName(_numberNegative,  _tokenInputCol);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;	28	None	replace
190	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  _tokenInputBuffer);  [CE]  cannot  find  symbol  _tokenInputBuffer  [FE]                          JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  _tokenInputBuffer);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	_parsingContext.setCurrentName(_numberNegative,  _tokenInputBuffer);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  cannot  find  symbol  _tokenInputBuffer	28	None	replace
191	[BUG]  [BUGGY]  int  len  =  _parsingContext.readLine();  [CE]  cannot  find  symbol  [FE]                      JsonParseException      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _parsingContext.readLine();  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _parsingContext.readLine();	  int    len    =    _parsingContext.getLength();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
192	[BUG]  [BUGGY]  int  len  =  _numberNegative.length;  Integer  len  =  _expLength;  [CE]  boolean  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative.length;  Integer  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative.length;  Integer  len  =  _expLength;	  int    len    =    _expLength;    Integer    len    =    _expLength;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	23	None	replace
193	[BUG]  [BUGGY]  int  len  =  _inputEnd;  Integer  len  =  _expLength;  [CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd;  Integer  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd;  Integer  len  =  _expLength;	  int    len    =    _expLength;    Integer    len    =    _expLength;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  _parseNumericValue(int)	23	None	replace
194	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  long  len  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	long  len  =  _textBuffer.contentsAsInt(_numberNegative);	  int    len    =    _textBuffer.contentsAsInt(_numberNegative);    	compilable	  [FE]  JsonParseException  	39	19	replace
195	[BUG]  [BUGGY]  long  len  =  _textBuffer.contentsAsInt(_numberNegative);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  long  len  =  _textBuffer.contentsAsInt(_numberNegative);  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	long  len  =  _textBuffer.contentsAsInt(_numberNegative);	  int    len    =    _textBuffer.contentsAsInt(_numberNegative);    	compilable	  [FE]  JsonParseException  	39	19	replace
196	[BUG]  [BUGGY]  int  len  =  _inputEnd;  Int  len  =  _expLength;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputEnd;  Int  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputEnd;  Int  len  =  _expLength;	  int    len    =    _expLength;    Int    len    =    _expLength;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
197	[BUG]  [BUGGY]  int  len  =  _inputPtr;  Int  len  =  _expLength;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _inputPtr;  Int  len  =  _expLength;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _inputPtr;  Int  len  =  _expLength;	  int    len    =    _expLength;    Int    len    =    _expLength;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
198	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  _numTypesValid  :  NR_INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numberNegative?  _numTypesValid  :  NR_INT;	  int    len    =    _numTypesValid    -    1;    	compilable	  [FE]  AssertionFailedError  	19	22	replace
199	[BUG]  [BUGGY]  int  len  =  _numberNegative?  _numTypesValid  :  NR_INT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  _numTypesValid  :  NR_INT;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  _numTypesValid  :  NR_INT;	  int    len    =    _numTypesValid    -    1;    	compilable	  [FE]  AssertionFailedError  	19	22	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  _numTypesValid  :  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	int  len  =  _numberNegative?  _numTypesValid  :  1;	  int    len    =    _numTypesValid    -    1;    	compilable	  [FE]  AssertionFailedError  	19	22	replace
201	[BUG]  [BUGGY]  int  len  =  _numberNegative?  _numTypesValid  :  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {      [BUGGY]  int  len  =  _numberNegative?  _numTypesValid  :  1;  [BUGGY]        if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	int  len  =  _numberNegative?  _numTypesValid  :  1;	  int    len    =    _numTypesValid    -    1;    	compilable	  [FE]  AssertionFailedError  	19	22	replace
