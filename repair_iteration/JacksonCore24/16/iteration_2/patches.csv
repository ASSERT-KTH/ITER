bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_NULL)  {  [CE]  cannot  find  symbol  NR_NULL  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numTypesValid  ==  NR_NULL)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid  ==  NR_NULL)  {	  if(result    ==    0)    {    if(result    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  NR_NULL	49	None	replace
2	[BUG]  [BUGGY]  result  =  Math.min(result,  NR_DOUBLE);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  NR_DOUBLE);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  NR_DOUBLE);	  result    =    Math.min(result,    _numTypesValid);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
3	[BUG]  [BUGGY]  result  =  Math.min(_numTypesValid,  result);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(_numTypesValid,  result);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(_numTypesValid,  result);	  result    =    Math.min(result,    _numTypesValid);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
4	[BUG]  [BUGGY]  result  =  Math.min(result,  _numTypesValid  +  1);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numTypesValid  +  1);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numTypesValid  +  1);	  result    =    Math.min(result,    _numTypesValid);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
5	[BUG]  [BUGGY]  result  =  Math.min(result,  NR_LONG);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  NR_LONG);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  NR_LONG);	  result    =    Math.min(result,    _numTypesValid);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
6	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	86	8	replace
7	[BUG]  [BUGGY]  if(result!=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	86	8	replace
8	[BUG]  [BUGGY]  ||  result  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  ||  result  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	||  result  ==  0)  {	  if(result    ==    0)    {    If(result    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
9	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid!=    NR_UNKNOWN)    {    if(_numTypesValid!=  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
10	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  >=  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  >=  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid!=    NR_UNKNOWN)    {    if(_numTypesValid  >=  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
11	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  >>  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  >>  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid!=    NR_UNKNOWN)    {    if(_numTypesValid  >>  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
12	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid!=    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
13	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  =  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  =  _numTypesValid  &  NR_DOUBLE)!=  0)  {	  if((    _numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	90	8	replace
14	[BUG]  [BUGGY]  if((  result  =  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  =  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  =  _numTypesValid  &  NR_DOUBLE)!=  0)  {	  if((    _numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	90	8	replace
15	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	84	8	replace
16	[BUG]  [BUGGY]  if(result!=  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	84	8	replace
17	[BUG]  [BUGGY]  if(result!=  NR_LONG.intValue())  {  [CE]  int  cannot  be  dereferenced  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  NR_LONG.intValue())  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  NR_LONG.intValue())  {	  if(result!=    _numberInt.intValue())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	82	None	replace
18	[BUG]  [BUGGY]  if(result!=  NR_MIN_INT.intValue())  {  [CE]  cannot  find  symbol  NR_MIN_INT  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  NR_MIN_INT.intValue())  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  NR_MIN_INT.intValue())  {	  if(result!=    _numberInt.intValue())    {    	non-compiled	[CE]  cannot  find  symbol  NR_MIN_INT	82	None	replace
19	[BUG]  [BUGGY]  if(result!=  NR_BIGINT.intValue())  {  [CE]  int  cannot  be  dereferenced  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  NR_BIGINT.intValue())  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  NR_BIGINT.intValue())  {	  if(result!=    _numberInt.intValue())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	82	None	replace
20	[BUG]  [BUGGY]  if(result  <  0  ||  result  >  MIN_VALUE_NUMBER_INT)  {  [CE]  cannot  find  symbol  MIN_VALUE_NUMBER_INT  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  <  0  ||  result  >  MIN_VALUE_NUMBER_INT)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  <  0  ||  result  >  MIN_VALUE_NUMBER_INT)  {	  if(result    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE_NUMBER_INT	44	None	replace
21	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_BIGDECIMAL)!=    0)    {    if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
22	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  if((  _numTypesValid  &  NR_BIGDECIMAL)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  if((  _numTypesValid  &  NR_BIGDECIMAL)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_BIGDECIMAL)!=    0)    {    if((  _numTypesValid  &  NR_BIGDECIMAL)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
23	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  if((  _numTypesValid  &  NR_BIGDECIMAL)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  if((  _numTypesValid  &  NR_BIGDECIMAL)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_BIGDECIMAL)!=    0)    {    if((  _numTypesValid  &  NR_BIGDECIMAL)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
24	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  if((  _numTypesValid  &  NR_BIGDECIMAL)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  if((  _numTypesValid  &  NR_BIGDECIMAL)  >>  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_BIGDECIMAL)!=    0)    {    if((  _numTypesValid  &  NR_BIGDECIMAL)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
25	[BUG]  [BUGGY]  If((  _numTypesValid  &  NR_INT)!=  0)  {  [CE]  ';'  expected  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  If((  _numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	If((  _numTypesValid  &  NR_INT)!=  0)  {	  if((    _numTypesValid    &    NR_INT)!=    0)    {    If((    _numTypesValid    &    NR_INT)!=    0)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
26	[BUG]  [BUGGY]  if(result  ==  0)  {  If((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [CE]  ';'  expected  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  If((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  If((  _numTypesValid  &  NR_DOUBLE)!=  0)  {	  if(((long)result)!=    0)    {    If(((long)result)!=    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
27	[BUG]  [BUGGY]  if(result!=  0)  {  If((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [CE]  ';'  expected  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0)  {  If((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0)  {  If((  _numTypesValid  &  NR_DOUBLE)!=  0)  {	  if(((long)result)!=    0)    {    If(((long)result)!=    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
28	[BUG]  [BUGGY]  if(result  ==  0)  {  If((  _numTypesValid  &  NR_LONG)!=  0)  {  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  If((  _numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  If((  _numTypesValid  &  NR_LONG)!=  0)  {	  if(((long)result)!=    0)    {    If(((long)result)!=    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
29	[BUG]  [BUGGY]  if(result  ==  0)  {  If((  _numTypesValid  &  NR_INT)!=  0)  {  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  If((  _numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  If((  _numTypesValid  &  NR_INT)!=  0)  {	  if(((long)result)!=    0)    {    If(((long)result)!=    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
30	[BUG]  [BUGGY]  if(result  <  0)  {  if(result  <  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  <  0)  {  if(result  <  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    <    0)    {    if(result  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
31	[BUG]  [BUGGY]  if(result  <  0)  {  If(result  <  0)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  <  0)  {  If(result  <  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    <    0)    {    If(result  <  0)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
32	[BUG]  [BUGGY]  if(result  <  0)  {  if(result  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  <  0)  {  if(result  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    <    0)    {    if(result  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
33	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  NR_UNKNOWN)  {	  if(_numTypesValid!=    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	72	8	replace
34	[BUG]  [BUGGY]  if(result  ==  NR_UNKNOWN)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  NR_UNKNOWN)  {	  if(_numTypesValid!=    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	72	8	replace
35	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  NR_UNKNOWN)  {	  if(_numTypesValid!=    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	72	8	replace
36	[BUG]  [BUGGY]  if(result!=  NR_UNKNOWN)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  NR_UNKNOWN)  {	  if(_numTypesValid!=    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	72	8	replace
37	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberLong.intValue());  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numberLong.intValue());  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberLong.intValue());	  result    =    Math.min(result,    _numberInt.intValue());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
38	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberInt.intValue()  -  1);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numberInt.intValue()  -  1);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberInt.intValue()  -  1);	  result    =    Math.min(result,    _numberInt.intValue());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_BIGDECIMAL)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  &  NR_BIGDECIMAL)!=  0)  {	  if((    _numTypesValid    &    NR_BIGDECIMAL)!=    0)    {    	compilable	  [FE]  JsonParseException  	88	9	replace
40	[BUG]  [BUGGY]  if((  result  &  NR_BIGDECIMAL)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_BIGDECIMAL)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  &  NR_BIGDECIMAL)!=  0)  {	  if((    _numTypesValid    &    NR_BIGDECIMAL)!=    0)    {    	compilable	  [FE]  JsonParseException  	88	9	replace
41	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  _numTypesValid  &  NR_BIGDECIMAL)  ==  0)  {	  if((    _numTypesValid    &    NR_BIGDECIMAL)!=    0)    {    	compilable	  [FE]  JsonParseException  	88	8	replace
42	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)  ==  0)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  _numTypesValid  &  NR_BIGDECIMAL)  ==  0)  {	  if((    _numTypesValid    &    NR_BIGDECIMAL)!=    0)    {    	compilable	  [FE]  JsonParseException  	88	8	replace
43	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  =  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  =  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {	  if((    _numTypesValid    &    NR_BIGDECIMAL)!=    0)    {    	compilable	  [FE]  JsonParseException  	88	8	replace
44	[BUG]  [BUGGY]  if((  result  =  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  =  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  =  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {	  if((    _numTypesValid    &    NR_BIGDECIMAL)!=    0)    {    	compilable	  [FE]  JsonParseException  	88	8	replace
45	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  Long.MIN_VALUE  ||  result  ==  Long.MAX_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  Long.MIN_VALUE  ||  result  ==  Long.MAX_VALUE)  {	  if(result!=    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	28	8	replace
46	[BUG]  [BUGGY]  if(result!=  Long.MIN_VALUE  ||  result  ==  Long.MAX_VALUE)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  Long.MIN_VALUE  ||  result  ==  Long.MAX_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  Long.MIN_VALUE  ||  result  ==  Long.MAX_VALUE)  {	  if(result!=    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	28	8	replace
47	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Long.MIN_VALUE  ||  result!=  Long.MAX_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  Long.MIN_VALUE  ||  result!=  Long.MAX_VALUE)  {	  if(result!=    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	28	8	replace
48	[BUG]  [BUGGY]  if(result  ==  Long.MIN_VALUE  ||  result!=  Long.MAX_VALUE)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Long.MIN_VALUE  ||  result!=  Long.MAX_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  Long.MIN_VALUE  ||  result!=  Long.MAX_VALUE)  {	  if(result!=    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	28	8	replace
49	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(result);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(result);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(result);	  _parsingContext    =    JsonReadContext.createRootContext();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
50	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(true);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(true);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(true);	  _parsingContext    =    JsonReadContext.createRootContext();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
51	[BUG]  [BUGGY]  if(result  >  0)  {  if(result  >  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >  0)  {  if(result  >  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >    0)    {    if(result  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
52	[BUG]  [BUGGY]  if(result  >  0)  {  int  result  =(int)_numberLong.intValue();  if(result  >  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >  0)  {  int  result  =(int)_numberLong.intValue();  if(result  >  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >    0)    {    int  result  =(int)_numberLong.intValue();  if(result  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
53	[BUG]  [BUGGY]  if(result  >  0)  {  int  result  =(int)_numberInt.intValue();  if(result  >  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >  0)  {  int  result  =(int)_numberInt.intValue();  if(result  >  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >    0)    {    int  result  =(int)_numberInt.intValue();  if(result  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
54	[BUG]  [BUGGY]  if(result  >  0)  {  int  result  =(int)_numberLong.intValue();  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >  0)  {  int  result  =(int)_numberLong.intValue();  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >    0)    {    int  result  =(int)_numberLong.intValue();	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
55	[BUG]  [BUGGY]  if(result!=  Long.MIN_VALUE)  {  if(result!=  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  Long.MIN_VALUE)  {  if(result!=  Long.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    Long.MIN_VALUE)    {    if(result!=  Long.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
56	[BUG]  [BUGGY]  if(result!=  Long.MIN_VALUE)  {  if(result  ==  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  Long.MIN_VALUE)  {  if(result  ==  Long.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    Long.MIN_VALUE)    {    if(result  ==  Long.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
57	[BUG]  [BUGGY]  if(result!=  Long.MIN_VALUE)  {  if(result  >=  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  Long.MIN_VALUE)  {  if(result  >=  Long.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    Long.MIN_VALUE)    {    if(result  >=  Long.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
58	[BUG]  [BUGGY]  if(result!=  Long.MIN_VALUE)  {  if(result  >>  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  Long.MIN_VALUE)  {  if(result  >>  Long.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    Long.MIN_VALUE)    {    if(result  >>  Long.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
59	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  &  NR_LONG)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	62	9	replace
60	[BUG]  [BUGGY]  if((  result  &  NR_LONG)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  &  NR_LONG)!=  0)  {	  if((    _numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	62	9	replace
61	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  _numTypesValid  &  NR_LONG)  ==  0)  {	  if((    _numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	62	8	replace
62	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  _numTypesValid  &  NR_LONG)  ==  0)  {	  if((    _numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	62	8	replace
63	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
64	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  if(result!=  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  if(result!=  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    if(result!=  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
65	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
66	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  if(result  >=  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  if(result  >=  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    if(result  >=  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
67	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt  [CE]  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigDecimal)>    0    ||    BI_MAX_INT.compareTo(_numberBigDecimal)    <    0)    {    reportOverflowInt    	non-compiled	[CE]  	67	None	replace
68	[BUG]  [BUGGY]  if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt  [CE]  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigDecimal)>    0    ||    BI_MAX_INT.compareTo(_numberBigDecimal)    <    0)    {    reportOverflowInt    	non-compiled	[CE]  	67	None	replace
69	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  <  0)||(result  >  0))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  <  0)||(result  >  0))  {	  if(((long)result)!=    0)    {    if(((long)result)    >=    0)    {    	compilable	  [FE]  JsonParseException  	36	8	replace
70	[BUG]  [BUGGY]  if((  result  <  0)||(result  >  0))  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  <  0)||(result  >  0))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  <  0)||(result  >  0))  {	  if(((long)result)!=    0)    {    if(((long)result)    >=    0)    {    	compilable	  [FE]  JsonParseException  	36	8	replace
71	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_LONG)!=    0)    {    if((  _numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
72	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0)  {  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0)  {  if((  _numTypesValid  &  NR_LONG)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_LONG)!=    0)    {    if((  _numTypesValid  &  NR_LONG)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
73	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0)  {  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0)  {  if((  _numTypesValid  &  NR_LONG)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_LONG)!=    0)    {    if((  _numTypesValid  &  NR_LONG)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
74	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0)  {  if((  _numTypesValid  &  NR_LONG)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0)  {  if((  _numTypesValid  &  NR_LONG)  >>  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_LONG)!=    0)    {    if((  _numTypesValid  &  NR_LONG)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
75	[BUG]  [BUGGY]  if(result  ==  Long.MIN_VALUE)  {  if(result  ==  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Long.MIN_VALUE)  {  if(result  ==  Long.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    Long.MIN_VALUE)    {    if(result  ==  Long.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
76	[BUG]  [BUGGY]  if(result  ==  Long.MIN_VALUE)  {  if(result!=  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Long.MIN_VALUE)  {  if(result!=  Long.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    Long.MIN_VALUE)    {    if(result!=  Long.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
77	[BUG]  [BUGGY]  if(result  ==  Long.MIN_VALUE)  {  if(result  >=  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Long.MIN_VALUE)  {  if(result  >=  Long.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    Long.MIN_VALUE)    {    if(result  >=  Long.MIN_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
78	[BUG]  [BUGGY]  if(result  ==  Long.MIN_VALUE)  {  If(result  ==  Long.MIN_VALUE)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Long.MIN_VALUE)  {  If(result  ==  Long.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    Long.MIN_VALUE)    {    If(result  ==  Long.MIN_VALUE)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
79	[BUG]  [BUGGY]  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigDecimal)>    0    ||    BI_MAX_INT.compareTo(_numberBigDecimal)    <    0)    {    reportOverflowInt();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
80	[BUG]  [BUGGY]  if((  result  &  NR_INT)!=  0)  {  if((  result  &  NR_INT)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_INT)!=  0)  {  if((  result  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    result    &    NR_INT)!=    0)    {    if((  result  &  NR_INT)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
81	[BUG]  [BUGGY]  if((  result  &  NR_INT)!=  0)  {  if((  result  &  NR_INT)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_INT)!=  0)  {  if((  result  &  NR_INT)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    result    &    NR_INT)!=    0)    {    if((  result  &  NR_INT)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
82	[BUG]  [BUGGY]  if((  result  &  NR_INT)!=  0)  {  if((  result  &  NR_INT)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_INT)!=  0)  {  if((  result  &  NR_INT)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    result    &    NR_INT)!=    0)    {    if((  result  &  NR_INT)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
83	[BUG]  [BUGGY]  if((  result  &  NR_INT)!=  0)  {  if((  result  &  NR_INT)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_INT)!=  0)  {  if((  result  &  NR_INT)  >>  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    result    &    NR_INT)!=    0)    {    if((  result  &  NR_INT)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
84	[BUG]  [BUGGY]  ((  _numTypesValid  &  NR_DOUBLE)  ==  0));  [CE]  not  a  statement  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  ((  _numTypesValid  &  NR_DOUBLE)  ==  0));  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	((  _numTypesValid  &  NR_DOUBLE)  ==  0));	  ((    _numTypesValid    &    NR_DOUBLE)!=    0));    	non-compiled	[CE]  not  a  statement	2	None	replace
85	[BUG]  [BUGGY]  ((  _numTypesValid  &  NR_DOUBLE)  >=  0));  [CE]  not  a  statement  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  ((  _numTypesValid  &  NR_DOUBLE)  >=  0));  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	((  _numTypesValid  &  NR_DOUBLE)  >=  0));	  ((    _numTypesValid    &    NR_DOUBLE)!=    0));    	non-compiled	[CE]  not  a  statement	2	None	replace
86	[BUG]  [BUGGY]  ((  _numTypesValid  &  NR_LONG)!=  0));  [CE]  not  a  statement  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  ((  _numTypesValid  &  NR_LONG)!=  0));  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	((  _numTypesValid  &  NR_LONG)!=  0));	  ((    _numTypesValid    &    NR_DOUBLE)!=    0));    	non-compiled	[CE]  not  a  statement	2	None	replace
87	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||  result!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  0  ||  result!=  0)  {	  if(result    ==    0    ||    result    ==    0)    {    	compilable	  [FE]  JsonParseException  	34	8	replace
88	[BUG]  [BUGGY]  if(result  ==  0  ||  result!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||  result!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0  ||  result!=  0)  {	  if(result    ==    0    ||    result    ==    0)    {    	compilable	  [FE]  JsonParseException  	34	8	replace
89	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0  ||  result  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  0  ||  result  ==  0)  {	  if(result    ==    0    ||    result    ==    0)    {    	compilable	  [FE]  JsonParseException  	34	8	replace
90	[BUG]  [BUGGY]  if(result!=  0  ||  result  ==  0)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0  ||  result  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0  ||  result  ==  0)  {	  if(result    ==    0    ||    result    ==    0)    {    	compilable	  [FE]  JsonParseException  	34	8	replace
91	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||  result  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  0  ||  result  >=  0)  {	  if(result    ==    0    ||    result    ==    0)    {    	compilable	  [FE]  JsonParseException  	34	8	replace
92	[BUG]  [BUGGY]  if(result  ==  0  ||  result  >=  0)  {  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||  result  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0  ||  result  >=  0)  {	  if(result    ==    0    ||    result    ==    0)    {    	compilable	  [FE]  JsonParseException  	34	8	replace
93	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createParent();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  ctxt.createParent();  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  ctxt.createParent();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
94	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext();  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext();  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  ctxt.createChildObjectContext();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
95	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_LONG)!=    0)    {    if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
96	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_LONG)!=    0)    {    if(result  ==  0  ||(_numTypesValid  &  NR_LONG)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
97	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  if(result!=  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  if(result!=  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_LONG)!=    0)    {    if(result!=  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
98	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  if(result  >=  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  if(result  >=  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_LONG)!=    0)    {    if(result  >=  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
99	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_INT)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  _numTypesValid  &  NR_INT)  ==  0)  {	  if((    _numTypesValid    &    NR_INT)!=    0)    {    if((    _numTypesValid    &    NR_INT)    ==    0)    {    	compilable	  [FE]  JsonParseException  	31	8	replace
100	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_INT)  ==  0)  {  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_INT)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  _numTypesValid  &  NR_INT)  ==  0)  {	  if((    _numTypesValid    &    NR_INT)!=    0)    {    if((    _numTypesValid    &    NR_INT)    ==    0)    {    	compilable	  [FE]  JsonParseException  	31	8	replace
101	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberInt.length()  -  1);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numberInt.length()  -  1);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberInt.length()  -  1);	  result    =    Math.min(result,    _numberInt.length());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
102	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberInt.length()  -  2);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numberInt.length()  -  2);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberInt.length()  -  2);	  result    =    Math.min(result,    _numberInt.length());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
103	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberLong.length());  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numberLong.length());  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberLong.length());	  result    =    Math.min(result,    _numberInt.length());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
104	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberInt.length()  +  1);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numberInt.length()  +  1);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberInt.length()  +  1);	  result    =    Math.min(result,    _numberInt.length());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
105	[BUG]  [BUGGY]  if(result  ==  _numberInt)  {  if(result  ==  _numberInt)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  _numberInt)  {  if(result  ==  _numberInt)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    _numberInt)    {    if(result  ==  _numberInt)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
106	[BUG]  [BUGGY]  if(result  ==  _numberInt)  {  if(result!=  _numberInt)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  _numberInt)  {  if(result!=  _numberInt)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    _numberInt)    {    if(result!=  _numberInt)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
107	[BUG]  [BUGGY]  if(result  ==  _numberInt)  {  If(result  ==  _numberInt)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  _numberInt)  {  If(result  ==  _numberInt)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    _numberInt)    {    If(result  ==  _numberInt)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
108	[BUG]  [BUGGY]  if(result  ==  _numberInt)  {  if(result  >=  _numberInt)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  _numberInt)  {  if(result  >=  _numberInt)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    _numberInt)    {    if(result  >=  _numberInt)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
109	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Long.MIN_VALUE  ||  result  ==  Long.MAX_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  Long.MIN_VALUE  ||  result  ==  Long.MAX_VALUE)  {	  if(result    ==    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	26	8	replace
110	[BUG]  [BUGGY]  if(result  ==  Long.MIN_VALUE  ||  result  ==  Long.MAX_VALUE)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Long.MIN_VALUE  ||  result  ==  Long.MAX_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  Long.MIN_VALUE  ||  result  ==  Long.MAX_VALUE)  {	  if(result    ==    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	26	8	replace
111	[BUG]  [BUGGY]  if((  result  &  INT)!=  0)  {  [CE]  cannot  find  symbol  INT  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  &  INT)!=  0)  {	  if((    result    &    NR_INT)!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  INT	18	None	replace
112	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_INT)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  &  NR_INT)  ==  0)  {	  if((    result    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	18	7	replace
113	[BUG]  [BUGGY]  if((  result  &  NR_INT)  ==  0)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_INT)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  &  NR_INT)  ==  0)  {	  if((    result    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	18	7	replace
114	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  &  NR_DOUBLE)!=  0)  {	  if((    result    &    _numTypesValid)!=    0)    {    	compilable	  [FE]  JsonParseException  	20	8	replace
115	[BUG]  [BUGGY]  if((  result  &  NR_DOUBLE)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  &  NR_DOUBLE)!=  0)  {	  if((    result    &    _numTypesValid)!=    0)    {    	compilable	  [FE]  JsonParseException  	20	8	replace
116	[BUG]  [BUGGY]  if((  result  <  =  0)&&(result  >  0))  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  <  =  0)&&(result  >  0))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  <  =  0)&&(result  >  0))  {	  if((    result    <    =    0)||(result    >    0))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
117	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  <  0)&&(result  >  0))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  <  0)&&(result  >  0))  {	  if((    result    <    =    0)||(result    >    0))    {    	compilable	  [FE]  JsonParseException  	23	8	replace
118	[BUG]  [BUGGY]  if((  result  <  0)&&(result  >  0))  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  <  0)&&(result  >  0))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  <  0)&&(result  >  0))  {	  if((    result    <    =    0)||(result    >    0))    {    	compilable	  [FE]  JsonParseException  	23	8	replace
119	[BUG]  [BUGGY]  if(result!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  null)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  null)  {	  if(result    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
120	[BUG]  [BUGGY]  if(_numberInt  ==  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numberInt  ==  null)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numberInt  ==  null)  {	  if(result    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
121	[BUG]  [BUGGY]  if(result  ==  null  ||  result  ==  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  null  ||  result  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  null  ||  result  ==  0)  {	  if(result    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
122	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_DOUBLE)!=    0)    {    if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
123	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  if((  _numTypesValid  &  NR_DOUBLE)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  if((  _numTypesValid  &  NR_DOUBLE)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_DOUBLE)!=    0)    {    if((  _numTypesValid  &  NR_DOUBLE)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
124	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  if((  _numTypesValid  &  NR_DOUBLE)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  if((  _numTypesValid  &  NR_DOUBLE)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_DOUBLE)!=    0)    {    if((  _numTypesValid  &  NR_DOUBLE)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
125	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  if((  _numTypesValid  &  NR_DOUBLE)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  if((  _numTypesValid  &  NR_DOUBLE)  >>  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_DOUBLE)!=    0)    {    if((  _numTypesValid  &  NR_DOUBLE)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
126	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result  +  1);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result  +  1);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(-1,  result  +  1);	  _parsingContext    =    JsonReadContext.createRootContext(-1,    result);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
127	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberLen);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberLen);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberLen);	  _parsingContext    =    JsonReadContext.createRootContext(-1,    result);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
128	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberLong);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberLong);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberLong);	  _parsingContext    =    JsonReadContext.createRootContext(-1,    result);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
129	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberLength);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberLength);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberLength);	  _parsingContext    =    JsonReadContext.createRootContext(-1,    result);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
130	[BUG]  [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  if(result  ==  0  ||  result  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  if(result  ==  0  ||  result  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||    result    ==    0)    {    if(result  ==  0  ||  result  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
131	[BUG]  [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  if(result  ==  0  ||  result!=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  if(result  ==  0  ||  result!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||    result    ==    0)    {    if(result  ==  0  ||  result!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
132	[BUG]  [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  if(result  ==  0  ||  result  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  if(result  ==  0  ||  result  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||    result    ==    0)    {    if(result  ==  0  ||  result  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
133	[BUG]  [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  If(result  ==  0  ||  result  ==  0)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  If(result  ==  0  ||  result  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||    result    ==    0)    {    If(result  ==  0  ||  result  ==  0)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
134	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_INT)!=    0)    {    if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
135	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_INT)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_INT)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_INT)!=    0)    {    if(result  ==  0  ||(_numTypesValid  &  NR_INT)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
136	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  if(result!=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  if(result!=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_INT)!=    0)    {    if(result!=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
137	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_INT)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_INT)  >>  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_INT)!=    0)    {    if(result  ==  0  ||(_numTypesValid  &  NR_INT)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
138	[BUG]  [BUGGY]  If(result  ==  0)  {  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  If(result  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	If(result  ==  0)  {	  if(result    ==    _numberLong)    {    If(result    ==    _numberLong)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
139	[BUG]  [BUGGY]  result  =  BI_MAX_INT.compareTo(_numberBigInt)>  0  ||  BI_MIN_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [CE]  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  BI_MAX_INT.compareTo(_numberBigInt)>  0  ||  BI_MIN_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  BI_MAX_INT.compareTo(_numberBigInt)>  0  ||  BI_MIN_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigInt)>    0    ||    BI_MAX_INT.compareTo(_numberBigInt)    <    0)    {    reportOverflowInt();    }    	non-compiled	[CE]  	66	None	replace
140	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  =  0)  {  reportOverflowInt();  }  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  =  0)  {  reportOverflowInt();  }  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  =  0)  {  reportOverflowInt();  }	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigInt)>    0    ||    BI_MAX_INT.compareTo(_numberBigInt)    <    0)    {    reportOverflowInt();    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
141	[BUG]  [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  if((  result  &  _numTypesValid)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  if((  result  &  _numTypesValid)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    result    &    _numTypesValid)!=    0)    {    if((  result  &  _numTypesValid)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
142	[BUG]  [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  if((  result  &  _numTypesValid)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  if((  result  &  _numTypesValid)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    result    &    _numTypesValid)!=    0)    {    if((  result  &  _numTypesValid)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
143	[BUG]  [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  if((  result  &  _numTypesValid)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  if((  result  &  _numTypesValid)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    result    &    _numTypesValid)!=    0)    {    if((  result  &  _numTypesValid)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
144	[BUG]  [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  if((  result  &  _numTypesValid)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  if((  result  &  _numTypesValid)  >>  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    result    &    _numTypesValid)!=    0)    {    if((  result  &  _numTypesValid)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
145	[BUG]  [BUGGY]  if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt()  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt()  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt()	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigDecimal)>    0    ||    BI_MAX_INT.compareTo(_numberBigDecimal)    <    0)    {    reportOverflowInt()    	non-compiled	[CE]  ';'  expected	68	None	replace
146	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt()  [CE]  ';'  expected  [FE]                            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt()  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt()	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigDecimal)>    0    ||    BI_MAX_INT.compareTo(_numberBigDecimal)    <    0)    {    reportOverflowInt()    	non-compiled	[CE]  ';'  expected	68	None	replace
147	[BUG]  [BUGGY]  if(!(_numTypesValid  &  NR_INT)  ==  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(!(_numTypesValid  &  NR_INT)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(!(_numTypesValid  &  NR_INT)  ==  0)  {	  if(!(_numTypesValid    &    NR_INT)!=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	81	None	replace
148	[BUG]  [BUGGY]  if(!(_numTypesValid  &  NR_LONG)!=  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(!(_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(!(_numTypesValid  &  NR_LONG)!=  0)  {	  if(!(_numTypesValid    &    NR_INT)!=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	81	None	replace
149	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigInt)>    0    ||    BI_MAX_INT.compareTo(_numberBigInt)    <    0)    {    reportOverflowInt();    }    if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
150	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigInt)>    0    ||    BI_MAX_INT.compareTo(_numberBigInt)    <    0)    {    reportOverflowInt();    }    if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
151	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  if(result  >=  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  if(result  >=  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigInt)>    0    ||    BI_MAX_INT.compareTo(_numberBigInt)    <    0)    {    reportOverflowInt();    }    if(result  >=  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
152	[BUG]  [BUGGY]  if(result  ==  -1)  {  if(result  ==  -1)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  -1)  {  if(result  ==  -1)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    -1)    {    if(result  ==  -1)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
153	[BUG]  [BUGGY]  if(result  ==  -1)  {  if(result!=  -1)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  -1)  {  if(result!=  -1)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    -1)    {    if(result!=  -1)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
154	[BUG]  [BUGGY]  if(result  ==  -1)  {  If(result  ==  -1)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  -1)  {  If(result  ==  -1)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    -1)    {    If(result  ==  -1)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
155	[BUG]  [BUGGY]  if(result  ==  -1)  {  if(result  >=  -1)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  -1)  {  if(result  >=  -1)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    -1)    {    if(result  >=  -1)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
156	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  <  0)||(result  >  Long.MAX_VALUE))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  <  0)||(result  >  Long.MAX_VALUE))  {	  if((    result    <    =    0)||(result    >    Long.MAX_VALUE))    {    	compilable	  [FE]  JsonParseException  	24	8	replace
157	[BUG]  [BUGGY]  if((  result  <  0)||(result  >  Long.MAX_VALUE))  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  <  0)||(result  >  Long.MAX_VALUE))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  <  0)||(result  >  Long.MAX_VALUE))  {	  if((    result    <    =    0)||(result    >    Long.MAX_VALUE))    {    	compilable	  [FE]  JsonParseException  	24	8	replace
158	[BUG]  [BUGGY]  if((  result  <  =  0)||(result  >  Long.MIN_VALUE))  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  <  =  0)||(result  >  Long.MIN_VALUE))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  <  =  0)||(result  >  Long.MIN_VALUE))  {	  if((    result    <    =    0)||(result    >    Long.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
159	[BUG]  [BUGGY]  if((  result  <  =  0)&&(result  >  Long.MAX_VALUE))  {  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  <  =  0)&&(result  >  Long.MAX_VALUE))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  <  =  0)&&(result  >  Long.MAX_VALUE))  {	  if((    result    <    =    0)||(result    >    Long.MAX_VALUE))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
160	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  ==  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
161	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid!=  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid!=  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
162	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  >=  NR_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  if(_numTypesValid  >=  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    if(_numTypesValid  >=  NR_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
163	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  If(_numTypesValid  ==  NR_UNKNOWN)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  If(_numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid    ==    NR_UNKNOWN)    {    If(_numTypesValid  ==  NR_UNKNOWN)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
164	[BUG]  [BUGGY]  if(!(_numTypesValid  &  NR_DOUBLE)  ==  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(!(_numTypesValid  &  NR_DOUBLE)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(!(_numTypesValid  &  NR_DOUBLE)  ==  0)  {	  if(!(_numTypesValid    &    NR_DOUBLE)!=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	80	None	replace
165	[BUG]  [BUGGY]  if(result!=  0)  {  if((  _numTypesValid  &  NR_INT)!=  0)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0)  {  if((  _numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0)  {  if((  _numTypesValid  &  NR_INT)!=  0)  {	  if(((long)result)!=    0)    {    if(((long)result)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
166	[BUG]  [BUGGY]  if(result!=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0)  {  if((  _numTypesValid  &  NR_LONG)!=  0)  {	  if(((long)result)!=    0)    {    if(((long)result)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
167	[BUG]  [BUGGY]  if(result!=  0)  {  if((  _numTypesValid  &  NR_BIGINT)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0)  {  if((  _numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0)  {  if((  _numTypesValid  &  NR_BIGINT)!=  0)  {	  if(((long)result)!=    0)    {    if(((long)result)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
168	[BUG]  [BUGGY]  if((  result  &  NR_INT)!=  0)  {  If((  result  &  NR_INT)!=  0)  {  [CE]  ';'  expected  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  NR_INT)!=  0)  {  If((  result  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  &  NR_INT)!=  0)  {  If((  result  &  NR_INT)!=  0)  {	  if(((long)result)!=    0)    {    If(((long)result)!=    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
169	[BUG]  [BUGGY]  if(result  ==  0)  {  If((  result  &  NR_INT)!=  0)  {  [CE]  ';'  expected  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  If((  result  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  If((  result  &  NR_INT)!=  0)  {	  if(((long)result)!=    0)    {    If(((long)result)!=    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
170	[BUG]  [BUGGY]  if(result!=  0)  {  If((  result  &  NR_INT)!=  0)  {  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0)  {  If((  result  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0)  {  If((  result  &  NR_INT)!=  0)  {	  if(((long)result)!=    0)    {    If(((long)result)!=    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
171	[BUG]  [BUGGY]  if(result  ==  0)  {  If((  result  &  INT_MASK)!=  0)  {  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  If((  result  &  INT_MASK)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  If((  result  &  INT_MASK)!=  0)  {	  if(((long)result)!=    0)    {    If(((long)result)!=    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
172	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  >=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	86	8	replace
173	[BUG]  [BUGGY]  if(result  >=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  >=  0  ||(_numTypesValid  &  NR_INT)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	86	8	replace
174	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  If(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  If(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_LONG)!=    0)    {    If(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
175	[BUG]  [BUGGY]  if(result  ==  _numberBigDecimal)  {  [CE]  incomparable  types:  int  and  BigDecimal  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  _numberBigDecimal)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  _numberBigDecimal)  {	  if(result!=    _numberInt)    {    if(result!=    _numberInt)    {    	non-compiled	[CE]  incomparable  types:  int  and  BigDecimal	45	None	replace
176	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  _numTypesValid)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  _numTypesValid)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	57	8	replace
177	[BUG]  [BUGGY]  if(result  ==  _numTypesValid)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  _numTypesValid)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  _numTypesValid)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	57	8	replace
178	[BUG]  [BUGGY]  if(!(_numTypesValid  &  NR_INT)>  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(!(_numTypesValid  &  NR_INT)>  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(!(_numTypesValid  &  NR_INT)>  0)  {	  if(!(_numTypesValid    &    NR_INT)!=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	81	None	replace
179	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  If(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  If(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    If(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
180	[BUG]  [BUGGY]  if(result  >=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt  [CE]  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  >=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigDecimal)>    0    ||    BI_MAX_INT.compareTo(_numberBigDecimal)    <    0)    {    reportOverflowInt    	non-compiled	[CE]  	67	None	replace
181	[BUG]  [BUGGY]  if(result  <  0)  {  int  result  =(int)_numberLong.intValue();  if(result  <  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  <  0)  {  int  result  =(int)_numberLong.intValue();  if(result  <  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    <    0)    {    int  result  =(int)_numberLong.intValue();  if(result  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
182	[BUG]  [BUGGY]  if(result  <  0)  {  int  result  =(int)_numberBigDecimal.intValue();  if(result  <  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  <  0)  {  int  result  =(int)_numberBigDecimal.intValue();  if(result  <  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    <    0)    {    int  result  =(int)_numberBigDecimal.intValue();  if(result  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
183	[BUG]  [BUGGY]  if(result  <  0)  {  int  result  =(int)_numberInt.intValue();  if(result  <  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  <  0)  {  int  result  =(int)_numberInt.intValue();  if(result  <  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    <    0)    {    int  result  =(int)_numberInt.intValue();  if(result  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
184	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigInt)>    0    ||    BI_MAX_INT.compareTo(_numberBigInt)    <    0)    {    reportOverflowInt();    }    	compilable	  [FE]  JsonParseException  	66	9	replace
185	[BUG]  [BUGGY]  if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigInt)>    0    ||    BI_MAX_INT.compareTo(_numberBigInt)    <    0)    {    reportOverflowInt();    }    	compilable	  [FE]  JsonParseException  	66	9	replace
186	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  -1)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  -1)  {	  if(result    ==    -1)    {    	compilable	  [FE]  JsonParseException  	55	8	replace
187	[BUG]  [BUGGY]  if(result!=  -1)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  -1)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  -1)  {	  if(result    ==    -1)    {    	compilable	  [FE]  JsonParseException  	55	8	replace
188	[BUG]  [BUGGY]  if(result  ==  -1)  {  result  =(int)_numberLong.intValue();  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  -1)  {  result  =(int)_numberLong.intValue();  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    -1)    {    result  =(int)_numberLong.intValue();	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
189	[BUG]  [BUGGY]  if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }  [CE]  method  compareTo  in  class  BigInteger  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigDecimal)>    0    ||    BI_MAX_INT.compareTo(_numberBigDecimal)    <    0)    {    reportOverflowInt();    }    	non-compiled	[CE]  method  compareTo  in  class  BigInteger  cannot  be  applied  to  given  types;	64	None	replace
190	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  If((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  If((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_BIGDECIMAL)!=    0)    {    If((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
191	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >=  0  ||  result  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  >=  0  ||  result  ==  0)  {	  if(result    ==    0    ||    result    ==    0)    {    	compilable	  [FE]  JsonParseException  	34	8	replace
192	[BUG]  [BUGGY]  if(result  >=  0  ||  result  ==  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >=  0  ||  result  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  >=  0  ||  result  ==  0)  {	  if(result    ==    0    ||    result    ==    0)    {    	compilable	  [FE]  JsonParseException  	34	8	replace
193	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  _numberBigInt.intValue())  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  _numberBigInt.intValue())  {	  if(result!=    _numberInt.intValue())    {    	compilable	  [FE]  JsonParseException  	82	9	replace
194	[BUG]  [BUGGY]  if(result!=  _numberBigInt.intValue())  {  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  _numberBigInt.intValue())  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  _numberBigInt.intValue())  {	  if(result!=    _numberInt.intValue())    {    	compilable	  [FE]  JsonParseException  	82	9	replace
195	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  _numberBigDecimal.intValue())  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  _numberBigDecimal.intValue())  {	  if(result!=    _numberInt.intValue())    {    	compilable	  [FE]  JsonParseException  	82	9	replace
196	[BUG]  [BUGGY]  if(result!=  _numberBigDecimal.intValue())  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  _numberBigDecimal.intValue())  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  _numberBigDecimal.intValue())  {	  if(result!=    _numberInt.intValue())    {    	compilable	  [FE]  JsonParseException  	82	9	replace
197	[BUG]  [BUGGY]  if(result  >=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt()  [CE]  ';'  expected  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt()  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  >=  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt()	  if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigDecimal)>    0    ||    BI_MAX_INT.compareTo(_numberBigDecimal)    <    0)    {    reportOverflowInt()    	non-compiled	[CE]  ';'  expected	68	None	replace
198	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >=  Long.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  >=  Long.MIN_VALUE)  {	  if(result!=    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	28	8	replace
199	[BUG]  [BUGGY]  if(result  >=  Long.MIN_VALUE)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >=  Long.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  >=  Long.MIN_VALUE)  {	  if(result!=    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	28	8	replace
200	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  Long.MAX_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  Long.MAX_VALUE)  {	  if(result!=    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	28	8	replace
201	[BUG]  [BUGGY]  if(result!=  Long.MAX_VALUE)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  Long.MAX_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  Long.MAX_VALUE)  {	  if(result!=    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	28	8	replace
202	[BUG]  [BUGGY]  if(result  ==  0)  {  if((  _numTypesValid  &  NR_INT)!=  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  if((  _numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  if((  _numTypesValid  &  NR_INT)!=  0)  {	  if(((long)result)!=    0)    {    if(((long)result)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
203	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  0  ||(_numTypesValid  &  NR_BIGINT)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	84	8	replace
204	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_BIGINT)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0  ||(_numTypesValid  &  NR_BIGINT)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	84	8	replace
205	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(null);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(null);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(null);	  _parsingContext    =    JsonReadContext.createRootContext();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
206	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(-1);	  _parsingContext    =    JsonReadContext.createRootContext();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
207	[BUG]  [BUGGY]  result  =  Math.min(result,  result.length());  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  result.length());  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  result.length());	  result    =    Math.min(result,    _numberInt.length());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
208	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberBigDecimal.length());  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numberBigDecimal.length());  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberBigDecimal.length());	  result    =    Math.min(result,    _numberInt.length());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
209	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result  -  1);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result  -  1);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(-1,  result  -  1);	  _parsingContext    =    JsonReadContext.createRootContext(-1,    result);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
210	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _currentState);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _currentState);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _currentState);	  _parsingContext    =    JsonReadContext.createRootContext(-1,    result);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
211	[BUG]  [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  if(result!=  0  ||  result  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  if(result!=  0  ||  result  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||    result    ==    0)    {    if(result!=  0  ||  result  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
212	[BUG]  [BUGGY]  result  =  Math.min(result,  _numTypesValid  -  1);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numTypesValid  -  1);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numTypesValid  -  1);	  result    =    Math.min(result,    _numTypesValid);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
213	[BUG]  [BUGGY]  result  =  Math.min(result,  JsonToken.VALUE_NUMBER_INT);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  JsonToken.VALUE_NUMBER_INT);	  result    =    Math.min(result,    _numTypesValid);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
214	[BUG]  [BUGGY]  result  =  Math.min(result,  result);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  result);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  result);	  result    =    Math.min(result,    _numTypesValid);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
215	[BUG]  [BUGGY]  ((  _numTypesValid  &  NR_BIGINT)!=  0));  [CE]  not  a  statement  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  ((  _numTypesValid  &  NR_BIGINT)!=  0));  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	((  _numTypesValid  &  NR_BIGINT)!=  0));	  ((    _numTypesValid    &    NR_DOUBLE)!=    0));    	non-compiled	[CE]  not  a  statement	2	None	replace
216	[BUG]  [BUGGY]  ((  _numTypesValid  &  NR_INT)!=  0));  [CE]  not  a  statement  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  ((  _numTypesValid  &  NR_INT)!=  0));  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	((  _numTypesValid  &  NR_INT)!=  0));	  ((    _numTypesValid    &    NR_DOUBLE)!=    0));    	non-compiled	[CE]  not  a  statement	2	None	replace
217	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  If((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  If((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_DOUBLE)!=    0)    {    If((  _numTypesValid  &  NR_DOUBLE)!=  0)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
218	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberBigInt.intValue());  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numberBigInt.intValue());  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberBigInt.intValue());	  result    =    Math.min(result,    _numberInt.intValue());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
219	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberBigDecimal.intValue());  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numberBigDecimal.intValue());  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberBigDecimal.intValue());	  result    =    Math.min(result,    _numberInt.intValue());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
220	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  -1);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(-1,  -1);	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
221	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  If(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  If(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_INT)!=    0)    {    If(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
222	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  >  0)||(result  >  0))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  >  0)||(result  >  0))  {	  if((    result    <    =    0)||(result    >    0))    {    	compilable	  [FE]  JsonParseException  	23	8	replace
223	[BUG]  [BUGGY]  if((  result  >  0)||(result  >  0))  {  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  >  0)||(result  >  0))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  >  0)||(result  >  0))  {	  if((    result    <    =    0)||(result    >    0))    {    	compilable	  [FE]  JsonParseException  	23	8	replace
224	[BUG]  [BUGGY]  if(result  >  0)  {  result  =(int)_numberLong.intValue();  if(result  >  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >  0)  {  result  =(int)_numberLong.intValue();  if(result  >  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >    0)    {    result  =(int)_numberLong.intValue();  if(result  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
225	[BUG]  [BUGGY]  if(result  ==  _numberInt)  {  If(result!=  _numberLong)  {  [CE]  ';'  expected  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  _numberInt)  {  If(result!=  _numberLong)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  _numberInt)  {  If(result!=  _numberLong)  {	  if(result!=    _numberLong)    {    If(result!=    _numberLong)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
226	[BUG]  [BUGGY]  if(result  ==  _numberBigDecimal)  {  If(result!=  _numberLong)  {  [CE]  ';'  expected  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  _numberBigDecimal)  {  If(result!=  _numberLong)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  _numberBigDecimal)  {  If(result!=  _numberLong)  {	  if(result!=    _numberLong)    {    If(result!=    _numberLong)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
227	[BUG]  [BUGGY]  if(!(_numTypesValid  &  NR_BIGINT)!=  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(!(_numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(!(_numTypesValid  &  NR_BIGINT)!=  0)  {	  if(!(_numTypesValid    &    NR_DOUBLE)!=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	80	None	replace
228	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  <  0)&&(result  >  Long.MAX_VALUE))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  <  0)&&(result  >  Long.MAX_VALUE))  {	  if((    result    <    =    0)||(result    >    Long.MAX_VALUE))    {    	compilable	  [FE]  JsonParseException  	24	8	replace
229	[BUG]  [BUGGY]  if((  result  <  0)&&(result  >  Long.MAX_VALUE))  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  <  0)&&(result  >  Long.MAX_VALUE))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  <  0)&&(result  >  Long.MAX_VALUE))  {	  if((    result    <    =    0)||(result    >    Long.MAX_VALUE))    {    	compilable	  [FE]  JsonParseException  	24	8	replace
230	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigInt)>    0    ||    BI_MAX_INT.compareTo(_numberBigInt)    <    0)    {    reportOverflowInt();    }    if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
231	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  If(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  If(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0)    {    if(BI_MIN_INT.compareTo(_numberBigInt)>    0    ||    BI_MAX_INT.compareTo(_numberBigInt)    <    0)    {    reportOverflowInt();    }    If(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }	  	non-compiled	[CE]  ';'  expected	65	None	add
232	[BUG]  [BUGGY]  if(result!=  Long.MIN_VALUE)  {  If(result!=  Long.MIN_VALUE)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  Long.MIN_VALUE)  {  If(result!=  Long.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    Long.MIN_VALUE)    {    If(result!=  Long.MIN_VALUE)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
233	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  _numTypesValid  &  NR_BIGINT)!=  0)  {	  if(((long)result)!=    0)    {    if(((long)result)!=    0)    {    	compilable	  [FE]  JsonParseException  	35	8	replace
234	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_BIGINT)!=  0)  {  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_BIGINT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  _numTypesValid  &  NR_BIGINT)!=  0)  {	  if(((long)result)!=    0)    {    if(((long)result)!=    0)    {    	compilable	  [FE]  JsonParseException  	35	8	replace
235	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  If(_numTypesValid!=  NR_UNKNOWN)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  If(_numTypesValid!=  NR_UNKNOWN)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid!=    NR_UNKNOWN)    {    If(_numTypesValid!=  NR_UNKNOWN)  {	  	non-compiled	[CE]  ';'  expected	71	None	add
236	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)  >>  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
237	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >=  _numberInt)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  >=  _numberInt)  {	  if(result!=    _numberInt)    {    if(result    >>    _numberInt)    {    	compilable	  [FE]  JsonParseException  	48	8	replace
238	[BUG]  [BUGGY]  if(result  >=  _numberInt)  {  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >=  _numberInt)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  >=  _numberInt)  {	  if(result!=    _numberInt)    {    if(result    >>    _numberInt)    {    	compilable	  [FE]  JsonParseException  	48	8	replace
239	[BUG]  [BUGGY]  if(result  ==  null  ||  result  <  =  _numberInt.intValue())  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  null  ||  result  <  =  _numberInt.intValue())  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  null  ||  result  <  =  _numberInt.intValue())  {	  if(result    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
240	[BUG]  [BUGGY]  if(result  ==  null  ||  result  <  =  _numberInt.length())  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  null  ||  result  <  =  _numberInt.length())  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  null  ||  result  <  =  _numberInt.length())  {	  if(result    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
241	[BUG]  [BUGGY]  if(result  >  0)  {  int  result  =(int)_numberInt.intValue();  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >  0)  {  int  result  =(int)_numberInt.intValue();  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >    0)    {    int  result  =(int)_numberInt.intValue();	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
242	[BUG]  [BUGGY]  if(result  >  0)  {  If(result  >  0)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  >  0)  {  If(result  >  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >    0)    {    If(result  >  0)  {	  	non-compiled	[CE]  ';'  expected	75	None	add
243	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_INT)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  _numTypesValid  &  NR_INT)  >=  0)  {	  if((    _numTypesValid    &    NR_INT)!=    0)    {    if((    _numTypesValid    &    NR_INT)    >=    0)    {    	compilable	  [FE]  JsonParseException  	30	8	replace
244	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_INT)  >=  0)  {  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_INT)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  _numTypesValid  &  NR_INT)  >=  0)  {	  if((    _numTypesValid    &    NR_INT)!=    0)    {    if((    _numTypesValid    &    NR_INT)    >=    0)    {    	compilable	  [FE]  JsonParseException  	30	8	replace
245	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  <  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  <  0  ||(_numTypesValid  &  NR_INT)!=  0)  {	  if(result    <    0)    {    	compilable	  [FE]  JsonParseException  	44	8	replace
246	[BUG]  [BUGGY]  if(result  <  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  <  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  <  0  ||(_numTypesValid  &  NR_INT)!=  0)  {	  if(result    <    0)    {    	compilable	  [FE]  JsonParseException  	44	8	replace
247	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  If((  _numTypesValid  &  NR_INT)!=  0)  {  [CE]  ';'  expected  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  If((  _numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  If((  _numTypesValid  &  NR_INT)!=  0)  {	  if(((long)result)!=    0)    {    If(((long)result)!=    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
248	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  If((  _numTypesValid  &  NR_INT)!=  0)  {  [CE]  ';'  expected  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  If((  _numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  If((  _numTypesValid  &  NR_INT)!=  0)  {	  if(((long)result)!=    0)    {    If(((long)result)!=    0)    {    	non-compiled	[CE]  ';'  expected	69	None	replace
249	[BUG]  [BUGGY]  if(!(_numTypesValid  &  NR_DOUBLE)  <  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(!(_numTypesValid  &  NR_DOUBLE)  <  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(!(_numTypesValid  &  NR_DOUBLE)  <  0)  {	  if(!(_numTypesValid    &    NR_DOUBLE)!=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	80	None	replace
250	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  _numTypesValid)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  &  _numTypesValid)  ==  0)  {	  if((    result    &    _numTypesValid)!=    0)    {    	compilable	  [FE]  JsonParseException  	20	7	replace
251	[BUG]  [BUGGY]  if((  result  &  _numTypesValid)  ==  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  _numTypesValid)  ==  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  &  _numTypesValid)  ==  0)  {	  if((    result    &    _numTypesValid)!=    0)    {    	compilable	  [FE]  JsonParseException  	20	7	replace
252	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  _numTypesValid)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  &  _numTypesValid)  >=  0)  {	  if((    result    &    _numTypesValid)!=    0)    {    	compilable	  [FE]  JsonParseException  	20	8	replace
253	[BUG]  [BUGGY]  if((  result  &  _numTypesValid)  >=  0)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  _numTypesValid)  >=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  &  _numTypesValid)  >=  0)  {	  if((    result    &    _numTypesValid)!=    0)    {    	compilable	  [FE]  JsonParseException  	20	8	replace
254	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberInt.intValue()  +  1);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numberInt.intValue()  +  1);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberInt.intValue()  +  1);	  result    =    Math.min(result,    _numberInt.intValue());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
255	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberInt.doubleValue());  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  result  =  Math.min(result,  _numberInt.doubleValue());  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberInt.doubleValue());	  result    =    Math.min(result,    _numberInt.intValue());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
256	[BUG]  [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  If((  result  &  _numTypesValid)!=  0)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  If((  result  &  _numTypesValid)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    result    &    _numTypesValid)!=    0)    {    If((  result  &  _numTypesValid)!=  0)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
257	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createParentContext();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  ctxt.createParentContext();  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  ctxt.createParentContext();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
258	[BUG]  [BUGGY]  if(!(_numTypesValid  &  NR_INT)  <  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(!(_numTypesValid  &  NR_INT)  <  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(!(_numTypesValid  &  NR_INT)  <  0)  {	  if(!(_numTypesValid    &    NR_INT)!=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	81	None	replace
259	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(!(result!=  _numTypesValid))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(!(result!=  _numTypesValid))  {	  if(!(_numTypesValid    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	81	8	replace
260	[BUG]  [BUGGY]  if(!(result!=  _numTypesValid))  {  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(!(result!=  _numTypesValid))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(!(result!=  _numTypesValid))  {	  if(!(_numTypesValid    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	81	8	replace
261	[BUG]  [BUGGY]  if(result!=  Long.MIN_VALUE  &&  result  <  =  MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  Long.MIN_VALUE  &&  result  <  =  MAX_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  Long.MIN_VALUE  &&  result  <  =  MAX_VALUE)  {	  if(result!=    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
262	[BUG]  [BUGGY]  if(result!=  0)  {  If(result  ==  _numberLong)  {  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0)  {  If(result  ==  _numberLong)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0)  {  If(result  ==  _numberLong)  {	  if(result    ==    _numberLong)    {    If(result    ==    _numberLong)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
263	[BUG]  [BUGGY]  if(result!=  _numberInt)  {  If(result  ==  _numberLong)  {  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  _numberInt)  {  If(result  ==  _numberLong)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  _numberInt)  {  If(result  ==  _numberLong)  {	  if(result    ==    _numberLong)    {    If(result    ==    _numberLong)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
264	[BUG]  [BUGGY]  if(result  <  0)  {  int  result  =(int)_numberLong.intValue();  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  <  0)  {  int  result  =(int)_numberLong.intValue();  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    <    0)    {    int  result  =(int)_numberLong.intValue();	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
265	[BUG]  [BUGGY]  if(result  <  0)  {  int  result  =(int)_numberInt.intValue();  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  <  0)  {  int  result  =(int)_numberInt.intValue();  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    <    0)    {    int  result  =(int)_numberInt.intValue();	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
266	[BUG]  [BUGGY]  ((  _numTypesValid  &  NR_DOUBLE)  >>  0));  [CE]  not  a  statement  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  ((  _numTypesValid  &  NR_DOUBLE)  >>  0));  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	((  _numTypesValid  &  NR_DOUBLE)  >>  0));	  ((    _numTypesValid    &    NR_DOUBLE)!=    0));    	non-compiled	[CE]  not  a  statement	2	None	replace
267	[BUG]  [BUGGY]  ((  result  &  NR_DOUBLE)!=  0));  [CE]  not  a  statement  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  ((  result  &  NR_DOUBLE)!=  0));  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	((  result  &  NR_DOUBLE)!=  0));	  ((    _numTypesValid    &    NR_DOUBLE)!=    0));    	non-compiled	[CE]  not  a  statement	2	None	replace
268	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  _numTypesValid)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  _numTypesValid)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	57	8	replace
269	[BUG]  [BUGGY]  if(result!=  _numTypesValid)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  _numTypesValid)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  _numTypesValid)  {	  if(_numTypesValid    ==    NR_UNKNOWN)    {    	compilable	  [FE]  JsonParseException  	57	8	replace
270	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)  >>  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0    ||(_numTypesValid    &    NR_LONG)!=    0)    {    if(result  ==  0  ||(_numTypesValid  &  NR_LONG)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
271	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  >=  0)||(result  >  0))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  >=  0)||(result  >  0))  {	  if((    result    <    =    0)||(result    >    0))    {    	compilable	  [FE]  JsonParseException  	23	8	replace
272	[BUG]  [BUGGY]  if((  result  >=  0)||(result  >  0))  {  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if((  result  >=  0)||(result  >  0))  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  >=  0)||(result  >  0))  {	  if((    result    <    =    0)||(result    >    0))    {    	compilable	  [FE]  JsonParseException  	23	8	replace
273	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	84	8	replace
274	[BUG]  [BUGGY]  if(result!=  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result!=  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_DOUBLE)!=    0)    {    	compilable	  [FE]  JsonParseException  	84	8	replace
275	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_UNKNOWN)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  0  ||(_numTypesValid  &  NR_UNKNOWN)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	59	8	replace
276	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_UNKNOWN)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_UNKNOWN)!=  0)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0  ||(_numTypesValid  &  NR_UNKNOWN)!=  0)  {	  if(result    ==    0    ||(_numTypesValid    &    NR_LONG)!=    0)    {    	compilable	  [FE]  JsonParseException  	59	8	replace
277	[BUG]  [BUGGY]  if(result  ==  -1)  {  int  result  =(int)_numberLong.intValue();  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  -1)  {  int  result  =(int)_numberLong.intValue();  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    -1)    {    int  result  =(int)_numberLong.intValue();	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
278	[BUG]  [BUGGY]  if(result  ==  -1)  {  int  result  =(int)_numberInt.intValue();  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  -1)  {  int  result  =(int)_numberInt.intValue();  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    -1)    {    int  result  =(int)_numberInt.intValue();	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
279	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberInt);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberInt);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _numberInt);	  _parsingContext    =    JsonReadContext.createRootContext(-1,    result);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
280	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _tokenInputPtr);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _tokenInputPtr);  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(-1,  result,  _tokenInputPtr);	  _parsingContext    =    JsonReadContext.createRootContext(-1,    result);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
281	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Integer.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  Integer.MIN_VALUE)  {	  if(result    ==    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	26	8	replace
282	[BUG]  [BUGGY]  if(result  ==  Integer.MIN_VALUE)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Integer.MIN_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  Integer.MIN_VALUE)  {	  if(result    ==    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	26	8	replace
283	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Long.MIN_VALUE  ||  result  ==  Integer.MAX_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  Long.MIN_VALUE  ||  result  ==  Integer.MAX_VALUE)  {	  if(result    ==    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	26	8	replace
284	[BUG]  [BUGGY]  if(result  ==  Long.MIN_VALUE  ||  result  ==  Integer.MAX_VALUE)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(result  ==  Long.MIN_VALUE  ||  result  ==  Integer.MAX_VALUE)  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  Long.MIN_VALUE  ||  result  ==  Integer.MAX_VALUE)  {	  if(result    ==    Long.MIN_VALUE)    {    	compilable	  [FE]  JsonParseException  	26	8	replace
285	[BUG]  [BUGGY]  if(_numberInt!=  result.intValue())  {  [CE]  int  cannot  be  dereferenced  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;      [BUGGY]  if(_numberInt!=  result.intValue())  {  [BUGGY]      _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numberInt!=  result.intValue())  {	  if(result!=    _numberInt.intValue())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	82	None	replace
