bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberInt.intValue());  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  result  =  Math.min(result,  _numberInt.intValue());  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberInt.intValue());	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  ((  _numTypesValid  &  NR_DOUBLE)!=  0));  [CE]  not  a  statement  [FE]                  JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  ((  _numTypesValid  &  NR_DOUBLE)!=  0));  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	((  _numTypesValid  &  NR_DOUBLE)!=  0));	      	non-compiled	[CE]  not  a  statement	9	None	replace
3	[BUG]  [BUGGY]  result  =  Math.min(result,  _numberInt.length());  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  result  =  Math.min(result,  _numberInt.length());  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numberInt.length());	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  _parsingContext  =  ctxt.getParent();  [CE]  illegal  start  of  type  [FE]                      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  _parsingContext  =  ctxt.getParent();  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  ctxt.getParent();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  if(result  ==  _numberLong)  {  if(result  ==  _numberLong)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  _numberLong)  {  if(result  ==  _numberLong)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    _numberLong)    {    if(result  ==  _numberLong)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
6	[BUG]  [BUGGY]  if(result  ==  _numberLong)  {  if(result!=  _numberLong)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  _numberLong)  {  if(result!=  _numberLong)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    _numberLong)    {    if(result!=  _numberLong)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
7	[BUG]  [BUGGY]  if(result  ==  _numberLong)  {  If(result  ==  _numberLong)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  _numberLong)  {  If(result  ==  _numberLong)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    _numberLong)    {    If(result  ==  _numberLong)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
8	[BUG]  [BUGGY]  if(result  ==  _numberLong)  {  if(result  >=  _numberLong)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  _numberLong)  {  if(result  >=  _numberLong)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    _numberLong)    {    if(result  >=  _numberLong)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
9	[BUG]  [BUGGY]  if(result!=  0)  {  if(result!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  0)  {  if(result!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    0)    {    if(result!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
10	[BUG]  [BUGGY]  if(result!=  0)  {  if(result  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  0)  {  if(result  >=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    0)    {    if(result  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
11	[BUG]  [BUGGY]  if(result!=  0)  {  if(result  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  0)  {  if(result  ==  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    0)    {    if(result  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
12	[BUG]  [BUGGY]  if(result!=  0)  {  if(result  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  0)  {  if(result  >>  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    0)    {    if(result  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
13	[BUG]  [BUGGY]  if(result  >=  0)  {  if(result  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  >=  0)  {  if(result  >=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >=    0)    {    if(result  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
14	[BUG]  [BUGGY]  if(result  >=  0)  {  if(result!=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  >=  0)  {  if(result!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >=    0)    {    if(result!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
15	[BUG]  [BUGGY]  if(result  >=  0)  {  if(result  >>  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  >=  0)  {  if(result  >>  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >=    0)    {    if(result  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
16	[BUG]  [BUGGY]  if(result  >=  0)  {  if(result  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  >=  0)  {  if(result  ==  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >=    0)    {    if(result  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
17	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  result  &  NR_INT)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  &  NR_INT)!=  0)  {	  if((    _numTypesValid    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	15	9	replace
18	[BUG]  [BUGGY]  if((  result  &  NR_INT)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  result  &  NR_INT)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  &  NR_INT)!=  0)  {	  if((    _numTypesValid    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	15	9	replace
19	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  result  &  _numTypesValid)!=  0)  {	  if((    _numTypesValid    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	15	9	replace
20	[BUG]  [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  result  &  _numTypesValid)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  &  _numTypesValid)!=  0)  {	  if((    _numTypesValid    &    NR_INT)!=    0)    {    	compilable	  [FE]  JsonParseException  	15	9	replace
21	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  _numberInt)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  _numberInt)  {	  if(result!=    _numberInt)    {    	compilable	  [FE]  JsonParseException  	13	8	replace
22	[BUG]  [BUGGY]  if(result  ==  _numberInt)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  _numberInt)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  _numberInt)  {	  if(result!=    _numberInt)    {    	compilable	  [FE]  JsonParseException  	13	8	replace
23	[BUG]  [BUGGY]  if((  result  <  =  0)||(result  >  0))  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  result  <  =  0)||(result  >  0))  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  <  =  0)||(result  >  0))  {	  if(((long)result)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
24	[BUG]  [BUGGY]  if((  result  <  =  0)||(result  >  Long.MAX_VALUE))  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  result  <  =  0)||(result  >  Long.MAX_VALUE))  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  result  <  =  0)||(result  >  Long.MAX_VALUE))  {	  if(((long)result)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
25	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  Long.MIN_VALUE)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  Long.MIN_VALUE)  {	  if(result    ==    _numberLong)    {    	compilable	  [FE]  JsonParseException  	6	8	replace
26	[BUG]  [BUGGY]  if(result  ==  Long.MIN_VALUE)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  Long.MIN_VALUE)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  Long.MIN_VALUE)  {	  if(result    ==    _numberLong)    {    	compilable	  [FE]  JsonParseException  	6	8	replace
27	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  Long.MIN_VALUE)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result!=  Long.MIN_VALUE)  {	  if(result!=    _numberLong)    {    	compilable	  [FE]  JsonParseException  	8	8	replace
28	[BUG]  [BUGGY]  if(result!=  Long.MIN_VALUE)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  Long.MIN_VALUE)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  Long.MIN_VALUE)  {	  if(result!=    _numberLong)    {    	compilable	  [FE]  JsonParseException  	8	8	replace
29	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_INT)!=  0)  {  if((  _numTypesValid  &  NR_INT)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  _numTypesValid  &  NR_INT)!=  0)  {  if((  _numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_INT)!=    0)    {    if((  _numTypesValid  &  NR_INT)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
30	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_INT)!=  0)  {  if((  _numTypesValid  &  NR_INT)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  _numTypesValid  &  NR_INT)!=  0)  {  if((  _numTypesValid  &  NR_INT)  >=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_INT)!=    0)    {    if((  _numTypesValid  &  NR_INT)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
31	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_INT)!=  0)  {  if((  _numTypesValid  &  NR_INT)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  _numTypesValid  &  NR_INT)!=  0)  {  if((  _numTypesValid  &  NR_INT)  ==  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_INT)!=    0)    {    if((  _numTypesValid  &  NR_INT)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
32	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_INT)!=  0)  {  if((  _numTypesValid  &  NR_INT)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  _numTypesValid  &  NR_INT)!=  0)  {  if((  _numTypesValid  &  NR_INT)  >>  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_INT)!=    0)    {    if((  _numTypesValid  &  NR_INT)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
33	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  0  ||  result  ==  0)  {	  if(result    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	8	replace
34	[BUG]  [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0  ||  result  ==  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0  ||  result  ==  0)  {	  if(result    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	8	replace
35	[BUG]  [BUGGY]  if(((long)result)!=  0)  {  if(((long)result)!=  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(((long)result)!=  0)  {  if(((long)result)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(((long)result)!=    0)    {    if(((long)result)!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
36	[BUG]  [BUGGY]  if(((long)result)!=  0)  {  if(((long)result)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(((long)result)!=  0)  {  if(((long)result)  >=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(((long)result)!=    0)    {    if(((long)result)  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
37	[BUG]  [BUGGY]  if(((long)result)!=  0)  {  if(((long)result)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(((long)result)!=  0)  {  if(((long)result)  ==  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(((long)result)!=    0)    {    if(((long)result)  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
38	[BUG]  [BUGGY]  if(((long)result)!=  0)  {  if(((long)result)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(((long)result)!=  0)  {  if(((long)result)  >>  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(((long)result)!=    0)    {    if(((long)result)  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
39	[BUG]  [BUGGY]  if(result!=  _numberLong)  {  if(result!=  _numberLong)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  _numberLong)  {  if(result!=  _numberLong)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    _numberLong)    {    if(result!=  _numberLong)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
40	[BUG]  [BUGGY]  if(result!=  _numberLong)  {  if(result  >=  _numberLong)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  _numberLong)  {  if(result  >=  _numberLong)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    _numberLong)    {    if(result  >=  _numberLong)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
41	[BUG]  [BUGGY]  if(result!=  _numberLong)  {  if(result  >>  _numberLong)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  _numberLong)  {  if(result  >>  _numberLong)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    _numberLong)    {    if(result  >>  _numberLong)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
42	[BUG]  [BUGGY]  if(result!=  _numberLong)  {  if(result  ==  _numberLong)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  _numberLong)  {  if(result  ==  _numberLong)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    _numberLong)    {    if(result  ==  _numberLong)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
43	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  <  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  <  0)  {	  if(result    >=    0)    {    	compilable	  [FE]  JsonParseException  	11	8	replace
44	[BUG]  [BUGGY]  if(result  <  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  <  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  <  0)  {	  if(result    >=    0)    {    	compilable	  [FE]  JsonParseException  	11	8	replace
45	[BUG]  [BUGGY]  if(result!=  _numberInt)  {  if(result!=  _numberInt)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  _numberInt)  {  if(result!=  _numberInt)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    _numberInt)    {    if(result!=  _numberInt)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
46	[BUG]  [BUGGY]  if(result!=  _numberInt)  {  if(result  >=  _numberInt)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  _numberInt)  {  if(result  >=  _numberInt)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    _numberInt)    {    if(result  >=  _numberInt)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
47	[BUG]  [BUGGY]  if(result!=  _numberInt)  {  if(result  ==  _numberInt)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  _numberInt)  {  if(result  ==  _numberInt)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    _numberInt)    {    if(result  ==  _numberInt)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
48	[BUG]  [BUGGY]  if(result!=  _numberInt)  {  if(result  >>  _numberInt)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  _numberInt)  {  if(result  >>  _numberInt)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    _numberInt)    {    if(result  >>  _numberInt)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
49	[BUG]  [BUGGY]  if(result  ==  0)  {  if(result  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0)  {  if(result  ==  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0)    {    if(result  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
50	[BUG]  [BUGGY]  if(result  ==  0)  {  if(result!=  0)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0)  {  if(result!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0)    {    if(result!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
51	[BUG]  [BUGGY]  if(result  ==  0)  {  if(result  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0)  {  if(result  >=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0)    {    if(result  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
52	[BUG]  [BUGGY]  if(result  ==  0)  {  If(result  ==  0)  {  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0)  {  If(result  ==  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    ==    0)    {    If(result  ==  0)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
53	[BUG]  [BUGGY]  if(result  ==  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  null)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  null)  {	  if(result!=    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	4	None	replace
54	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  -1)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  -1)  {	  if(result    ==    _numberLong)    {    	compilable	  [FE]  JsonParseException  	6	8	replace
55	[BUG]  [BUGGY]  if(result  ==  -1)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  -1)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  -1)  {	  if(result    ==    _numberLong)    {    	compilable	  [FE]  JsonParseException  	6	8	replace
56	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(_numTypesValid  ==  NR_UNKNOWN)  {	  if(result    >=    0)    {    	compilable	  [FE]  JsonParseException  	11	8	replace
57	[BUG]  [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(_numTypesValid  ==  NR_UNKNOWN)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid  ==  NR_UNKNOWN)  {	  if(result    >=    0)    {    	compilable	  [FE]  JsonParseException  	11	8	replace
58	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {	  if(result    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	8	replace
59	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0  ||(_numTypesValid  &  NR_LONG)!=  0)  {	  if(result    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	8	replace
60	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_INT)!=  0)  {  If((  _numTypesValid  &  NR_INT)!=  0)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  _numTypesValid  &  NR_INT)!=  0)  {  If((  _numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((    _numTypesValid    &    NR_INT)!=    0)    {    If((  _numTypesValid  &  NR_INT)!=  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
61	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  _numTypesValid  &  NR_LONG)!=  0)  {	  if(((long)result)!=    0)    {    	compilable	  [FE]  JsonParseException  	17	8	replace
62	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  _numTypesValid  &  NR_LONG)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  _numTypesValid  &  NR_LONG)!=  0)  {	  if(((long)result)!=    0)    {    	compilable	  [FE]  JsonParseException  	17	8	replace
63	[BUG]  [BUGGY]  if(result!=  0)  {  If(result!=  0)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  0)  {  If(result!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    0)    {    If(result!=  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
64	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }  [CE]  method  compareTo  in  class  BigInteger  cannot  be  applied  to  given  types;  [FE]                JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt();  }	      	non-compiled	[CE]  method  compareTo  in  class  BigInteger  cannot  be  applied  to  given  types;	9	None	replace
65	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                  JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }	      	compilable	  [FE]  JsonParseException  	9	8	replace
66	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [FE]  JsonParseException  [FE]                  JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigInt)>  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }	      	compilable	  [FE]  JsonParseException  	9	8	replace
67	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt  [CE]  [FE]                    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt	      	non-compiled	[CE]  	9	None	replace
68	[BUG]  [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt()  [CE]  ';'  expected  [FE]                      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt()  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0)  {  if(BI_MIN_INT.compareTo(_numberBigDecimal)>  0  ||  BI_MAX_INT.compareTo(_numberBigDecimal)  <  0)  {  reportOverflowInt()	      	non-compiled	[CE]  ';'  expected	9	None	replace
69	[BUG]  [BUGGY]  if(((long)result)!=  0)  {  If(((long)result)!=  0)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(((long)result)!=  0)  {  If(((long)result)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(((long)result)!=    0)    {    If(((long)result)!=  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
70	[BUG]  [BUGGY]  if(result!=  _numberLong)  {  If(result!=  _numberLong)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  _numberLong)  {  If(result!=  _numberLong)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    _numberLong)    {    If(result!=  _numberLong)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
71	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(_numTypesValid!=  NR_UNKNOWN)  {	  if(result!=    0)    {    	compilable	  [FE]  JsonParseException  	4	8	replace
72	[BUG]  [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(_numTypesValid!=  NR_UNKNOWN)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(_numTypesValid!=  NR_UNKNOWN)  {	  if(result!=    0)    {    	compilable	  [FE]  JsonParseException  	4	8	replace
73	[BUG]  [BUGGY]  if(result!=  _numberInt)  {  If(result!=  _numberInt)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  _numberInt)  {  If(result!=  _numberInt)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=    _numberInt)    {    If(result!=  _numberInt)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
74	[BUG]  [BUGGY]  if(result  >=  0)  {  If(result  >=  0)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  >=  0)  {  If(result  >=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result    >=    0)    {    If(result  >=  0)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
75	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  >  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  >  0)  {	  if(result    >=    0)    {    	compilable	  [FE]  JsonParseException  	11	8	replace
76	[BUG]  [BUGGY]  if(result  >  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  >  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  >  0)  {	  if(result    >=    0)    {    	compilable	  [FE]  JsonParseException  	11	8	replace
77	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext();  [CE]  illegal  start  of  type  [FE]                JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext();  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  result  =  Math.min(result,  _numTypesValid);  [CE]  illegal  start  of  type  [FE]                  JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  result  =  Math.min(result,  _numTypesValid);  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	result  =  Math.min(result,  _numTypesValid);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result);  [CE]  illegal  start  of  type  [FE]                    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  _parsingContext  =  JsonReadContext.createRootContext(-1,  result);  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	_parsingContext  =  JsonReadContext.createRootContext(-1,  result);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  if(!(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(!(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(!(_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if(result!=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	4	None	replace
81	[BUG]  [BUGGY]  if(!(_numTypesValid  &  NR_INT)!=  0)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(!(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(!(_numTypesValid  &  NR_INT)!=  0)  {	  if(result!=    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	4	None	replace
82	[BUG]  [BUGGY]  if(result!=  _numberInt.intValue())  {  [CE]  int  cannot  be  dereferenced  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result!=  _numberInt.intValue())  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result!=  _numberInt.intValue())  {	  if(result!=    _numberInt)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	13	None	replace
83	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if(result    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	8	replace
84	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0  ||(_numTypesValid  &  NR_DOUBLE)!=  0)  {	  if(result    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	8	replace
85	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {	  if(result    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	8	replace
86	[BUG]  [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if(result  ==  0  ||(_numTypesValid  &  NR_INT)!=  0)  {	  if(result    ==    0)    {    	compilable	  [FE]  JsonParseException  	2	8	replace
87	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {	  if(((long)result)!=    0)    {    	compilable	  [FE]  JsonParseException  	17	8	replace
88	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  _numTypesValid  &  NR_BIGDECIMAL)!=  0)  {	  if(((long)result)!=    0)    {    	compilable	  [FE]  JsonParseException  	17	8	replace
89	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {	  if(((long)result)!=    0)    {    	compilable	  [FE]  JsonParseException  	17	8	replace
90	[BUG]  [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]    {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {  int  result  =  (int)  _numberLong;    [BUGGY]  if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {  [BUGGY]    _reportError(   "Numeric  value  (   "+getText()+   ")  out  of  range  of  int   ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  }  else  if  ((_numTypesValid  &  NR_DOUBLE)  !=  0)  {  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	if((  _numTypesValid  &  NR_DOUBLE)!=  0)  {	  if(((long)result)!=    0)    {    	compilable	  [FE]  JsonParseException  	17	8	replace
