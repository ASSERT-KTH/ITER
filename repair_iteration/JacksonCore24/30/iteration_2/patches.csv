bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
2	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
3	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
4	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
5	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
6	[BUG]  [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken!=    JsonToken.VALUE_NUMBER_INT)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	14	None	replace
7	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
8	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
9	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  >=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
10	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
11	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getCurrentIndex();  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {        [BUGGY]  Integer  i  =  _parsingContext.getCurrentIndex();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	Integer  i  =  _parsingContext.getCurrentIndex();	  Integer    i    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
12	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getNumericValue();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  Integer  i  =  _parsingContext.getNumericValue();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	Integer  i  =  _parsingContext.getNumericValue();	  Integer    i    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
13	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getCurrentName();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {        [BUGGY]  Integer  i  =  _parsingContext.getCurrentName();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	Integer  i  =  _parsingContext.getCurrentName();	  Integer    i    =    _parsingContext.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
14	[BUG]  [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]        com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_BLOCK)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	60	None	replace
15	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	43	32	replace
16	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	43	32	replace
17	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  JsonParseException  	54	19	replace
18	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  JsonParseException  	54	19	replace
19	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	24	30	replace
20	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	24	30	replace
21	[BUG]  [BUGGY]  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.FIELD_NAME))  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.FIELD_NAME))  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    ||(_currToken    ==    JsonToken.VALUE_NUMBER_INT    &&    _currToken    ==    JsonToken.FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
22	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken!=  J  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken!=  J  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken!=  J	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    ||(_currToken    ==    JsonToken.VALUE_NUMBER_INT    &&    _currToken    ==    JsonToken.FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
23	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  J  [CE]  illegal  start  of  expression  [FE]                  JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  J  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  J	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    ||(_currToken    ==    JsonToken.VALUE_NUMBER_INT    &&    _currToken    ==    JsonToken.FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
24	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
25	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
26	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
27	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken!=  JsonToken.FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken!=  JsonToken.FIELD_NAME))  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken!=  JsonToken.FIELD_NAME))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
28	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
29	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getIOContext();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  Integer  i  =  _parsingContext.getIOContext();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	Integer  i  =  _parsingContext.getIOContext();	  Integer    i    =    _parsingContext.getParent();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
30	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getInputType();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {        [BUGGY]  Integer  i  =  _parsingContext.getInputType();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	Integer  i  =  _parsingContext.getInputType();	  Integer    i    =    _parsingContext.getParent();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
31	[BUG]  [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	13	None	replace
32	[BUG]  [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]              JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	13	None	replace
33	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
34	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
35	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
36	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
37	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
38	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
39	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
40	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  >=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  >=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  >=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
41	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_LONG)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_LONG)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
42	[BUG]  [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _numTypesValid  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _numTypesValid  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _numTypesValid  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	27	None	replace
43	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  JsonParseException  	38	10	replace
44	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  JsonParseException  [FE]            com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  JsonParseException  	38	10	replace
45	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createChildArrayContext();  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  ctxt.createChildArrayContext();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  ctxt.createChildArrayContext();	  _parsingContext    =    _parsingContext.createChildArrayContext();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
46	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext(-1);	  _parsingContext    =    _parsingContext.createChildArrayContext();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
47	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	10	30	replace
48	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	10	30	replace
49	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
50	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
51	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
52	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
53	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  JsonParseException  	26	8	replace
54	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  JsonParseException  	26	8	replace
55	[BUG]  [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	42	None	replace
56	[BUG]  [BUGGY]  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric      [CONTEXT]      {        [BUGGY]  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    If(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
57	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    	compilable	  [FE]  JsonParseException  	58	8	replace
58	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    	compilable	  [FE]  JsonParseException  	58	8	replace
59	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  JsonParseException  	8	19	replace
60	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  JsonParseException  	8	19	replace
61	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  _numberNegative);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  _numberNegative);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  _numberNegative);	  _parsingContext    =    _parsingContext.createChildObjectContext(ctxt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
62	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(ctxt);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(ctxt);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext(ctxt);	  _parsingContext    =    _parsingContext.createChildObjectContext(ctxt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
63	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  parent);  [CE]  illegal  start  of  type  [FE]                              JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  parent);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  parent);	  _parsingContext    =    _parsingContext.createChildObjectContext(ctxt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
64	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  expType);  [CE]  illegal  start  of  type  [FE]                                JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  expType);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  expType);	  _parsingContext    =    _parsingContext.createChildObjectContext(ctxt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
65	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
66	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
67	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
68	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.END_OBJECT))  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.END_OBJECT))  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    ||(_currToken  ==  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.END_OBJECT))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
69	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
70	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
71	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
72	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
73	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_LONG  ||  _currToken!=  JsonToken.VALUE_NUMBER_LONG)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_LONG  ||  _currToken!=  JsonToken.VALUE_NUMBER_LONG)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_LONG  ||  _currToken!=  JsonToken.VALUE_NUMBER_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
74	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_BLOCK  ||  _currToken!=  JsonToken.VALUE_NUMBER_BLOCK)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_BLOCK  ||  _currToken!=  JsonToken.VALUE_NUMBER_BLOCK)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_BLOCK  ||  _currToken!=  JsonToken.VALUE_NUMBER_BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
75	[BUG]  [BUGGY]  int  len  =  _inputEnd.length();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  int  len  =  _inputEnd.length();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	int  len  =  _inputEnd.length();	  int    len    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
76	[BUG]  [BUGGY]  int  len  =  _inputPtr.length()  +  1;  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {        [BUGGY]  int  len  =  _inputPtr.length()  +  1;  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	int  len  =  _inputPtr.length()  +  1;	  int    len    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
77	[BUG]  [BUGGY]  int  len  =  _inputPtr.length()  -  1;  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  int  len  =  _inputPtr.length()  -  1;  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	int  len  =  _inputPtr.length()  -  1;	  int    len    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
78	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  JsonParseException  	64	19	replace
79	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  JsonParseException  	64	19	replace
80	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	64	27	replace
81	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]          JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	64	27	replace
82	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
83	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
84	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
85	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
86	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
87	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext();  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  ctxt.createChildObjectContext();	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
88	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1);	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
89	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
90	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
91	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
92	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
93	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
94	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  JsonParseException  	21	19	replace
95	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  JsonParseException  	21	19	replace
96	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
97	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
98	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
99	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_LONG  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_LONG  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_LONG  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
100	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  JsonParseException  	52	19	replace
101	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  JsonParseException  	52	19	replace
102	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	52	30	replace
103	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	52	30	replace
104	[BUG]  [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	46	None	replace
105	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  JsonParseException  	66	8	replace
106	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  JsonParseException  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  JsonParseException  	66	8	replace
107	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	66	30	replace
108	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	66	30	replace
109	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  JsonParseException  	66	8	replace
110	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [FE]  JsonParseException  [FE]        com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  JsonParseException  	66	8	replace
111	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]          com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	66	32	replace
112	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]          com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	66	32	replace
113	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
114	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
115	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
116	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
117	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  JsonParseException  	2	8	replace
118	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  JsonParseException  	2	8	replace
119	[BUG]  [BUGGY]  _parsingContext  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  parent.getParent();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  parent.getParent();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
120	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
121	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
122	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
123	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
124	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]            JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
125	[BUG]  [BUGGY]  _parsingContext.setCurrentName(null);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext.setCurrentName(null);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext.setCurrentName(null);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
126	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative  +  1);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext.setCurrentName(_numberNegative  +  1);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext.setCurrentName(_numberNegative  +  1);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
127	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  expType);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext.setCurrentName(_numberNegative,  expType);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext.setCurrentName(_numberNegative,  expType);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
128	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1,  1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
129	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                      JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext(-1,  -1);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  ctxt.createChildObjectContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
130	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  JsonParseException  	52	8	replace
131	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  JsonParseException  	52	8	replace
132	[BUG]  [BUGGY]  _parsingContext.setCurrentName(NR_NAME);  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext.setCurrentName(NR_NAME);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext.setCurrentName(NR_NAME);	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
133	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  int  len  =  _inputBuffer.length();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	int  len  =  _inputBuffer.length();	  int    len    =    _inputPtr.length();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
134	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
135	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
136	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
137	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INTEGER  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INTEGER  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INTEGER  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
138	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  >=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  >=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  >=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
139	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	13	27	replace
140	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	13	27	replace
141	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
142	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
143	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  >=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
144	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getNumberOfLinks();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  Integer  i  =  _parsingContext.getNumberOfLinks();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	Integer  i  =  _parsingContext.getNumberOfLinks();	  Integer    i    =    _parsingContext.getParent();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
145	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getTypeDesc();  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {        [BUGGY]  Integer  i  =  _parsingContext.getTypeDesc();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	Integer  i  =  _parsingContext.getTypeDesc();	  Integer    i    =    _parsingContext.getParent();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
146	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
147	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]      JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
148	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	6	32	replace
149	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	6	32	replace
150	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
151	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_NAME)  {  [CE]  cannot  find  symbol  VALUE_NUMBER_NAME  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_NAME	22	None	replace
152	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
153	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
154	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  JsonParseException  	4	19	replace
155	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [FE]  JsonParseException  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  JsonParseException  	4	19	replace
156	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	4	32	replace
157	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	4	32	replace
158	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
159	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.END_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.END_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.END_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
160	[BUG]  [BUGGY]  _parsingContext  =  _ioContext.getParent();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _ioContext.getParent();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _ioContext.getParent();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
161	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  _ioContext);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  _ioContext);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  _ioContext);	  _parsingContext    =    _parsingContext.createChildObjectContext(ctxt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
162	[BUG]  [BUGGY]  _parsingContext  =  _ioContext.createChildObjectContext(ctxt);  [CE]  illegal  start  of  type  [FE]                            JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _ioContext.createChildObjectContext(ctxt);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _ioContext.createChildObjectContext(ctxt);	  _parsingContext    =    _parsingContext.createChildObjectContext(ctxt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
163	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  If(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  If(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    If(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
164	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(0,  0);  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(0,  0);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(0,  0);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
165	[BUG]  [BUGGY]  Integer  i  =  _parsingContext.getInputParent();  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  Integer  i  =  _parsingContext.getInputParent();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	Integer  i  =  _parsingContext.getInputParent();	  Integer    i    =    _parsingContext.getParent();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
166	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.FIELD_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.FIELD_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.FIELD_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
167	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
168	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_LONG)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_LONG)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_LONG)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
169	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	4	27	replace
170	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	4	27	replace
171	[BUG]  [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	27	None	replace
172	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_ARRAY)  {  [CE]  cannot  find  symbol  VALUE_NUMBER_ARRAY  [FE]        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_ARRAY)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER_ARRAY	58	None	replace
173	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_UNKNOWN  ||  _currToken  ==  JsonToken.VALUE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_UNKNOWN  ||  _currToken  ==  JsonToken.VALUE_UNKNOWN)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_UNKNOWN  ||  _currToken  ==  JsonToken.VALUE_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
174	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_BLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_BLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_BLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
175	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  If(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  If(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    If(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
176	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	6	27	replace
177	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  &&  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	6	27	replace
178	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
179	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  &&  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  &&  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken!=    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	63	29	replace
180	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  &&  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  &&  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  &&  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken!=    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric  	63	29	replace
181	[BUG]  [BUGGY]  if(_parsingContext!=  null)  {  _parsingContext.setCurrentName(_numberNegative);  }  [CE]  illegal  start  of  type  [FE]                        JsonParseException      [CONTEXT]      {        [BUGGY]  if(_parsingContext!=  null)  {  _parsingContext.setCurrentName(_numberNegative);  }  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_parsingContext!=  null)  {  _parsingContext.setCurrentName(_numberNegative);  }	  _parsingContext.setCurrentName(_numberNegative);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
182	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createParent();  [CE]  illegal  start  of  type  [FE]                    JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  ctxt.createParent();  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  ctxt.createParent();	  _parsingContext    =    ctxt.getParent();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
183	[BUG]  [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_NAME)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]            JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	24	None	replace
184	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  JsonParseException  	54	19	replace
185	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  JsonParseException  	54	19	replace
186	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_BLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_BLOAT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Current  token  (VALUE_NUMBER_INT)  not  numeric    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_BLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_BLOAT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_FLOAT    ||    _currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_BLOAT  ||  _currToken!=  JsonToken.VALUE_NUMBER_BLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
187	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
188	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  _inputBuffer);  [CE]  illegal  start  of  type  [FE]                          JsonParseException      [CONTEXT]      {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  _inputBuffer);  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(ctxt,  _inputBuffer);	  _parsingContext    =    _parsingContext.createChildObjectContext(ctxt);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
189	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
190	[BUG]  [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _numTypesValid  ==  JsonToken.START_OBJECT)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]                JsonParseException      [CONTEXT]      {        [BUGGY]  if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _numTypesValid  ==  JsonToken.START_OBJECT)  {  [BUGGY]      int  len  =  _intLength;  if  (len  <=  9)  {  int  i  =  _textBuffer.contentsAsInt(_numberNegative);  _numberInt  =  i;  _numTypesValid  =  NR_INT;  return;  }  if  (len  <=  18)  {  //  definitely  fits  AND  is  easy  to  parse  using  2  int  parse  calls  long  l  =  _textBuffer.contentsAsLong(_numberNegative);  [CLASS]  ParserBase  [METHOD]  _parseNumericValue  [RETURN_TYPE]  void  int  expType  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  oldState  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	if(_numTypesValid  ==  JsonToken.VALUE_NUMBER_INT  ||  _numTypesValid  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	46	None	replace
