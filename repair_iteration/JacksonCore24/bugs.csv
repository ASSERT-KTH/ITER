bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] int rawLen = rawNum.length(); [FE] JsonParseException [CONTEXT] protected String _longIntegerDesc(String rawNum) { [BUGGY] int rawLen = rawNum.length(); [BUGGY] if (rawLen < 1000) { return rawNum; } if (rawNum.startsWith("-")) { rawLen -= 1; } return String.format("[Integer with %d digits]", rawLen); } [CLASS] ParserMinimalBase [METHOD] _longIntegerDesc [RETURN_TYPE] String  String rawNum [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken inputType t String rawNum int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.7905694150420948	598	598	8	replace	
2	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected String _longIntegerDesc(String rawNum) { [BUGGY] [BUGGY] int rawLen = rawNum.length(); if (rawLen < 1000) { return rawNum; } if (rawNum.startsWith("-")) { rawLen -= 1; } return String.format("[Integer with %d digits]", rawLen); } [CLASS] ParserMinimalBase [METHOD] _longIntegerDesc [RETURN_TYPE] String  String rawNum [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken inputType t String rawNum int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.7905694150420948	598	598	8	add	
3	[BUG] [BUGGY] if (rawLen < 1000) { [FE] JsonParseException [CONTEXT] protected String _longIntegerDesc(String rawNum) { int rawLen = rawNum.length(); [BUGGY] if (rawLen < 1000) { [BUGGY] return rawNum; } if (rawNum.startsWith("-")) { rawLen -= 1; } return String.format("[Integer with %d digits]", rawLen); } [CLASS] ParserMinimalBase [METHOD] _longIntegerDesc [RETURN_TYPE] String  String rawNum [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken inputType t String rawNum int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.7905694150420948	599	599	8	replace	
4	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected String _longIntegerDesc(String rawNum) { int rawLen = rawNum.length(); [BUGGY] [BUGGY] if (rawLen < 1000) { return rawNum; } if (rawNum.startsWith("-")) { rawLen -= 1; } return String.format("[Integer with %d digits]", rawLen); } [CLASS] ParserMinimalBase [METHOD] _longIntegerDesc [RETURN_TYPE] String  String rawNum [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken inputType t String rawNum int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.7905694150420948	599	599	8	add	
5	[BUG] [BUGGY] if (JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION.enabledIn(_features)) { [FE] JsonParseException [CONTEXT] protected Object _getSourceReference() { [BUGGY] if (JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION.enabledIn(_features)) { [BUGGY] return _ioContext.getSourceReference(); } return null; } [CLASS] ParserBase [METHOD] _getSourceReference [RETURN_TYPE] Object  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow actCh bindex bits ch changed changedFeatures changes col expLen expType f features fractLen i index intLen len mask newFeatureFlags newMask newState offset oldState result unescaped values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.7844645405527362	1155	1155	8	replace	
6	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected Object _getSourceReference() { [BUGGY] [BUGGY] if (JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION.enabledIn(_features)) { return _ioContext.getSourceReference(); } return null; } [CLASS] ParserBase [METHOD] _getSourceReference [RETURN_TYPE] Object  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow actCh bindex bits ch changed changedFeatures changes col expLen expType f features fractLen i index intLen len mask newFeatureFlags newMask newState offset oldState result unescaped values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.7844645405527362	1155	1155	8	add	
7	[BUG] [BUGGY] return _ioContext.getSourceReference(); [FE] JsonParseException [CONTEXT] protected Object _getSourceReference() { if (JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION.enabledIn(_features)) { [BUGGY] return _ioContext.getSourceReference(); [BUGGY] } return null; } [CLASS] ParserBase [METHOD] _getSourceReference [RETURN_TYPE] Object  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow actCh bindex bits ch changed changedFeatures changes col expLen expType f features fractLen i index intLen len mask newFeatureFlags newMask newState offset oldState result unescaped values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.7844645405527362	1156	1156	8	replace	
8	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected Object _getSourceReference() { if (JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION.enabledIn(_features)) { [BUGGY] [BUGGY] return _ioContext.getSourceReference(); } return null; } [CLASS] ParserBase [METHOD] _getSourceReference [RETURN_TYPE] Object  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow actCh bindex bits ch changed changedFeatures changes col expLen expType f features fractLen i index intLen len mask newFeatureFlags newMask newState offset oldState result unescaped values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.7844645405527362	1156	1156	8	add	
9	[BUG] [BUGGY] throw _constructError(msg); [FE] JsonParseException [CONTEXT] protected final void _reportError(String msg) throws JsonParseException { [BUGGY] throw _constructError(msg); [BUGGY] } [CLASS] ParserMinimalBase [METHOD] _reportError [RETURN_TYPE] void  String msg [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL c BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken currToken inputType t type String msg int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features i id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.6681531047810609	704	704	8	replace	
10	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final void _reportError(String msg) throws JsonParseException { [BUGGY] [BUGGY] throw _constructError(msg); } [CLASS] ParserMinimalBase [METHOD] _reportError [RETURN_TYPE] void  String msg [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL c BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken currToken inputType t type String msg int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features i id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.6681531047810609	704	704	8	add	
11	[BUG] [BUGGY] return rawNum; [FE] JsonParseException [CONTEXT] protected String _longIntegerDesc(String rawNum) { int rawLen = rawNum.length(); if (rawLen < 1000) { [BUGGY] return rawNum; [BUGGY] } if (rawNum.startsWith("-")) { rawLen -= 1; } return String.format("[Integer with %d digits]", rawLen); } [CLASS] ParserMinimalBase [METHOD] _longIntegerDesc [RETURN_TYPE] String  String rawNum [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken inputType t String rawNum int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.6123724356957946	600	600	8	replace	
12	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected String _longIntegerDesc(String rawNum) { int rawLen = rawNum.length(); if (rawLen < 1000) { [BUGGY] [BUGGY] return rawNum; } if (rawNum.startsWith("-")) { rawLen -= 1; } return String.format("[Integer with %d digits]", rawLen); } [CLASS] ParserMinimalBase [METHOD] _longIntegerDesc [RETURN_TYPE] String  String rawNum [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken inputType t String rawNum int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.6123724356957946	600	600	8	add	
13	[BUG] [BUGGY] throw _constructError(String.format(msg, arg1, arg2)); [FE] JsonParseException [CONTEXT] protected final void _reportError(String msg, Object arg1, Object arg2) throws JsonParseException { [BUGGY] throw _constructError(String.format(msg, arg1, arg2)); [BUGGY] } [CLASS] ParserMinimalBase [METHOD] _reportError [RETURN_TYPE] void  String msg Object arg1 Object arg2 [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL c BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken currToken inputType t type Object arg1 arg2 String msg int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features i id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.6123724356957946	714	714	8	replace	
14	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final void _reportError(String msg, Object arg1, Object arg2) throws JsonParseException { [BUGGY] [BUGGY] throw _constructError(String.format(msg, arg1, arg2)); } [CLASS] ParserMinimalBase [METHOD] _reportError [RETURN_TYPE] void  String msg Object arg1 Object arg2 [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL c BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken currToken inputType t type Object arg1 arg2 String msg int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features i id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.6123724356957946	714	714	8	add	
15	[BUG] [BUGGY] _reportTooLongIntegral(expType, numStr); [FE] JsonParseException [CONTEXT] if (NumberInput.inLongRange(buf, offset, len, _numberNegative)) {  _numberLong = Long.parseLong(numStr); _numTypesValid = NR_LONG; } else {  if ((expType == NR_INT) || (expType == NR_LONG)) { [BUGGY] _reportTooLongIntegral(expType, numStr); [BUGGY] } if ((expType == NR_DOUBLE) || (expType == NR_FLOAT)) { _numberDouble = NumberInput.parseDouble(numStr); _numTypesValid = NR_DOUBLE; } else {  _numberBigInt = new BigInteger(numStr); _numTypesValid = NR_BIGINT; } } [CLASS] ParserBase [METHOD] _parseSlowInt [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value NumberFormatException nex ByteArrayBuilder _byteArrayBuilder builder String numStr int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6123724356957946	849	849	8	replace	
16	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] if (NumberInput.inLongRange(buf, offset, len, _numberNegative)) {  _numberLong = Long.parseLong(numStr); _numTypesValid = NR_LONG; } else {  if ((expType == NR_INT) || (expType == NR_LONG)) { [BUGGY] [BUGGY] _reportTooLongIntegral(expType, numStr); } if ((expType == NR_DOUBLE) || (expType == NR_FLOAT)) { _numberDouble = NumberInput.parseDouble(numStr); _numTypesValid = NR_DOUBLE; } else {  _numberBigInt = new BigInteger(numStr); _numTypesValid = NR_BIGINT; } } [CLASS] ParserBase [METHOD] _parseSlowInt [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value NumberFormatException nex ByteArrayBuilder _byteArrayBuilder builder String numStr int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6123724356957946	849	849	8	add	
17	[BUG] [BUGGY] final String numDesc = _longIntegerDesc(rawNum); [FE] JsonParseException [CONTEXT] protected void _reportTooLongIntegral(int expType, String rawNum) throws IOException { [BUGGY] final String numDesc = _longIntegerDesc(rawNum); [BUGGY] _reportError("Numeric value (%s) out of range of %s", numDesc, (expType == NR_LONG) ? "long" : "int"); } [CLASS] ParserBase [METHOD] _reportTooLongIntegral [RETURN_TYPE] void  int expType String rawNum [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder String numDesc rawNum int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6123724356957946	869	869	8	replace	
18	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected void _reportTooLongIntegral(int expType, String rawNum) throws IOException { [BUGGY] [BUGGY] final String numDesc = _longIntegerDesc(rawNum); _reportError("Numeric value (%s) out of range of %s", numDesc, (expType == NR_LONG) ? "long" : "int"); } [CLASS] ParserBase [METHOD] _reportTooLongIntegral [RETURN_TYPE] void  int expType String rawNum [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder String numDesc rawNum int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6123724356957946	869	869	8	add	
19	[BUG] [BUGGY] _reportError("Numeric value (%s) out of range of %s", numDesc, (expType == NR_LONG) ? "long" : "int"); [FE] JsonParseException [CONTEXT] protected void _reportTooLongIntegral(int expType, String rawNum) throws IOException { final String numDesc = _longIntegerDesc(rawNum); [BUGGY] _reportError("Numeric value (%s) out of range of %s", numDesc,    (expType == NR_LONG) ? "long" : "int"); [BUGGY] (expType == NR_LONG) ? "long" : "int"); } [CLASS] ParserBase [METHOD] _reportTooLongIntegral [RETURN_TYPE] void  int expType String rawNum [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder String numDesc rawNum int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6123724356957946	870	871	8	replace	
20	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected void _reportTooLongIntegral(int expType, String rawNum) throws IOException { final String numDesc = _longIntegerDesc(rawNum); [BUGGY] [BUGGY] _reportError("Numeric value (%s) out of range of %s", numDesc,    (expType == NR_LONG) ? "long" : "int"); (expType == NR_LONG) ? "long" : "int"); } [CLASS] ParserBase [METHOD] _reportTooLongIntegral [RETURN_TYPE] void  int expType String rawNum [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder String numDesc rawNum int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6123724356957946	870	871	8	add	
21	[BUG] [BUGGY] if (len <= 18) { // definitely fits AND is easy to parse using 2 int parse calls long l = _textBuffer.contentsAsLong(_numberNegative); [FE] JsonParseException [CONTEXT]  if (_currToken == JsonToken.VALUE_NUMBER_INT) { int len = _intLength;  if (len <= 9) { int i = _textBuffer.contentsAsInt(_numberNegative); _numberInt = i; _numTypesValid = NR_INT; return; } [BUGGY] if (len <= 18) { // definitely fits AND is easy to parse using 2 int parse calls    long l = _textBuffer.contentsAsLong(_numberNegative); [BUGGY] long l = _textBuffer.contentsAsLong(_numberNegative);  if (len == 10) { if (_numberNegative) { if (l >= MIN_INT_L) { _numberInt = (int) l; _numTypesValid = NR_INT; return; } } else { [CLASS] ParserBase [METHOD] _parseNumericValue [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	replace	
22	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT]  if (_currToken == JsonToken.VALUE_NUMBER_INT) { int len = _intLength;  if (len <= 9) { int i = _textBuffer.contentsAsInt(_numberNegative); _numberInt = i; _numTypesValid = NR_INT; return; } [BUGGY] [BUGGY] if (len <= 18) { // definitely fits AND is easy to parse using 2 int parse calls    long l = _textBuffer.contentsAsLong(_numberNegative); long l = _textBuffer.contentsAsLong(_numberNegative);  if (len == 10) { if (_numberNegative) { if (l >= MIN_INT_L) { _numberInt = (int) l; _numTypesValid = NR_INT; return; } } else { [CLASS] ParserBase [METHOD] _parseNumericValue [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.6030226891555273	753	754	8	add	
23	[BUG] [BUGGY] if ((_numTypesValid & NR_LONG) == 0) { [FE] JsonParseException [CONTEXT] public long getLongValue() throws IOException { [BUGGY] if ((_numTypesValid & NR_LONG) == 0) { [BUGGY] if (_numTypesValid == NR_UNKNOWN) { _parseNumericValue(NR_LONG); } if ((_numTypesValid & NR_LONG) == 0) { convertNumberToLong(); } } return _numberLong; } [CLASS] ParserBase [METHOD] getLongValue [RETURN_TYPE] long  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.567774973957669	658	658	8	replace	
24	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] public long getLongValue() throws IOException { [BUGGY] [BUGGY] if ((_numTypesValid & NR_LONG) == 0) { if (_numTypesValid == NR_UNKNOWN) { _parseNumericValue(NR_LONG); } if ((_numTypesValid & NR_LONG) == 0) { convertNumberToLong(); } } return _numberLong; } [CLASS] ParserBase [METHOD] getLongValue [RETURN_TYPE] long  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.567774973957669	658	658	8	add	
25	[BUG] [BUGGY] int len = _intLength; [FE] JsonParseException [CONTEXT] {  if (_currToken == JsonToken.VALUE_NUMBER_INT) { [BUGGY] int len = _intLength; [BUGGY]  if (len <= 9) { int i = _textBuffer.contentsAsInt(_numberNegative); _numberInt = i; _numTypesValid = NR_INT; return; } if (len <= 18) { // definitely fits AND is easy to parse using 2 int parse calls long l = _textBuffer.contentsAsLong(_numberNegative);  [CLASS] ParserBase [METHOD] _parseNumericValue [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	replace	
26	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] {  if (_currToken == JsonToken.VALUE_NUMBER_INT) { [BUGGY] [BUGGY] int len = _intLength;  if (len <= 9) { int i = _textBuffer.contentsAsInt(_numberNegative); _numberInt = i; _numTypesValid = NR_INT; return; } if (len <= 18) { // definitely fits AND is easy to parse using 2 int parse calls long l = _textBuffer.contentsAsLong(_numberNegative);  [CLASS] ParserBase [METHOD] _parseNumericValue [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	745	745	8	add	
27	[BUG] [BUGGY] if (len <= 9) { [FE] JsonParseException [CONTEXT] {  if (_currToken == JsonToken.VALUE_NUMBER_INT) { int len = _intLength;  [BUGGY] if (len <= 9) { [BUGGY] int i = _textBuffer.contentsAsInt(_numberNegative); _numberInt = i; _numTypesValid = NR_INT; return; } if (len <= 18) { // definitely fits AND is easy to parse using 2 int parse calls long l = _textBuffer.contentsAsLong(_numberNegative);  if (len == 10) { if (_numberNegative) { [CLASS] ParserBase [METHOD] _parseNumericValue [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	replace	
28	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] {  if (_currToken == JsonToken.VALUE_NUMBER_INT) { int len = _intLength;  [BUGGY] [BUGGY] if (len <= 9) { int i = _textBuffer.contentsAsInt(_numberNegative); _numberInt = i; _numTypesValid = NR_INT; return; } if (len <= 18) { // definitely fits AND is easy to parse using 2 int parse calls long l = _textBuffer.contentsAsLong(_numberNegative);  if (len == 10) { if (_numberNegative) { [CLASS] ParserBase [METHOD] _parseNumericValue [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5443310539518174	747	747	8	add	
29	[BUG] [BUGGY] int result = (int) _numberLong; [FE] JsonParseException [CONTEXT] {  if ((_numTypesValid & NR_LONG) != 0) {  [BUGGY] int result = (int) _numberLong; [BUGGY] if (((long) result) != _numberLong) { _reportError("Numeric value ("+getText()+") out of range of int"); } _numberInt = result; } else if ((_numTypesValid & NR_BIGINT) != 0) { if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { reportOverflowInt(); } _numberInt = _numberBigInt.intValue(); [CLASS] ParserBase [METHOD] convertNumberToInt [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	
30	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] {  if ((_numTypesValid & NR_LONG) != 0) {  [BUGGY] [BUGGY] int result = (int) _numberLong; if (((long) result) != _numberLong) { _reportError("Numeric value ("+getText()+") out of range of int"); } _numberInt = result; } else if ((_numTypesValid & NR_BIGINT) != 0) { if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { reportOverflowInt(); } _numberInt = _numberBigInt.intValue(); [CLASS] ParserBase [METHOD] convertNumberToInt [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	
31	[BUG] [BUGGY] if (((long) result) != _numberLong) { [FE] JsonParseException [CONTEXT] {  if ((_numTypesValid & NR_LONG) != 0) {  int result = (int) _numberLong; [BUGGY] if (((long) result) != _numberLong) { [BUGGY] _reportError("Numeric value ("+getText()+") out of range of int"); } _numberInt = result; } else if ((_numTypesValid & NR_BIGINT) != 0) { if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { reportOverflowInt(); } _numberInt = _numberBigInt.intValue(); } else if ((_numTypesValid & NR_DOUBLE) != 0) { [CLASS] ParserBase [METHOD] convertNumberToInt [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	replace	
32	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] {  if ((_numTypesValid & NR_LONG) != 0) {  int result = (int) _numberLong; [BUGGY] [BUGGY] if (((long) result) != _numberLong) { _reportError("Numeric value ("+getText()+") out of range of int"); } _numberInt = result; } else if ((_numTypesValid & NR_BIGINT) != 0) { if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { reportOverflowInt(); } _numberInt = _numberBigInt.intValue(); } else if ((_numTypesValid & NR_DOUBLE) != 0) { [CLASS] ParserBase [METHOD] convertNumberToInt [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	886	886	8	add	
33	[BUG] [BUGGY] _reportError("Numeric value ("+getText()+") out of range of int"); [FE] JsonParseException [CONTEXT] {  if ((_numTypesValid & NR_LONG) != 0) {  int result = (int) _numberLong; if (((long) result) != _numberLong) { [BUGGY] _reportError("Numeric value ("+getText()+") out of range of int"); [BUGGY] } _numberInt = result; } else if ((_numTypesValid & NR_BIGINT) != 0) { if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { reportOverflowInt(); } _numberInt = _numberBigInt.intValue(); } else if ((_numTypesValid & NR_DOUBLE) != 0) {  [CLASS] ParserBase [METHOD] convertNumberToInt [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	replace	
34	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] {  if ((_numTypesValid & NR_LONG) != 0) {  int result = (int) _numberLong; if (((long) result) != _numberLong) { [BUGGY] [BUGGY] _reportError("Numeric value ("+getText()+") out of range of int"); } _numberInt = result; } else if ((_numTypesValid & NR_BIGINT) != 0) { if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { reportOverflowInt(); } _numberInt = _numberBigInt.intValue(); } else if ((_numTypesValid & NR_DOUBLE) != 0) {  [CLASS] ParserBase [METHOD] convertNumberToInt [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	887	887	8	add	
35	[BUG] [BUGGY] if (_numTypesValid == NR_UNKNOWN) { [FE] JsonParseException [CONTEXT] public long getLongValue() throws IOException { if ((_numTypesValid & NR_LONG) == 0) { [BUGGY] if (_numTypesValid == NR_UNKNOWN) { [BUGGY] _parseNumericValue(NR_LONG); } if ((_numTypesValid & NR_LONG) == 0) { convertNumberToLong(); } } return _numberLong; } [CLASS] ParserBase [METHOD] getLongValue [RETURN_TYPE] long  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5144957554275265	659	659	8	replace	
36	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] public long getLongValue() throws IOException { if ((_numTypesValid & NR_LONG) == 0) { [BUGGY] [BUGGY] if (_numTypesValid == NR_UNKNOWN) { _parseNumericValue(NR_LONG); } if ((_numTypesValid & NR_LONG) == 0) { convertNumberToLong(); } } return _numberLong; } [CLASS] ParserBase [METHOD] getLongValue [RETURN_TYPE] long  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5144957554275265	659	659	8	add	
37	[BUG] [BUGGY] if ((expType == NR_INT) || (expType == NR_LONG)) { [FE] JsonParseException [CONTEXT] if (NumberInput.inLongRange(buf, offset, len, _numberNegative)) {  _numberLong = Long.parseLong(numStr); _numTypesValid = NR_LONG; } else {  [BUGGY] if ((expType == NR_INT) || (expType == NR_LONG)) { [BUGGY] _reportTooLongIntegral(expType, numStr); } if ((expType == NR_DOUBLE) || (expType == NR_FLOAT)) { _numberDouble = NumberInput.parseDouble(numStr); _numTypesValid = NR_DOUBLE; } else {  _numberBigInt = new BigInteger(numStr); _numTypesValid = NR_BIGINT; } [CLASS] ParserBase [METHOD] _parseSlowInt [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value NumberFormatException nex ByteArrayBuilder _byteArrayBuilder builder String numStr int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5103103630798288	848	848	8	replace	
38	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] if (NumberInput.inLongRange(buf, offset, len, _numberNegative)) {  _numberLong = Long.parseLong(numStr); _numTypesValid = NR_LONG; } else {  [BUGGY] [BUGGY] if ((expType == NR_INT) || (expType == NR_LONG)) { _reportTooLongIntegral(expType, numStr); } if ((expType == NR_DOUBLE) || (expType == NR_FLOAT)) { _numberDouble = NumberInput.parseDouble(numStr); _numTypesValid = NR_DOUBLE; } else {  _numberBigInt = new BigInteger(numStr); _numTypesValid = NR_BIGINT; } [CLASS] ParserBase [METHOD] _parseSlowInt [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value NumberFormatException nex ByteArrayBuilder _byteArrayBuilder builder String numStr int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5103103630798288	848	848	8	add	
39	[BUG] [BUGGY] reportOverflowLong(getText()); [FE] JsonParseException [CONTEXT] protected void reportOverflowLong() throws IOException { [BUGGY] reportOverflowLong(getText()); [BUGGY] } [CLASS] ParserMinimalBase [METHOD] reportOverflowLong [RETURN_TYPE] void  [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken t int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.5	577	577	8	replace	
40	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected void reportOverflowLong() throws IOException { [BUGGY] [BUGGY] reportOverflowLong(getText()); } [CLASS] ParserMinimalBase [METHOD] reportOverflowLong [RETURN_TYPE] void  [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken t int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.5	577	577	8	add	
41	[BUG] [BUGGY] _reportError(String.format("Numeric value (%s) out of range of long (%d - %s)", _longIntegerDesc(numDesc), Long.MIN_VALUE, Long.MAX_VALUE)); [FE] JsonParseException [CONTEXT] protected void reportOverflowLong(String numDesc) throws IOException { [BUGGY] _reportError(String.format("Numeric value (%s) out of range of long (%d - %s)",    _longIntegerDesc(numDesc), Long.MIN_VALUE, Long.MAX_VALUE)); [BUGGY] _longIntegerDesc(numDesc), Long.MIN_VALUE, Long.MAX_VALUE)); } [CLASS] ParserMinimalBase [METHOD] reportOverflowLong [RETURN_TYPE] void  String numDesc [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken t String numDesc int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.5	582	583	8	replace	
42	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected void reportOverflowLong(String numDesc) throws IOException { [BUGGY] [BUGGY] _reportError(String.format("Numeric value (%s) out of range of long (%d - %s)",    _longIntegerDesc(numDesc), Long.MIN_VALUE, Long.MAX_VALUE)); _longIntegerDesc(numDesc), Long.MIN_VALUE, Long.MAX_VALUE)); } [CLASS] ParserMinimalBase [METHOD] reportOverflowLong [RETURN_TYPE] void  String numDesc [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken t String numDesc int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.5	582	583	8	add	
43	[BUG] [BUGGY] if (rawNum.startsWith("-")) { [FE] JsonParseException [CONTEXT] protected String _longIntegerDesc(String rawNum) { int rawLen = rawNum.length(); if (rawLen < 1000) { return rawNum; } [BUGGY] if (rawNum.startsWith("-")) { [BUGGY] rawLen -= 1; } return String.format("[Integer with %d digits]", rawLen); } [CLASS] ParserMinimalBase [METHOD] _longIntegerDesc [RETURN_TYPE] String  String rawNum [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken inputType t String rawNum int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.5	602	602	8	replace	
44	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected String _longIntegerDesc(String rawNum) { int rawLen = rawNum.length(); if (rawLen < 1000) { return rawNum; } [BUGGY] [BUGGY] if (rawNum.startsWith("-")) { rawLen -= 1; } return String.format("[Integer with %d digits]", rawLen); } [CLASS] ParserMinimalBase [METHOD] _longIntegerDesc [RETURN_TYPE] String  String rawNum [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken inputType t String rawNum int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.5	602	602	8	add	
45	[BUG] [BUGGY] return String.format("[Integer with %d digits]", rawLen); [FE] JsonParseException [CONTEXT] protected String _longIntegerDesc(String rawNum) { int rawLen = rawNum.length(); if (rawLen < 1000) { return rawNum; } if (rawNum.startsWith("-")) { rawLen -= 1; } [BUGGY] return String.format("[Integer with %d digits]", rawLen); [BUGGY] } [CLASS] ParserMinimalBase [METHOD] _longIntegerDesc [RETURN_TYPE] String  String rawNum [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken inputType t String rawNum int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.5	605	605	8	replace	
46	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected String _longIntegerDesc(String rawNum) { int rawLen = rawNum.length(); if (rawLen < 1000) { return rawNum; } if (rawNum.startsWith("-")) { rawLen -= 1; } [BUGGY] [BUGGY] return String.format("[Integer with %d digits]", rawLen); } [CLASS] ParserMinimalBase [METHOD] _longIntegerDesc [RETURN_TYPE] String  String rawNum [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D defaultValue char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken inputType t String rawNum int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN ch defaultValue features id open rawLen BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L defaultValue  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.5	605	605	8	add	
47	[BUG] [BUGGY] if (_numTypesValid == NR_UNKNOWN) { [FE] JsonParseException [CONTEXT] { [BUGGY] if (_numTypesValid == NR_UNKNOWN) { [BUGGY] _parseNumericValue(NR_UNKNOWN); // will also check event type }  if (_currToken == JsonToken.VALUE_NUMBER_INT) { if ((_numTypesValid & NR_INT) != 0) { return _numberInt; } if ((_numTypesValid & NR_LONG) != 0) { return _numberLong; } [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	583	583	8	replace	
48	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] { [BUGGY] [BUGGY] if (_numTypesValid == NR_UNKNOWN) { _parseNumericValue(NR_UNKNOWN); // will also check event type }  if (_currToken == JsonToken.VALUE_NUMBER_INT) { if ((_numTypesValid & NR_INT) != 0) { return _numberInt; } if ((_numTypesValid & NR_LONG) != 0) { return _numberLong; } [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	583	583	8	add	
49	[BUG] [BUGGY] if (_currToken == JsonToken.VALUE_NUMBER_INT) { [FE] JsonParseException [CONTEXT] { if (_numTypesValid == NR_UNKNOWN) { _parseNumericValue(NR_UNKNOWN); // will also check event type }  [BUGGY] if (_currToken == JsonToken.VALUE_NUMBER_INT) { [BUGGY] if ((_numTypesValid & NR_INT) != 0) { return _numberInt; } if ((_numTypesValid & NR_LONG) != 0) { return _numberLong; } if ((_numTypesValid & NR_BIGINT) != 0) { return _numberBigInt; }  [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	587	587	8	replace	
50	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] { if (_numTypesValid == NR_UNKNOWN) { _parseNumericValue(NR_UNKNOWN); // will also check event type }  [BUGGY] [BUGGY] if (_currToken == JsonToken.VALUE_NUMBER_INT) { if ((_numTypesValid & NR_INT) != 0) { return _numberInt; } if ((_numTypesValid & NR_LONG) != 0) { return _numberLong; } if ((_numTypesValid & NR_BIGINT) != 0) { return _numberBigInt; }  [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	587	587	8	add	
51	[BUG] [BUGGY] if ((_numTypesValid & NR_INT) != 0) { [FE] JsonParseException [CONTEXT] { if (_numTypesValid == NR_UNKNOWN) { _parseNumericValue(NR_UNKNOWN); // will also check event type }  if (_currToken == JsonToken.VALUE_NUMBER_INT) { [BUGGY] if ((_numTypesValid & NR_INT) != 0) { [BUGGY] return _numberInt; } if ((_numTypesValid & NR_LONG) != 0) { return _numberLong; } if ((_numTypesValid & NR_BIGINT) != 0) { return _numberBigInt; }  return _numberBigDecimal; [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	588	588	8	replace	
52	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] { if (_numTypesValid == NR_UNKNOWN) { _parseNumericValue(NR_UNKNOWN); // will also check event type }  if (_currToken == JsonToken.VALUE_NUMBER_INT) { [BUGGY] [BUGGY] if ((_numTypesValid & NR_INT) != 0) { return _numberInt; } if ((_numTypesValid & NR_LONG) != 0) { return _numberLong; } if ((_numTypesValid & NR_BIGINT) != 0) { return _numberBigInt; }  return _numberBigDecimal; [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	588	588	8	add	
53	[BUG] [BUGGY] if ((_numTypesValid & NR_LONG) != 0) { [FE] JsonParseException [CONTEXT] { if (_numTypesValid == NR_UNKNOWN) { _parseNumericValue(NR_UNKNOWN); // will also check event type }  if (_currToken == JsonToken.VALUE_NUMBER_INT) { if ((_numTypesValid & NR_INT) != 0) { return _numberInt; } [BUGGY] if ((_numTypesValid & NR_LONG) != 0) { [BUGGY] return _numberLong; } if ((_numTypesValid & NR_BIGINT) != 0) { return _numberBigInt; }  return _numberBigDecimal; }   [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	591	591	8	replace	
54	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] { if (_numTypesValid == NR_UNKNOWN) { _parseNumericValue(NR_UNKNOWN); // will also check event type }  if (_currToken == JsonToken.VALUE_NUMBER_INT) { if ((_numTypesValid & NR_INT) != 0) { return _numberInt; } [BUGGY] [BUGGY] if ((_numTypesValid & NR_LONG) != 0) { return _numberLong; } if ((_numTypesValid & NR_BIGINT) != 0) { return _numberBigInt; }  return _numberBigDecimal; }   [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	591	591	8	add	
55	[BUG] [BUGGY] if ((_numTypesValid & NR_BIGINT) != 0) { [FE] JsonParseException [CONTEXT] _parseNumericValue(NR_UNKNOWN); // will also check event type }  if (_currToken == JsonToken.VALUE_NUMBER_INT) { if ((_numTypesValid & NR_INT) != 0) { return _numberInt; } if ((_numTypesValid & NR_LONG) != 0) { return _numberLong; } [BUGGY] if ((_numTypesValid & NR_BIGINT) != 0) { [BUGGY] return _numberBigInt; }  return _numberBigDecimal; }    if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	594	594	8	replace	
56	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] _parseNumericValue(NR_UNKNOWN); // will also check event type }  if (_currToken == JsonToken.VALUE_NUMBER_INT) { if ((_numTypesValid & NR_INT) != 0) { return _numberInt; } if ((_numTypesValid & NR_LONG) != 0) { return _numberLong; } [BUGGY] [BUGGY] if ((_numTypesValid & NR_BIGINT) != 0) { return _numberBigInt; }  return _numberBigDecimal; }    if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	594	594	8	add	
57	[BUG] [BUGGY] return _numberBigInt; [FE] JsonParseException [CONTEXT] }  if (_currToken == JsonToken.VALUE_NUMBER_INT) { if ((_numTypesValid & NR_INT) != 0) { return _numberInt; } if ((_numTypesValid & NR_LONG) != 0) { return _numberLong; } if ((_numTypesValid & NR_BIGINT) != 0) { [BUGGY] return _numberBigInt; [BUGGY] }  return _numberBigDecimal; }    if ((_numTypesValid & NR_BIGDECIMAL) != 0) { return _numberBigDecimal; [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	595	595	8	replace	
58	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] }  if (_currToken == JsonToken.VALUE_NUMBER_INT) { if ((_numTypesValid & NR_INT) != 0) { return _numberInt; } if ((_numTypesValid & NR_LONG) != 0) { return _numberLong; } if ((_numTypesValid & NR_BIGINT) != 0) { [BUGGY] [BUGGY] return _numberBigInt; }  return _numberBigDecimal; }    if ((_numTypesValid & NR_BIGDECIMAL) != 0) { return _numberBigDecimal; [CLASS] ParserBase [METHOD] getNumberValue [RETURN_TYPE] Number  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	595	595	8	add	
59	[BUG] [BUGGY] if (_currToken == JsonToken.VALUE_NUMBER_INT) { [FE] JsonParseException [CONTEXT] {  [BUGGY] if (_currToken == JsonToken.VALUE_NUMBER_INT) { [BUGGY] int len = _intLength;  if (len <= 9) { int i = _textBuffer.contentsAsInt(_numberNegative); _numberInt = i; _numTypesValid = NR_INT; return; } if (len <= 18) { // definitely fits AND is easy to parse using 2 int parse calls long l = _textBuffer.contentsAsLong(_numberNegative); [CLASS] ParserBase [METHOD] _parseNumericValue [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	replace	
60	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] {  [BUGGY] [BUGGY] if (_currToken == JsonToken.VALUE_NUMBER_INT) { int len = _intLength;  if (len <= 9) { int i = _textBuffer.contentsAsInt(_numberNegative); _numberInt = i; _numTypesValid = NR_INT; return; } if (len <= 18) { // definitely fits AND is easy to parse using 2 int parse calls long l = _textBuffer.contentsAsLong(_numberNegative); [CLASS] ParserBase [METHOD] _parseNumericValue [RETURN_TYPE] void  int expType [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	744	744	8	add	
61	[BUG] [BUGGY] } else if ((_numTypesValid & NR_BIGINT) != 0) { [FE] JsonParseException [CONTEXT] { if ((_numTypesValid & NR_INT) != 0) { _numberLong = (long) _numberInt; [BUGGY] } else if ((_numTypesValid & NR_BIGINT) != 0) { [BUGGY] if (BI_MIN_LONG.compareTo(_numberBigInt) > 0 || BI_MAX_LONG.compareTo(_numberBigInt) < 0) { reportOverflowLong(); } _numberLong = _numberBigInt.longValue(); } else if ((_numTypesValid & NR_DOUBLE) != 0) {  if (_numberDouble < MIN_LONG_D || _numberDouble > MAX_LONG_D) { reportOverflowLong(); } [CLASS] ParserBase [METHOD] convertNumberToLong [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	918	918	8	replace	
62	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] { if ((_numTypesValid & NR_INT) != 0) { _numberLong = (long) _numberInt; [BUGGY] [BUGGY] } else if ((_numTypesValid & NR_BIGINT) != 0) { if (BI_MIN_LONG.compareTo(_numberBigInt) > 0 || BI_MAX_LONG.compareTo(_numberBigInt) < 0) { reportOverflowLong(); } _numberLong = _numberBigInt.longValue(); } else if ((_numTypesValid & NR_DOUBLE) != 0) {  if (_numberDouble < MIN_LONG_D || _numberDouble > MAX_LONG_D) { reportOverflowLong(); } [CLASS] ParserBase [METHOD] convertNumberToLong [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	918	918	8	add	
63	[BUG] [BUGGY] if (BI_MIN_LONG.compareTo(_numberBigInt) > 0  || BI_MAX_LONG.compareTo(_numberBigInt) < 0) { [FE] JsonParseException [CONTEXT] { if ((_numTypesValid & NR_INT) != 0) { _numberLong = (long) _numberInt; } else if ((_numTypesValid & NR_BIGINT) != 0) { [BUGGY] if (BI_MIN_LONG.compareTo(_numberBigInt) > 0     || BI_MAX_LONG.compareTo(_numberBigInt) < 0) { [BUGGY] || BI_MAX_LONG.compareTo(_numberBigInt) < 0) { reportOverflowLong(); } _numberLong = _numberBigInt.longValue(); } else if ((_numTypesValid & NR_DOUBLE) != 0) {  if (_numberDouble < MIN_LONG_D || _numberDouble > MAX_LONG_D) { reportOverflowLong(); } _numberLong = (long) _numberDouble; [CLASS] ParserBase [METHOD] convertNumberToLong [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	919	920	8	replace	
64	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] { if ((_numTypesValid & NR_INT) != 0) { _numberLong = (long) _numberInt; } else if ((_numTypesValid & NR_BIGINT) != 0) { [BUGGY] [BUGGY] if (BI_MIN_LONG.compareTo(_numberBigInt) > 0     || BI_MAX_LONG.compareTo(_numberBigInt) < 0) { || BI_MAX_LONG.compareTo(_numberBigInt) < 0) { reportOverflowLong(); } _numberLong = _numberBigInt.longValue(); } else if ((_numTypesValid & NR_DOUBLE) != 0) {  if (_numberDouble < MIN_LONG_D || _numberDouble > MAX_LONG_D) { reportOverflowLong(); } _numberLong = (long) _numberDouble; [CLASS] ParserBase [METHOD] convertNumberToLong [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	919	920	8	add	
65	[BUG] [BUGGY] reportOverflowLong(); [FE] JsonParseException [CONTEXT] { if ((_numTypesValid & NR_INT) != 0) { _numberLong = (long) _numberInt; } else if ((_numTypesValid & NR_BIGINT) != 0) { if (BI_MIN_LONG.compareTo(_numberBigInt) > 0 || BI_MAX_LONG.compareTo(_numberBigInt) < 0) { [BUGGY] reportOverflowLong(); [BUGGY] } _numberLong = _numberBigInt.longValue(); } else if ((_numTypesValid & NR_DOUBLE) != 0) {  if (_numberDouble < MIN_LONG_D || _numberDouble > MAX_LONG_D) { reportOverflowLong(); } _numberLong = (long) _numberDouble; } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { if (BD_MIN_LONG.compareTo(_numberBigDecimal) > 0 [CLASS] ParserBase [METHOD] convertNumberToLong [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	921	921	8	replace	
66	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] { if ((_numTypesValid & NR_INT) != 0) { _numberLong = (long) _numberInt; } else if ((_numTypesValid & NR_BIGINT) != 0) { if (BI_MIN_LONG.compareTo(_numberBigInt) > 0 || BI_MAX_LONG.compareTo(_numberBigInt) < 0) { [BUGGY] [BUGGY] reportOverflowLong(); } _numberLong = _numberBigInt.longValue(); } else if ((_numTypesValid & NR_DOUBLE) != 0) {  if (_numberDouble < MIN_LONG_D || _numberDouble > MAX_LONG_D) { reportOverflowLong(); } _numberLong = (long) _numberDouble; } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { if (BD_MIN_LONG.compareTo(_numberBigDecimal) > 0 [CLASS] ParserBase [METHOD] convertNumberToLong [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5	921	921	8	add	
67	[BUG] [BUGGY] if ((_numTypesValid & NR_INT) == 0) { // wasn't an int natively? convertNumberToInt(); // let's make it so, if possible  } [FE] JsonParseException [CONTEXT] public int getIntValue() throws IOException { if ((_numTypesValid & NR_INT) == 0) { if (_numTypesValid == NR_UNKNOWN) { // not parsed at all return _parseIntValue(); } [BUGGY] if ((_numTypesValid & NR_INT) == 0) { // wasn't an int natively?    convertNumberToInt(); // let's make it so, if possible      } [BUGGY] convertNumberToInt(); // let's make it so, if possible } } return _numberInt; } [CLASS] ParserBase [METHOD] getIntValue [RETURN_TYPE] int  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	648	650	8	replace	
68	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] public int getIntValue() throws IOException { if ((_numTypesValid & NR_INT) == 0) { if (_numTypesValid == NR_UNKNOWN) { // not parsed at all return _parseIntValue(); } [BUGGY] [BUGGY] if ((_numTypesValid & NR_INT) == 0) { // wasn't an int natively?    convertNumberToInt(); // let's make it so, if possible      } convertNumberToInt(); // let's make it so, if possible } } return _numberInt; } [CLASS] ParserBase [METHOD] getIntValue [RETURN_TYPE] int  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	648	650	8	add	
69	[BUG] [BUGGY] convertNumberToInt(); // let's make it so, if possible } [FE] JsonParseException [CONTEXT] public int getIntValue() throws IOException { if ((_numTypesValid & NR_INT) == 0) { if (_numTypesValid == NR_UNKNOWN) { // not parsed at all return _parseIntValue(); } if ((_numTypesValid & NR_INT) == 0) { // wasn't an int natively? [BUGGY] convertNumberToInt(); // let's make it so, if possible   } [BUGGY] } } return _numberInt; } [CLASS] ParserBase [METHOD] getIntValue [RETURN_TYPE] int  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	649	650	8	replace	
70	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] public int getIntValue() throws IOException { if ((_numTypesValid & NR_INT) == 0) { if (_numTypesValid == NR_UNKNOWN) { // not parsed at all return _parseIntValue(); } if ((_numTypesValid & NR_INT) == 0) { // wasn't an int natively? [BUGGY] [BUGGY] convertNumberToInt(); // let's make it so, if possible   } } } return _numberInt; } [CLASS] ParserBase [METHOD] getIntValue [RETURN_TYPE] int  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen f features fractLen intLen mask newFeatureFlags newMask newState oldState values long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	649	650	8	add	
71	[BUG] [BUGGY] if ((_numTypesValid & NR_LONG) != 0) { [FE] JsonParseException [CONTEXT] {  [BUGGY] if ((_numTypesValid & NR_LONG) != 0) { [BUGGY]  int result = (int) _numberLong; if (((long) result) != _numberLong) { _reportError("Numeric value ("+getText()+") out of range of int"); } _numberInt = result; } else if ((_numTypesValid & NR_BIGINT) != 0) { if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { reportOverflowInt(); [CLASS] ParserBase [METHOD] convertNumberToInt [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	replace	
72	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] {  [BUGGY] [BUGGY] if ((_numTypesValid & NR_LONG) != 0) {  int result = (int) _numberLong; if (((long) result) != _numberLong) { _reportError("Numeric value ("+getText()+") out of range of int"); } _numberInt = result; } else if ((_numTypesValid & NR_BIGINT) != 0) { if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { reportOverflowInt(); [CLASS] ParserBase [METHOD] convertNumberToInt [RETURN_TYPE] void  [VARIABLES] double _numberDouble d value ByteArrayBuilder _byteArrayBuilder builder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow changed changedFeatures changes col expLen expType f features fractLen i intLen len mask newFeatureFlags newMask newState offset oldState result values long _currInputProcessed _numberLong _tokenInputTotal l BigDecimal _numberBigDecimal char[] _nameCopyBuffer buf JsonReadContext _parsingContext ctxt parent byte[] _binaryValue boolean _closed _nameCopied _numberNegative negative TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.4743416490252569	883	883	8	add	
73	[BUG] [BUGGY] protected ParserMinimalBase(int features) { super(features); } [FE] JsonParseException [CONTEXT] [BUGGY] protected ParserMinimalBase(int features) { super(features); } [BUGGY]  [CLASS] ParserMinimalBase [METHOD] <init> [RETURN_TYPE] ParserMinimalBase(int)  int features [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN features BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	160	160	8	replace	
74	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] [BUGGY] [BUGGY] protected ParserMinimalBase(int features) { super(features); } [CLASS] ParserMinimalBase [METHOD] <init> [RETURN_TYPE] ParserMinimalBase(int)  int features [VARIABLES] byte[] NO_BYTES boolean double MAX_INT_D MAX_LONG_D MIN_INT_D MIN_LONG_D char CHAR_NULL BigInteger BI_MAX_INT BI_MAX_LONG BI_MIN_INT BI_MIN_LONG int[] NO_INTS JsonToken _currToken _lastClearedToken int INT_0 INT_9 INT_APOS INT_ASTERISK INT_BACKSLASH INT_COLON INT_COMMA INT_CR INT_E INT_HASH INT_LBRACKET INT_LCURLY INT_LF INT_MINUS INT_PERIOD INT_PLUS INT_QUOTE INT_RBRACKET INT_RCURLY INT_SLASH INT_SPACE INT_TAB INT_e MAX_ERROR_TOKEN_LENGTH NR_BIGDECIMAL NR_BIGINT NR_DOUBLE NR_FLOAT NR_INT NR_LONG NR_UNKNOWN features BigDecimal BD_MAX_INT BD_MAX_LONG BD_MIN_INT BD_MIN_LONG long MAX_INT_L MIN_INT_L  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	160	160	8	add	
75	[BUG] [BUGGY] protected final static byte[] NO_BYTES = new byte[0]; [FE] JsonParseException [CONTEXT] [BUGGY] protected final static byte[] NO_BYTES = new byte[0]; [BUGGY]  [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	62	62	8	replace	
76	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] [BUGGY] [BUGGY] protected final static byte[] NO_BYTES = new byte[0]; [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	62	62	8	add	
77	[BUG] [BUGGY] protected final static int[] NO_INTS = new int[0]; [FE] JsonParseException [CONTEXT] [BUGGY] protected final static int[] NO_INTS = new int[0]; [BUGGY]  [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	67	67	8	replace	
78	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] [BUGGY] [BUGGY] protected final static int[] NO_INTS = new int[0]; [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	67	67	8	add	
79	[BUG] [BUGGY] protected final static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE); [FE] JsonParseException [CONTEXT] [BUGGY] protected final static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE); [BUGGY]  [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	97	97	8	replace	
80	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] [BUGGY] [BUGGY] protected final static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	97	97	8	add	
81	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	98	98	8	replace	
82	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	98	98	8	add	
83	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigInteger BI_MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	100	100	8	replace	
84	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigInteger BI_MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	100	100	8	add	
85	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigInteger BI_MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	101	101	8	replace	
86	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigInteger BI_MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	101	101	8	add	
87	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigInteger BI_MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	103	103	8	replace	
88	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigInteger BI_MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	103	103	8	add	
89	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigDecimal BD_MIN_LONG = new BigDecimal(BI_MIN_LONG); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	104	104	8	replace	
90	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigDecimal BD_MIN_LONG = new BigDecimal(BI_MIN_LONG); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	104	104	8	add	
91	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigDecimal BD_MAX_LONG = new BigDecimal(BI_MAX_LONG); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	106	106	8	replace	
92	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigDecimal BD_MAX_LONG = new BigDecimal(BI_MAX_LONG); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	106	106	8	add	
93	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigDecimal BD_MIN_INT = new BigDecimal(BI_MIN_INT); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	107	107	8	replace	
94	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected final static BigDecimal BD_MIN_INT = new BigDecimal(BI_MIN_INT); [CLASS] ParserMinimalBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java	0.46499055497527714	107	107	8	add	
95	[BUG] [BUGGY] super(features); [FE] JsonParseException [CONTEXT] protected ParserBase(IOContext ctxt, int features) { [BUGGY] super(features); [BUGGY] _ioContext = ctxt; _textBuffer = ctxt.constructTextBuffer(); DupDetector dups = Feature.STRICT_DUPLICATE_DETECTION.enabledIn(features) ? DupDetector.rootDetector(this) : null; _parsingContext = JsonReadContext.createRootContext(dups); } [CLASS] ParserBase [METHOD] <init> [RETURN_TYPE] IOContext,int)  IOContext ctxt int features [VARIABLES] double _numberDouble ByteArrayBuilder _byteArrayBuilder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow features long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer JsonReadContext _parsingContext byte[] _binaryValue boolean _closed _nameCopied _numberNegative DupDetector dups TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.46499055497527714	233	233	8	replace	
96	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] protected ParserBase(IOContext ctxt, int features) { [BUGGY] [BUGGY] super(features); _ioContext = ctxt; _textBuffer = ctxt.constructTextBuffer(); DupDetector dups = Feature.STRICT_DUPLICATE_DETECTION.enabledIn(features) ? DupDetector.rootDetector(this) : null; _parsingContext = JsonReadContext.createRootContext(dups); } [CLASS] ParserBase [METHOD] <init> [RETURN_TYPE] IOContext,int)  IOContext ctxt int features [VARIABLES] double _numberDouble ByteArrayBuilder _byteArrayBuilder int _currInputRow _currInputRowStart _expLength _fractLength _inputEnd _inputPtr _intLength _numTypesValid _numberInt _tokenInputCol _tokenInputRow features long _currInputProcessed _numberLong _tokenInputTotal BigDecimal _numberBigDecimal char[] _nameCopyBuffer JsonReadContext _parsingContext byte[] _binaryValue boolean _closed _nameCopied _numberNegative DupDetector dups TextBuffer _textBuffer IOContext _ioContext ctxt BigInteger _numberBigInt JsonToken _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.46499055497527714	233	233	8	add	
97	[BUG] [BUGGY] protected int _currInputRow = 1; [FE] JsonParseException [CONTEXT] [BUGGY] protected int _currInputRow = 1; [BUGGY]  [CLASS] ParserBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.46499055497527714	78	78	8	replace	
98	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] [BUGGY] [BUGGY] protected int _currInputRow = 1; [CLASS] ParserBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.46499055497527714	78	78	8	add	
99	[BUG] [BUGGY] protected int _tokenInputRow = 1; [FE] JsonParseException [CONTEXT] [BUGGY] protected int _tokenInputRow = 1; [BUGGY]  [CLASS] ParserBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.46499055497527714	107	107	8	replace	
100	[BUG] [BUGGY] [FE] JsonParseException [CONTEXT] [BUGGY] [BUGGY] protected int _tokenInputRow = 1; [CLASS] ParserBase  [VARIABLES] 	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.46499055497527714	107	107	8	add	
