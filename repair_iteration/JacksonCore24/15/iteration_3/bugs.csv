bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  long)_numTypesValid)!=  0)  {  reportOverflowLong();  [CE]  not  a  statement  [FE]                  JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  long)_numTypesValid)!=  0)  {  reportOverflowLong();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)!=  0)  {  reportOverflowLong();	  ((    long)_numTypesValid)!=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	2	None	replace
2	[BUG]  [BUGGY]  ((  long)_numTypesValid)  >=  0)  {  reportOverflowLong();  [CE]  not  a  statement  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  long)_numTypesValid)  >=  0)  {  reportOverflowLong();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)  >=  0)  {  reportOverflowLong();	  ((    long)_numTypesValid)!=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	2	None	replace
3	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	18	8	replace
4	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	18	8	replace
5	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)/  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)/  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)-    1);    	compilable	  [FE]  JsonParseException  	43	8	replace
6	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)/  1);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)/  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)/  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)-    1);    	compilable	  [FE]  JsonParseException  	43	8	replace
7	[BUG]  [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [CE]  possible  loss  of  precision  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG)-  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)-    1);    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
8	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [CE]  possible  loss  of  precision  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG)-  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)-    1);    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
9	[BUG]  [BUGGY]  String  result  =(String)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  inconvertible  types  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  String  result  =(String)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	String  result  =(String)Math.rint((  long)_numTypesValid  &  NR_LONG);	  char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  inconvertible  types	28	None	replace
10	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	char  result  =(char)Math.rint((  int)_numTypesValid  &  NR_LONG);	  char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	28	8	replace
11	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  int)_numTypesValid  &  NR_LONG);  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char  result  =(char)Math.rint((  int)_numTypesValid  &  NR_LONG);	  char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	28	8	replace
12	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  *  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	char  result  =(char)Math.rint((  long)_numTypesValid  *  NR_LONG);	  char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	28	8	replace
13	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  *  NR_LONG);  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  *  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char  result  =(char)Math.rint((  long)_numTypesValid  *  NR_LONG);	  char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	28	8	replace
14	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  -  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	char  result  =(char)Math.rint((  long)_numTypesValid  -  NR_LONG);	  char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	28	8	replace
15	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  -  NR_LONG);  [FE]  JsonParseException  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  -  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char  result  =(char)Math.rint((  long)_numTypesValid  -  NR_LONG);	  char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	28	8	replace
16	[BUG]  [BUGGY]  ((  int)_numTypesValid)  >=  0)  {  reportOverflowInt();  [CE]  not  a  statement  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  int)_numTypesValid)  >=  0)  {  reportOverflowInt();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  int)_numTypesValid)  >=  0)  {  reportOverflowInt();	  ((    long)_numTypesValid)    >=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	3	None	replace
17	[BUG]  [BUGGY]  double  result  =(double)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  possible  loss  of  precision  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  double  result  =(double)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	double  result  =(double)Math.rint((  long)_numTypesValid  &  NR_LONG);	  float    result    =(float)Math.rint((    long)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
18	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  int)_numTypesValid  &  NR_LONG);  [CE]  possible  loss  of  precision  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  int)_numTypesValid  &  NR_LONG);	  float    result    =(float)Math.rint((    long)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
19	[BUG]  [BUGGY]  long  result  =(long)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  possible  loss  of  precision  [FE]                  JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(long)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)Math.rint((  long)_numTypesValid  &  NR_LONG);	  float    result    =(float)Math.rint((    long)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
20	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  byte  result  =(byte)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	byte  result  =(byte)Math.rint((  long)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    byte    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	21	8	replace
21	[BUG]  [BUGGY]  byte  result  =(byte)Math.rint((  long)_numTypesValid  &  NR_LONG);  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  byte  result  =(byte)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	byte  result  =(byte)Math.rint((  long)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    byte    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	21	8	replace
22	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  short  result  =(short)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	short  result  =(short)Math.rint((  long)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    byte    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	21	8	replace
23	[BUG]  [BUGGY]  short  result  =(short)Math.rint((  long)_numTypesValid  &  NR_LONG);  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  short  result  =(short)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	short  result  =(short)Math.rint((  long)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    byte    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	21	8	replace
24	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	27	None	add
25	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  String  result  =(String)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  String  result  =(String)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    String  result  =(String)Math.rint((  long)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	27	None	add
26	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  Char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  cannot  find  symbol  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  Char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    Char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
27	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  Character(Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  ')'  expected  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  Character(Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    Character(Math.rint((  long)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  ')'  expected	27	None	add
28	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(NR_LONG);  [CE]  method  createChildArrayContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext(NR_LONG);	  _parsingContext    =    _parsingContext.createChildArrayContext();    	non-compiled	[CE]  method  createChildArrayContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;	49	None	replace
29	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(null);  [CE]  method  createChildArrayContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(null);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext(null);	  _parsingContext    =    _parsingContext.createChildArrayContext();    	non-compiled	[CE]  method  createChildArrayContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;	49	None	replace
30	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1);    int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	15	None	add
31	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1);    Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	15	None	add
32	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  byte  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  byte  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1);    byte  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	15	None	add
33	[BUG]  [BUGGY]  _parsingContext.setCurrentName(NR_LONG,  _numTypesValid);  [CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext.setCurrentName(NR_LONG,  _numTypesValid);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext.setCurrentName(NR_LONG,  _numTypesValid);	  _parsingContext.setCurrentName(_numTypesValid);    	non-compiled	[CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;	35	None	replace
34	[BUG]  [BUGGY]  _parsingContext.setCurrentName(NR_LONG);  [CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext.setCurrentName(NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext.setCurrentName(NR_LONG);	  _parsingContext.setCurrentName(_numTypesValid);    	non-compiled	[CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;	35	None	replace
35	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numTypesValid,  NR_LONG);  [CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext.setCurrentName(_numTypesValid,  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext.setCurrentName(_numTypesValid,  NR_LONG);	  _parsingContext.setCurrentName(_numTypesValid);    	non-compiled	[CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;	35	None	replace
36	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)/  1));  [CE]  ';'  expected  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)/  1));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)/  1));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1));    	non-compiled	[CE]  ';'  expected	45	None	replace
37	[BUG]  [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG)+  1));  [CE]  ';'  expected  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG)+  1));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG)+  1));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1));    	non-compiled	[CE]  ';'  expected	45	None	replace
38	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  2));  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  2));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  2));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1));    	non-compiled	[CE]  ';'  expected	45	None	replace
39	[BUG]  [BUGGY]  double  result  =(double)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  possible  loss  of  precision  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  double  result  =(double)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	double  result  =(double)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    float    result    =(float)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
40	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(float)Math.rint((  _numTypesValid  [CE]  ')'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(float)Math.rint((  _numTypesValid  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(float)Math.rint((  _numTypesValid	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  ')'  expected	12	None	replace
41	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(float)Math.rint((  _numTypesVal  [CE]  ')'  expected  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(float)Math.rint((  _numTypesVal  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(float)Math.rint((  _numTypesVal	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  ')'  expected	12	None	replace
42	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(float)Math.rint((  _numTypesValid  &  [CE]  illegal  start  of  expression  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(float)Math.rint((  _numTypesValid  &  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(float)Math.rint((  _numTypesValid  &	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
43	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  *  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  int)_numTypesValid  *  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    *    NR_LONG);    	compilable	  [FE]  JsonParseException  	30	8	replace
44	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  *  NR_LONG);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  *  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  int)_numTypesValid  *  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    *    NR_LONG);    	compilable	  [FE]  JsonParseException  	30	8	replace
45	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  long)_numTypesValid  *  NR_LONG);  [CE]  possible  loss  of  precision  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  long)_numTypesValid  *  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  long)_numTypesValid  *  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    *    NR_LONG);    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
46	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  /  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  long)_numTypesValid  /  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    *    NR_LONG);    	compilable	  [FE]  JsonParseException  	30	8	replace
47	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  /  NR_LONG);  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  /  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  /  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    *    NR_LONG);    	compilable	  [FE]  JsonParseException  	30	8	replace
48	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    Integer    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	19	8	replace
49	[BUG]  [BUGGY]  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    Integer    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	19	8	replace
50	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);  Integer  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);  Integer  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);  Integer  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    Integer    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	19	None	replace
51	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    Integer    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	19	None	replace
52	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(null);  [CE]  method  createChildObjectContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(null);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(null);	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  method  createChildObjectContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;	32	None	replace
53	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(NR_LONG);  [CE]  method  createChildObjectContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(NR_LONG);	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  method  createChildObjectContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;	32	None	replace
54	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(false);  [CE]  method  createChildObjectContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(false);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(false);	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  method  createChildObjectContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;	32	None	replace
55	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	25	None	add
56	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  Integer  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  Integer  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    Integer  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	25	None	add
57	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  }  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	25	None	add
58	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  byte  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  byte  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    byte  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	25	None	add
59	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)-    1);    int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	42	None	add
60	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)-    1);    Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	42	None	add
61	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  byte  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  byte  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)-    1);    byte  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	42	None	add
62	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	36	None	add
63	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    Integer  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	36	None	add
64	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid!=  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid!=  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  }  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    if(_numTypesValid!=  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	36	None	add
65	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  }  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	36	None	add
66	[BUG]  [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext(-1,  -1);  [CE]  cannot  find  symbol  ctxt  [FE]                  JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  ctxt.createChildObjectContext(-1,  -1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  ctxt.createChildObjectContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  cannot  find  symbol  ctxt	33	None	replace
67	[BUG]  [BUGGY]  _parsingContext  =  parent.createChildObjectContext(-1,  -1);  [CE]  cannot  find  symbol  parent  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  parent.createChildObjectContext(-1,  -1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  parent.createChildObjectContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildObjectContext(-1,    -1);    	non-compiled	[CE]  cannot  find  symbol  parent	33	None	replace
68	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)/  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)/  1;	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    	compilable	  [FE]  JsonParseException  	48	8	replace
69	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)/  1;  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)/  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)/  1;	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    	compilable	  [FE]  JsonParseException  	48	8	replace
70	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [CE]  possible  loss  of  precision  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
71	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  byte)_numTypesValid  &  NR_LONG)+  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  byte)_numTypesValid  &  NR_LONG)+  1;	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    	compilable	  [FE]  JsonParseException  	48	8	replace
72	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  byte)_numTypesValid  &  NR_LONG)+  1;  [FE]  JsonParseException  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  byte)_numTypesValid  &  NR_LONG)+  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  byte)_numTypesValid  &  NR_LONG)+  1;	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    	compilable	  [FE]  JsonParseException  	48	8	replace
73	[BUG]  [BUGGY]  int  result  =(int)_numberLong;  char  result  =(int)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)_numberLong;  char  result  =(int)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)_numberLong;  char  result  =(int)_numberLong;	  short    result    =(short)_numberLong;    char    result    =(char)_numberLong;    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	44	None	replace
74	[BUG]  [BUGGY]  int  result  =(int)_numberLong;  String  result  =(int)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)_numberLong;  String  result  =(int)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)_numberLong;  String  result  =(int)_numberLong;	  short    result    =(short)_numberLong;    char    result    =(char)_numberLong;    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	44	None	replace
75	[BUG]  [BUGGY]  _parsingContext  =  ctxt.getParent();  [CE]  cannot  find  symbol  ctxt  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  ctxt.getParent();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  ctxt.getParent();	  _parsingContext    =    _parsingContext.getParent();    	non-compiled	[CE]  cannot  find  symbol  ctxt	34	None	replace
76	[BUG]  [BUGGY]  _parsingContext  =  parent.getParent();  [CE]  cannot  find  symbol  parent  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  parent.getParent();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  parent.getParent();	  _parsingContext    =    _parsingContext.getParent();    	non-compiled	[CE]  cannot  find  symbol  parent	34	None	replace
77	[BUG]  [BUGGY]  _parsingContext  =  context.getParent();  [CE]  cannot  find  symbol  context  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  context.getParent();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  context.getParent();	  _parsingContext    =    _parsingContext.getParent();    	non-compiled	[CE]  cannot  find  symbol  context	34	None	replace
78	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	47	None	add
79	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	47	None	add
80	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  }  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	47	None	add
81	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  byte  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  byte  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    byte  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	47	None	add
82	[BUG]  [BUGGY]  ((  long)_numTypesValid)!=  NR_LONG.intValue();  [CE]  not  a  statement  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  long)_numTypesValid)!=  NR_LONG.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)!=  NR_LONG.intValue();	  ((    long)_numTypesValid)!=    _numberLong.intValue();    	non-compiled	[CE]  not  a  statement	4	None	replace
83	[BUG]  [BUGGY]  ((  long)_numTypesValid)  >=  NR_LONG.intValue();  [CE]  not  a  statement  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  long)_numTypesValid)  >=  NR_LONG.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)  >=  NR_LONG.intValue();	  ((    long)_numTypesValid)!=    _numberLong.intValue();    	non-compiled	[CE]  not  a  statement	4	None	replace
84	[BUG]  [BUGGY]  ((  long)_numTypesValid)  >>  NR_LONG.intValue();  [CE]  not  a  statement  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  long)_numTypesValid)  >>  NR_LONG.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)  >>  NR_LONG.intValue();	  ((    long)_numTypesValid)!=    _numberLong.intValue();    	non-compiled	[CE]  not  a  statement	4	None	replace
85	[BUG]  [BUGGY]  ((  long)_numTypesValid)  ==  NR_LONG.intValue();  [CE]  not  a  statement  [FE]                            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  long)_numTypesValid)  ==  NR_LONG.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)  ==  NR_LONG.intValue();	  ((    long)_numTypesValid)!=    _numberLong.intValue();    	non-compiled	[CE]  not  a  statement	4	None	replace
86	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    char    result    =(char)Math.rint((    _numTypesValid    &    NR_LONG));    	compilable	  [FE]  JsonParseException  	38	8	replace
87	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG));  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    char    result    =(char)Math.rint((    _numTypesValid    &    NR_LONG));    	compilable	  [FE]  JsonParseException  	38	8	replace
88	[BUG]  [BUGGY]  String  result  =(String)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  inconvertible  types  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  String  result  =(String)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	String  result  =(String)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    char    result    =(char)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  inconvertible  types	38	None	replace
89	[BUG]  [BUGGY]  Integer  result  =(Integer)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  inconvertible  types  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(Integer)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(Integer)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    char    result    =(char)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  inconvertible  types	38	None	replace
90	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  +  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	char  result  =(char)Math.rint((  long)_numTypesValid  +  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    	compilable	  [FE]  JsonParseException  	37	8	replace
91	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  +  NR_LONG);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  +  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char  result  =(char)Math.rint((  long)_numTypesValid  +  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    	compilable	  [FE]  JsonParseException  	37	8	replace
92	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  +  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  int)_numTypesValid  +  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    	compilable	  [FE]  JsonParseException  	37	8	replace
93	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  +  NR_LONG);  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  +  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  int)_numTypesValid  +  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    	compilable	  [FE]  JsonParseException  	37	8	replace
94	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  long)_numTypesValid  +  NR_LONG);  [CE]  possible  loss  of  precision  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  long)_numTypesValid  +  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  long)_numTypesValid  +  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
95	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  char)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	char  result  =(char)Math.rint((  char)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	26	8	replace
96	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  char)_numTypesValid  &  NR_LONG);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  char)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char  result  =(char)Math.rint((  char)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	26	8	replace
97	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  -  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  int)_numTypesValid  -  NR_LONG);	  int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	26	8	replace
98	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  -  NR_LONG);  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  -  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  int)_numTypesValid  -  NR_LONG);	  int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	26	8	replace
99	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  byte  result  =(byte)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	byte  result  =(byte)_numberLong;	  short    result    =(int)_numberLong;    	compilable	  [FE]  JsonParseException  	14	8	replace
100	[BUG]  [BUGGY]  byte  result  =(byte)_numberLong;  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  byte  result  =(byte)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	byte  result  =(byte)_numberLong;	  short    result    =(int)_numberLong;    	compilable	  [FE]  JsonParseException  	14	8	replace
101	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    Integer    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	11	None	replace
102	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    Integer    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	compilable	  [FE]  JsonParseException  	11	8	replace
103	[BUG]  [BUGGY]  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  [FE]  JsonParseException  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    Integer    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	compilable	  [FE]  JsonParseException  	11	8	replace
104	[BUG]  [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    Integer    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	11	None	replace
105	[BUG]  [BUGGY]  Integer  result  =(Integer)_numberLong.intValue();  [CE]  long  cannot  be  dereferenced  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(Integer)_numberLong.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(Integer)_numberLong.intValue();	  Integer    result    =(Integer)_numberLong;    	non-compiled	[CE]  long  cannot  be  dereferenced	24	None	replace
106	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(int)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	Integer  result  =(int)_numberLong;	  Integer    result    =(Integer)_numberLong;    	compilable	  [FE]  JsonParseException  	24	8	replace
107	[BUG]  [BUGGY]  Integer  result  =(int)_numberLong;  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(int)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(int)_numberLong;	  Integer    result    =(Integer)_numberLong;    	compilable	  [FE]  JsonParseException  	24	8	replace
108	[BUG]  [BUGGY]  Integer  result  =(Integer)_numberTypesValid;  [CE]  cannot  find  symbol  _numberTypesValid  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(Integer)_numberTypesValid;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(Integer)_numberTypesValid;	  Integer    result    =(Integer)_numberLong;    	non-compiled	[CE]  cannot  find  symbol  _numberTypesValid	24	None	replace
109	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(float)Math.rint((  _numTypesValid  [CE]  ')'  expected  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(float)Math.rint((  _numTypesValid  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(float)Math.rint((  _numTypesValid	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_UNKNOWN)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  ')'  expected	50	None	replace
110	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(float)Math.rint((  _numTypesVal  [CE]  ')'  expected  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(float)Math.rint((  _numTypesVal  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(float)Math.rint((  _numTypesVal	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_UNKNOWN)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  ')'  expected	50	None	replace
111	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint(  [CE]  illegal  start  of  expression  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint(  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint(	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_UNKNOWN)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
112	[BUG]  [BUGGY]  int  result  =  _numberLong.intValue();  [CE]  long  cannot  be  dereferenced  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =  _numberLong.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =  _numberLong.intValue();	  int    result    =    _numberInt.intValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	1	None	replace
113	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =  _numberBigInt.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =  _numberBigInt.intValue();	  int    result    =    _numberInt.intValue();    	compilable	  [FE]  JsonParseException  	1	9	replace
114	[BUG]  [BUGGY]  int  result  =  _numberBigInt.intValue();  [FE]  JsonParseException  [FE]                  JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =  _numberBigInt.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =  _numberBigInt.intValue();	  int    result    =    _numberInt.intValue();    	compilable	  [FE]  JsonParseException  	1	9	replace
115	[BUG]  [BUGGY]  int  result  =  _numberInt.intValue()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =  _numberInt.intValue()  +  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =  _numberInt.intValue()  +  1;	  int    result    =    _numberInt.intValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
116	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  byte  result  =(byte)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	byte  result  =(byte)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    byte    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	compilable	  [FE]  JsonParseException  	13	8	replace
117	[BUG]  [BUGGY]  byte  result  =(byte)Math.rint((  _numTypesValid  &  NR_LONG));  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  byte  result  =(byte)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	byte  result  =(byte)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    byte    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	compilable	  [FE]  JsonParseException  	13	8	replace
118	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  2);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  2);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1);    	compilable	  [FE]  JsonParseException  	16	8	replace
119	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  2);  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  2);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  2);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1);    	compilable	  [FE]  JsonParseException  	16	8	replace
120	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    *    NR_LONG);    int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	29	None	add
121	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    *    NR_LONG);    Integer  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	29	None	add
122	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  if(_numTypesValid!=  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  if(_numTypesValid!=  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  }  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    *    NR_LONG);    if(_numTypesValid!=  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	29	None	add
123	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  }  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    *    NR_LONG);    if(_numTypesValid  ==  NR_LONG)  {  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	29	None	add
124	[BUG]  [BUGGY]  int  result  =(int)_numberLong;  Short  result  =(int)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)_numberLong;  Short  result  =(int)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)_numberLong;  Short  result  =(int)_numberLong;	  short    result    =(short)_numberLong;    Short    result    =(short)_numberLong;    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	6	None	replace
125	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  byte  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  byte  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    *    NR_LONG);    byte  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	29	None	add
126	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  char  result  =(char)Math.rint((  long)_numTypesValid  *  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  *  NR_LONG);  char  result  =(char)Math.rint((  long)_numTypesValid  *  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    *    NR_LONG);    char  result  =(char)Math.rint((  long)_numTypesValid  *  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	29	None	add
127	[BUG]  [BUGGY]  long  result  =(long)_numberLong;  int  result  =(long)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(long)_numberLong;  int  result  =(long)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)_numberLong;  int  result  =(long)_numberLong;	  short    result    =(short)_numberLong;    int    result    =(int)_numberLong;    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	9	None	replace
128	[BUG]  [BUGGY]  _parsingContext.setCurrentName(NR_LBRACKET,  _numTypesValid);  [CE]  cannot  find  symbol  NR_LBRACKET  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext.setCurrentName(NR_LBRACKET,  _numTypesValid);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext.setCurrentName(NR_LBRACKET,  _numTypesValid);	  _parsingContext.setCurrentName(_numTypesValid);    	non-compiled	[CE]  cannot  find  symbol  NR_LBRACKET	35	None	replace
129	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  long)_  [CE]  ')'  expected  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  long)_  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  long)_	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    if(_numTypesValid    ==    NR_UNKNOWN)    {    int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
130	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  long)_  [CE]  ')'  expected  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  long)_  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  long)_	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    if(_numTypesValid    ==    NR_UNKNOWN)    {    int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
131	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [CE]  cannot  find  symbol  result  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext(-1,  -1);	  _parsingContext    =    _parsingContext.createChildArrayContext();    	non-compiled	[CE]  cannot  find  symbol  result	49	None	replace
132	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1);  [CE]  method  createChildArrayContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                  JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  _parsingContext.createChildArrayContext(-1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.createChildArrayContext(-1);	  _parsingContext    =    _parsingContext.createChildArrayContext();    	non-compiled	[CE]  method  createChildArrayContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;	49	None	replace
133	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _num  [CE]  ')'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _num  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _num	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  ')'  expected	12	None	replace
134	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _numTypesVal  [CE]  ')'  expected  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _numTypesVal  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _numTypesVal	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  ')'  expected	12	None	replace
135	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _numType  [CE]  ')'  expected  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _numType  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _numType	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  ')'  expected	12	None	replace
136	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  Character.char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  <identifier>  expected  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  Character.char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    Character.char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  <identifier>  expected	27	None	add
137	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  String  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  String  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    String  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	27	None	add
138	[BUG]  [BUGGY]  int  result  =(int)_numberLong;  long  result  =(int)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)_numberLong;  long  result  =(int)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)_numberLong;  long  result  =(int)_numberLong;	  short    result    =(short)_numberLong;    long    result    =(short)_numberLong;    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	7	None	replace
139	[BUG]  [BUGGY]  int  result  =(int)_numberLong;  int  result  =(int)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)_numberLong;  int  result  =(int)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)_numberLong;  int  result  =(int)_numberLong;	  short    result    =(short)_numberLong;    long    result    =(short)_numberLong;    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	7	None	replace
140	[BUG]  [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  int  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  int  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  int  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	10	None	replace
141	[BUG]  [BUGGY]  Integer  result  =(Integer)_numberLong.clone();  [CE]  long  cannot  be  dereferenced  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(Integer)_numberLong.clone();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(Integer)_numberLong.clone();	  Integer    result    =(Integer)_numberLong;    	non-compiled	[CE]  long  cannot  be  dereferenced	24	None	replace
142	[BUG]  [BUGGY]  Integer  result  =(Integer)_numberLong  +  1;  [CE]  inconvertible  types  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(Integer)_numberLong  +  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(Integer)_numberLong  +  1;	  Integer    result    =(Integer)_numberLong;    	non-compiled	[CE]  inconvertible  types	24	None	replace
143	[BUG]  [BUGGY]  Integer  result  =(Integer)_numberLong.cloneTree();  [CE]  long  cannot  be  dereferenced  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(Integer)_numberLong.cloneTree();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(Integer)_numberLong.cloneTree();	  Integer    result    =(Integer)_numberLong;    	non-compiled	[CE]  long  cannot  be  dereferenced	24	None	replace
144	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  short)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	char  result  =(char)Math.rint((  short)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	40	8	replace
145	[BUG]  [BUGGY]  char  result  =(char)Math.rint((  short)_numTypesValid  &  NR_LONG);  [FE]  JsonParseException  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  char  result  =(char)Math.rint((  short)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	char  result  =(char)Math.rint((  short)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    char    result    =(char)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	40	8	replace
146	[BUG]  [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  byte  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  byte  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  byte  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    byte    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	13	None	replace
147	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)-    1);    char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG)-  1);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	42	None	add
148	[BUG]  [BUGGY]  Long  result  =(Long)_numberLong;  [CE]  incompatible  types  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Long  result  =(Long)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Long  result  =(Long)_numberLong;	  short    result    =(int)_numberLong;    	non-compiled	[CE]  incompatible  types	14	None	replace
149	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  byte  result  =(byte)Math.rint((  short)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	byte  result  =(byte)Math.rint((  short)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    byte    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	21	8	replace
150	[BUG]  [BUGGY]  byte  result  =(byte)Math.rint((  short)_numTypesValid  &  NR_LONG);  [FE]  JsonParseException  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  byte  result  =(byte)Math.rint((  short)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	byte  result  =(byte)Math.rint((  short)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    byte    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	21	8	replace
151	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  byte  result  =(byte)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	byte  result  =(byte)Math.rint((  int)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    byte    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	21	8	replace
152	[BUG]  [BUGGY]  byte  result  =(byte)Math.rint((  int)_numTypesValid  &  NR_LONG);  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  byte  result  =(byte)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	byte  result  =(byte)Math.rint((  int)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    byte    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	21	8	replace
153	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  char  result  =(char)Math.rint((  int)_numTypesValid  &  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  char  result  =(char)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    char  result  =(char)Math.rint((  int)_numTypesValid  &  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	25	None	add
154	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =  _numberBigDecimal.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =  _numberBigDecimal.intValue();	  int    result    =    _numberInt.intValue();    	compilable	  [FE]  JsonParseException  	1	9	replace
155	[BUG]  [BUGGY]  int  result  =  _numberBigDecimal.intValue();  [FE]  JsonParseException  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =  _numberBigDecimal.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =  _numberBigDecimal.intValue();	  int    result    =    _numberInt.intValue();    	compilable	  [FE]  JsonParseException  	1	9	replace
156	[BUG]  [BUGGY]  double  result  =(double)_numberLong  +  1;  [CE]  possible  loss  of  precision  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  double  result  =(double)_numberLong  +  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	double  result  =(double)_numberLong  +  1;	  double    result    =    (double)_numberLong;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
157	[BUG]  [BUGGY]  double  result  =(double)_numberLong.doubleValue();  [CE]  long  cannot  be  dereferenced  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  double  result  =(double)_numberLong.doubleValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	double  result  =(double)_numberLong.doubleValue();	  double    result    =    (double)_numberLong;    	non-compiled	[CE]  long  cannot  be  dereferenced	22	None	replace
158	[BUG]  [BUGGY]  Integer  result  =(Integer)Math.rint((  _numTypesValid  &  NR_LONG));  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  inconvertible  types  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(Integer)Math.rint((  _numTypesValid  &  NR_LONG));  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(Integer)Math.rint((  _numTypesValid  &  NR_LONG));  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    char    result    =(char)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  inconvertible  types	38	None	replace
159	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG)+  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    char    result    =(char)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	38	None	replace
160	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1);    char  result  =(char)Math.rint((  _numTypesValid  &  NR_LONG)+  1);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	15	None	add
161	[BUG]  [BUGGY]  ((  long)_numTypesValid)!=  NR_LBIGINT.intValue();  [CE]  not  a  statement  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  long)_numTypesValid)!=  NR_LBIGINT.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)!=  NR_LBIGINT.intValue();	  ((    long)_numTypesValid)!=    _numberLong.intValue();    	non-compiled	[CE]  not  a  statement	4	None	replace
162	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  if(_numTypesValid!=  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  if(_numTypesValid!=  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  }  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    if(_numTypesValid!=  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	47	None	add
163	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    char  result  =(char)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	47	None	add
164	[BUG]  [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG));  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    float    result    =(float)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	39	None	replace
165	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    float    result    =(float)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	39	None	replace
166	[BUG]  [BUGGY]  ((  int)_numTypesValid)!=  0)  {  reportOverflowInt();  [CE]  not  a  statement  [FE]                  JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  int)_numTypesValid)!=  0)  {  reportOverflowInt();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  int)_numTypesValid)!=  0)  {  reportOverflowInt();	  ((    long)_numTypesValid)!=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	2	None	replace
167	[BUG]  [BUGGY]  ((  long)_numTypesValid)!=  0)  {  reportOverflowInt();  }  [CE]  not  a  statement  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  long)_numTypesValid)!=  0)  {  reportOverflowInt();  }  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)!=  0)  {  reportOverflowInt();  }	  ((    long)_numTypesValid)!=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	2	None	replace
168	[BUG]  [BUGGY]  int  result  =  (float)_numberLong;  [CE]  possible  loss  of  precision  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =  (float)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =  (float)_numberLong;	  long    result    =    (float)_numberLong;    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
169	[BUG]  [BUGGY]  long  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);  [CE]  possible  loss  of  precision  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(float)Math.rint((  long)_numTypesValid  &  NR_LONG);	  float    result    =(float)Math.rint((    long)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
170	[BUG]  [BUGGY]  double  result  =(double)Math.rint((  int)_numTypesValid  &  NR_LONG);  [CE]  possible  loss  of  precision  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  double  result  =(double)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	double  result  =(double)Math.rint((  int)_numTypesValid  &  NR_LONG);	  float    result    =(float)Math.rint((    long)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
171	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [CE]  possible  loss  of  precision  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  _numTypesValid  &  NR_LONG)+  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
172	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  byte  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  byte  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    byte  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	36	None	add
173	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  char  result  =(char)Math.rint((  long)_numTypesValid  +  NR_LONG);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  char  result  =(char)Math.rint((  long)_numTypesValid  +  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    char  result  =(char)Math.rint((  long)_numTypesValid  +  NR_LONG);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	36	None	add
174	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numTypesVal  [CE]  ')'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numTypesVal  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numTypesVal	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
175	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_num  [CE]  ')'  expected  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_num  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_num	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
176	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numTypesValid  [CE]  ')'  expected  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numTypesValid  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numTypesValid	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
177	[BUG]  [BUGGY]  long  result  =(long)_numberLong;  Short  result  =(long)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(long)_numberLong;  Short  result  =(long)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)_numberLong;  Short  result  =(long)_numberLong;	  short    result    =(short)_numberLong;    Short    result    =(short)_numberLong;    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	6	None	replace
178	[BUG]  [BUGGY]  short  result  =(int)_numberLong;  Short  result  =(int)_numberLong;  [CE]  possible  loss  of  precision  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  short  result  =(int)_numberLong;  Short  result  =(int)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	short  result  =(int)_numberLong;  Short  result  =(int)_numberLong;	  short    result    =(short)_numberLong;    Short    result    =(short)_numberLong;    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
179	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG)+  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG)+  1;	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    	compilable	  [FE]  JsonParseException  	48	8	replace
180	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG)+  1;  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG)+  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG)+  1;	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    	compilable	  [FE]  JsonParseException  	48	8	replace
181	[BUG]  [BUGGY]  float  result  =(float)Math.rint((  float)_numTypesValid  &  NR_LONG);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  float  result  =(float)Math.rint((  float)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	float  result  =(float)Math.rint((  float)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	26	None	replace
182	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG)+  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG)+  1;	  int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	26	8	replace
183	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG)+  1;  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG)+  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG)+  1;	  int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	26	8	replace
184	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  4));  [CE]  ';'  expected  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  4));  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  4));	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1));    	non-compiled	[CE]  ';'  expected	45	None	replace
185	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  3);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  3);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1));    	compilable	  [FE]  JsonParseException  	45	8	replace
186	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  3);  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  3);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  3);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1));    	compilable	  [FE]  JsonParseException  	45	8	replace
187	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    Integer    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	11	None	replace
188	[BUG]  [BUGGY]  ((  long)_numTypesValid)  >=  0)  {  reportOverflowInt();  }  [CE]  not  a  statement  [FE]                    JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  long)_numTypesValid)  >=  0)  {  reportOverflowInt();  }  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)_numTypesValid)  >=  0)  {  reportOverflowInt();  }	  ((    long)_numTypesValid)    >=    0)    {    reportOverflowInt();    	non-compiled	[CE]  not  a  statement	3	None	replace
189	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG  [CE]  ')'  expected  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    Integer    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  ')'  expected	19	None	replace
190	[BUG]  [BUGGY]  long  result  =(long)_numberLong;  char  result  =(long)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(long)_numberLong;  char  result  =(long)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)_numberLong;  char  result  =(long)_numberLong;	  short    result    =(short)_numberLong;    char    result    =(char)_numberLong;    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	44	None	replace
191	[BUG]  [BUGGY]  int  result  =(int)_numberLong;  char  result  =(char)_numberLong;  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)_numberLong;  char  result  =(char)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)_numberLong;  char  result  =(char)_numberLong;	  short    result    =(short)_numberLong;    char    result    =(char)_numberLong;    	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	44	None	replace
192	[BUG]  [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1);  [CE]  method  createChildObjectContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext  =  _parsingContext.createChildObjectContext(-1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext  =  _parsingContext.createChildObjectContext(-1);	  _parsingContext    =    _parsingContext.createChildObjectContext();    	non-compiled	[CE]  method  createChildObjectContext  in  class  JsonReadContext  cannot  be  applied  to  given  types;	32	None	replace
193	[BUG]  [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [CE]  possible  loss  of  precision  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG)+  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	long  result  =(long)Math.rint((  _numTypesValid  &  NR_LONG)+  1);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
194	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG)-  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG)-  1;	  int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	26	8	replace
195	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG)-  1;  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG)-  1;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG)-  1;	  int    result    =(int)Math.rint((    int)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	26	8	replace
196	[BUG]  [BUGGY]  int  result  =(int)_numberLong;  Int  result  =(int)_numberLong;  [CE]  cannot  find  symbol  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)_numberLong;  Int  result  =(int)_numberLong;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)_numberLong;  Int  result  =(int)_numberLong;	  short    result    =(short)_numberLong;    Short    result    =(short)_numberLong;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
197	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  char  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  char  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)-    1);    char  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)-  1);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	42	None	add
198	[BUG]  [BUGGY]  ((  long)result)!=  _numberLong.intValue();  [CE]  not  a  statement  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  ((  long)result)!=  _numberLong.intValue();  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	((  long)result)!=  _numberLong.intValue();	  ((    long)_numTypesValid)!=    _numberLong.intValue();    	non-compiled	[CE]  not  a  statement	4	None	replace
199	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_UNKNOWN)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
200	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  _num  [CE]  ')'  expected  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  _num  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  _num	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_UNKNOWN)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  ')'  expected	50	None	replace
201	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  _numType  [CE]  ')'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  _numType  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_UNKNOWN)  {  result  =(int)Math.rint((  _numType	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_UNKNOWN)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  ')'  expected	50	None	replace
202	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid!=  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  }  [CE]  variable  result  is  already  defined  in  method  convertNumberToInt()  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  if(_numTypesValid!=  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  }  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    +    NR_LONG);    if(_numTypesValid!=  NR_UNKNOWN)  {  int  result  =(int)Math.rint((  long)_numTypesValid  +  NR_LONG);  }	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  convertNumberToInt()	36	None	add
203	[BUG]  [BUGGY]  double  result  =(double)_numberInt;  [CE]  possible  loss  of  precision  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  double  result  =(double)_numberInt;  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	double  result  =(double)_numberInt;	  double    result    =    (double)_numberLong;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
204	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numTypesValid,  JsonToken.VALUE_NUMBER_INT);  [CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;  [FE]                      JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext.setCurrentName(_numTypesValid,  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext.setCurrentName(_numTypesValid,  JsonToken.VALUE_NUMBER_INT);	  _parsingContext.setCurrentName(_numTypesValid);    	non-compiled	[CE]  method  setCurrentName  in  class  JsonReadContext  cannot  be  applied  to  given  types;	35	None	replace
205	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numTypesValid,  value);  [CE]  cannot  find  symbol  value  [FE]                        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext.setCurrentName(_numTypesValid,  value);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext.setCurrentName(_numTypesValid,  value);	  _parsingContext.setCurrentName(_numTypesValid);    	non-compiled	[CE]  cannot  find  symbol  value	35	None	replace
206	[BUG]  [BUGGY]  _parsingContext.setCurrentName(_numTypesValid,  result);  [CE]  cannot  find  symbol  result  [FE]                          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  _parsingContext.setCurrentName(_numTypesValid,  result);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	_parsingContext.setCurrentName(_numTypesValid,  result);	  _parsingContext.setCurrentName(_numTypesValid);    	non-compiled	[CE]  cannot  find  symbol  result	35	None	replace
207	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	add	Integer  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    Integer    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	19	8	replace
208	[BUG]  [BUGGY]  Integer  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [FE]  JsonParseException  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  Integer  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	Integer  result  =(int)Math.rint((  int)_numTypesValid  &  NR_LONG);	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    Integer    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	compilable	  [FE]  JsonParseException  	19	8	replace
209	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_  [CE]  ')'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG);  Integer  result  =(int)Math.rint((  long)_numTypesValid  &  NR_	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    Integer    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    	non-compiled	[CE]  ')'  expected	19	None	replace
210	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1)/  2);  [CE]  ';'  expected  [FE]        JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1)/  2);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)+  1)/  2);	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG)+    1));    	non-compiled	[CE]  ';'  expected	45	None	replace
211	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1);  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1;  int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1);  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG)+    1;    int  result  =(int)Math.rint((  long)_numTypesValid  &  NR_LONG)+  1);	  	non-compiled	[CE]  ';'  expected	47	None	add
212	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numType  [CE]  ')'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numType  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numType	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
213	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numTypesVal  [CE]  ')'  expected  [FE]              JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numTypesVal  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  long)_numTypesValid  -  NR_LONG);  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  long)_numTypesVal	  int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    long)_numTypesValid    &    NR_LONG);    }    	non-compiled	[CE]  ')'  expected	20	None	replace
214	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)  [CE]  ')'  expected  [FE]          JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  Integer  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG)	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    Integer    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    	non-compiled	[CE]  ')'  expected	11	None	replace
215	[BUG]  [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _numTypesValid  [CE]  ')'  expected  [FE]            JsonParseException      [CONTEXT]      {  if  ((_numTypesValid  &  NR_LONG)  !=  0)  {        [BUGGY]  int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _numTypesValid  [BUGGY]      if  (((long)  result)  !=  _numberLong)  {  _reportError(     "Numeric  value  (     "+getText()+     ")  out  of  range  of  int     ");  }  _numberInt  =  result;  }  else  if  ((_numTypesValid  &  NR_BIGINT)  !=  0)  {  if  (BI_MIN_INT.compareTo(_numberBigInt)  >  0  ||  BI_MAX_INT.compareTo(_numberBigInt)  <  0)  {  reportOverflowInt();  }  _numberInt  =  _numberBigInt.intValue();  [CLASS]  ParserBase  [METHOD]  convertNumberToInt  [RETURN_TYPE]  void  [VARIABLES]  double  _numberDouble  d  value  ByteArrayBuilder  _byteArrayBuilder  builder  int  _currInputRow  _currInputRowStart  _expLength  _fractLength  _inputEnd  _inputPtr  _intLength  _numTypesValid  _numberInt  _tokenInputCol  _tokenInputRow  changed  changedFeatures  changes  col  expLen  expType  f  features  fractLen  i  intLen  len  mask  newFeatureFlags  newMask  newState  offset  oldState  result  values  long  _currInputProcessed  _numberLong  _tokenInputTotal  l  BigDecimal  _numberBigDecimal  char[]  _nameCopyBuffer  buf  JsonReadContext  _parsingContext  ctxt  parent  byte[]  _binaryValue  boolean  _closed  _nameCopied  _numberNegative  negative  TextBuffer  _textBuffer  IOContext  _ioContext  ctxt  BigInteger  _numberBigInt  JsonToken  _nextToken  	projects/JacksonCore24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java	0.5303300858899106	885	885	8	replace	int  result  =(int)Math.rint((  _numTypesValid  &  NR_LONG));  if(_numTypesValid  ==  NR_LONG)  {  result  =(int)Math.rint((  _numTypesValid	  int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    if(_numTypesValid    ==    NR_LONG)    {    int    result    =(int)Math.rint((    _numTypesValid    &    NR_LONG));    }    	non-compiled	[CE]  ')'  expected	12	None	replace
